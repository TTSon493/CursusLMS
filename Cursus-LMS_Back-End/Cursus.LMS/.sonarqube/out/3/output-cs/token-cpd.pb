¸]
kD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\TransactionService.cs
	namespace

 	
Cursus


 
.

 
LMS

 
.

 
Service

 
.

 
Service

 $
;

$ %
public 
class 
TransactionService 
:  !
ITransactionService" 5
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
IMapper 
_mapper $
;$ %
public 

TransactionService 
( 
IUnitOfWork )

unitOfWork* 4
,4 5
IMapper6 =
mapper> D
)D E
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; 
} 
public 

async 
Task 
< 
ResponseDTO !
>! "
GetTransactions# 2
(2 3
ClaimsPrincipal 
User 
, 
string 
? 
userId 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
= 
$num 
, 
int 
pageSize 
= 
$num 
)   
{!! 
try"" 
{## 	
if$$ 
($$ 
userId$$ 
.$$ 
IsNullOrEmpty$$ $
($$$ %
)$$% &
)$$& '
{%% 
userId&& 
=&& 
User&& 
.&& 
Claims&& $
.&&$ %
FirstOrDefault&&% 3
(&&3 4
x&&4 5
=>&&6 8
x&&9 :
.&&: ;
Type&&; ?
==&&@ B

ClaimTypes&&C M
.&&M N
NameIdentifier&&N \
)&&\ ]
?&&] ^
.&&^ _
Value&&_ d
;&&d e
}'' 
var)) 
transactions)) 
=)) 
await)) $
_unitOfWork))% 0
.))0 1!
TransactionRepository))1 F
.))F G
GetAllAsync))G R
())R S
x))S T
=>))U W
x))X Y
.))Y Z
UserId))Z `
==))a c
userId))d j
)))j k
;))k l
if,, 
(,, 
!,, 
string,, 
.,, 
IsNullOrEmpty,, %
(,,% &
filterOn,,& .
),,. /
&&,,0 2
!,,3 4
string,,4 :
.,,: ;
IsNullOrEmpty,,; H
(,,H I
filterQuery,,I T
),,T U
),,U V
{-- 
switch.. 
(.. 
filterOn..  
...  !
Trim..! %
(..% &
)..& '
...' (
ToLower..( /
(../ 0
)..0 1
)..1 2
{// 
case00 
$str00 
:00  
{11 
transactions22 $
=22% &
transactions22' 3
.223 4
Where224 9
(33 
x44 
=>44  
x44! "
.44" #
Type44# '
.44' (
ToString44( 0
(440 1
)441 2
.442 3
Contains443 ;
(44; <
filterQuery44< G
,44G H
StringComparison44I Y
.44Y Z$
CurrentCultureIgnoreCase44Z r
)44r s
)44s t
;44t u
break55 
;55 
}66 
case77 
$str77 !
:77! "
{88 
transactions99 $
=99% &
transactions99' 3
.993 4
Where994 9
(:: 
x;; 
=>;;  
x;;! "
.;;" #
Amount;;# )
.;;) *
ToString;;* 2
(;;2 3
CultureInfo;;3 >
.;;> ?
InvariantCulture;;? O
);;O P
.;;P Q
Contains;;Q Y
(;;Y Z
filterQuery;;Z e
,;;e f
StringComparison<<  0
.<<0 1$
CurrentCultureIgnoreCase<<1 I
)<<I J
)<<J K
;<<K L
break== 
;== 
}>> 
default?? 
:?? 
{@@ 
breakAA 
;AA 
}BB 
}CC 
}DD 
ifFF 
(FF 
!FF 
stringFF 
.FF 
IsNullOrEmptyFF %
(FF% &
sortByFF& ,
)FF, -
)FF- .
{GG 
switchHH 
(HH 
sortByHH 
.HH 
TrimHH #
(HH# $
)HH$ %
.HH% &
ToLowerHH& -
(HH- .
)HH. /
)HH/ 0
{II 
caseJJ 
$strJJ 
:JJ  
{KK 
transactionsLL $
=LL% &
isAscendingLL' 2
==LL3 5
trueLL6 :
?MM 
[MM 
..MM !
transactionsMM" .
.MM. /
OrderByMM/ 6
(MM6 7
xMM7 8
=>MM9 ;
xMM< =
.MM= >
TypeMM> B
)MMB C
]MMC D
:NN 
[NN 
..NN !
transactionsNN" .
.NN. /
OrderByDescendingNN/ @
(NN@ A
xNNA B
=>NNC E
xNNF G
.NNG H
TypeNNH L
)NNL M
]NNM N
;NNN O
breakOO 
;OO 
}PP 
caseQQ 
$strQQ !
:QQ! "
{RR 
transactionsSS $
=SS% &
isAscendingSS' 2
==SS3 5
trueSS6 :
?TT 
[TT 
..TT !
transactionsTT" .
.TT. /
OrderByTT/ 6
(TT6 7
xTT7 8
=>TT9 ;
xTT< =
.TT= >
AmountTT> D
)TTD E
]TTE F
:UU 
[UU 
..UU !
transactionsUU" .
.UU. /
OrderByDescendingUU/ @
(UU@ A
xUUA B
=>UUC E
xUUF G
.UUG H
AmountUUH N
)UUN O
]UUO P
;UUP Q
breakVV 
;VV 
}WW 
caseXX 
$strXX 
:XX  
{YY 
transactionsZZ $
=ZZ% &
isAscendingZZ' 2
==ZZ3 5
trueZZ6 :
?[[ 
[[[ 
..[[ !
transactions[[" .
.[[. /
OrderBy[[/ 6
([[6 7
x[[7 8
=>[[9 ;
x[[< =
.[[= >
CreatedTime[[> I
)[[I J
][[J K
:\\ 
[\\ 
..\\ !
transactions\\" .
.\\. /
OrderByDescending\\/ @
(\\@ A
x\\A B
=>\\C E
x\\F G
.\\G H
CreatedTime\\H S
)\\S T
]\\T U
;\\U V
break]] 
;]] 
}^^ 
default__ 
:__ 
{`` 
breakaa 
;aa 
}bb 
}cc 
}dd 
ifgg 
(gg 

pageNumbergg 
>gg 
$numgg 
&&gg !
pageSizegg" *
>gg+ ,
$numgg- .
)gg. /
{hh 
varii 

skipResultii 
=ii  
(ii! "

pageNumberii" ,
-ii- .
$numii/ 0
)ii0 1
*ii2 3
pageSizeii4 <
;ii< =
transactionsjj 
=jj 
transactionsjj +
.jj+ ,
Skipjj, 0
(jj0 1

skipResultjj1 ;
)jj; <
.jj< =
Takejj= A
(jjA B
pageSizejjB J
)jjJ K
.jjK L
ToListjjL R
(jjR S
)jjS T
;jjT U
}kk 
varmm 
transactionsDtomm 
=mm  !
_mappermm" )
.mm) *
Mapmm* -
<mm- .
IEnumerablemm. 9
<mm9 :
GetTransactionDTOmm: K
>mmK L
>mmL M
(mmM N
transactionsmmN Z
)mmZ [
;mm[ \
returnoo 
newoo 
ResponseDTOoo "
(oo" #
)oo# $
{pp 
	IsSuccessqq 
=qq 
trueqq  
,qq  !
Messagerr 
=rr 
$strrr 9
,rr9 :

StatusCodess 
=ss 
$numss  
,ss  !
Resulttt 
=tt 
transactionsDtott (
}uu 
;uu 
}vv 	
catchww 
(ww 
	Exceptionww 
eww 
)ww 
{xx 	
returnyy 
newyy 
ResponseDTOyy "
(yy" #
)yy# $
{zz 
	IsSuccess{{ 
={{ 
false{{ !
,{{! "
Message|| 
=|| 
e|| 
.|| 
Message|| #
,||# $
Result}} 
=}} 
null}} 
,}} 

StatusCode~~ 
=~~ 
$num~~  
} 
; 
}
ÄÄ 	
}
ÅÅ 
public
ÉÉ 

async
ÉÉ 
Task
ÉÉ 
<
ÉÉ 
ResponseDTO
ÉÉ !
>
ÉÉ! "
CreateTransaction
ÉÉ# 4
(
ÉÉ4 5"
CreateTransactionDTO
ÉÉ5 I"
createTransactionDto
ÉÉJ ^
)
ÉÉ^ _
{
ÑÑ 
try
ÖÖ 
{
ÜÜ 	
var
áá 
transaction
áá 
=
áá 
new
áá !
Transaction
áá" -
(
áá- .
)
áá. /
{
àà 
Id
ââ 
=
ââ 
Guid
ââ 
.
ââ 
NewGuid
ââ !
(
ââ! "
)
ââ" #
,
ââ# $
Amount
ää 
=
ää "
createTransactionDto
ää -
.
ää- .
Amount
ää. 4
,
ää4 5
Currency
ãã 
=
ãã 
$str
ãã  
,
ãã  !
UserId
åå 
=
åå "
createTransactionDto
åå -
.
åå- .
UserId
åå. 4
,
åå4 5
CreatedTime
çç 
=
çç 
DateTime
çç &
.
çç& '
UtcNow
çç' -
,
çç- .
Type
éé 
=
éé "
createTransactionDto
éé +
.
éé+ ,
Type
éé, 0
}
èè 
;
èè 
await
ëë 
_unitOfWork
ëë 
.
ëë #
TransactionRepository
ëë 3
.
ëë3 4
AddAsync
ëë4 <
(
ëë< =
transaction
ëë= H
)
ëëH I
;
ëëI J
await
íí 
_unitOfWork
íí 
.
íí 
	SaveAsync
íí '
(
íí' (
)
íí( )
;
íí) *
return
îî 
new
îî 
ResponseDTO
îî "
(
îî" #
)
îî# $
{
ïï 
	IsSuccess
ññ 
=
ññ 
true
ññ  
,
ññ  !
Message
óó 
=
óó 
$str
óó ;
,
óó; <
Result
òò 
=
òò 
transaction
òò $
,
òò$ %

StatusCode
ôô 
=
ôô 
$num
ôô  
}
öö 
;
öö 
}
õõ 	
catch
úú 
(
úú 
	Exception
úú 
e
úú 
)
úú 
{
ùù 	
return
ûû 
new
ûû 
ResponseDTO
ûû "
(
ûû" #
)
ûû# $
{
üü 
	IsSuccess
†† 
=
†† 
false
†† !
,
††! "
Message
°° 
=
°° 
e
°° 
.
°° 
Message
°° #
,
°°# $
Result
¢¢ 
=
¢¢ 
null
¢¢ 
,
¢¢ 

StatusCode
££ 
=
££ 
$num
££  
}
§§ 
;
§§ 
}
•• 	
}
¶¶ 
}ßß ≤Y
eD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\TokenService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
TokenService 
: 
ITokenService )
{ 
private 
readonly 
UserManager  
<  !
ApplicationUser! 0
>0 1
_userManager2 >
;> ?
private 
readonly 
IConfiguration #
_configuration$ 2
;2 3
private 
readonly 
IRedisService "
_redisService# 0
;0 1
public 

TokenService 
( 
UserManager #
<# $
ApplicationUser$ 3
>3 4
userManager5 @
,@ A
IConfigurationB P
configurationQ ^
,^ _
IRedisService 
redisService "
)" #
{ 
_userManager 
= 
userManager "
;" #
_configuration 
= 
configuration &
;& '
_redisService 
= 
redisService $
;$ %
} 
public 

async 
Task 
< 
string 
> '
GenerateJwtAccessTokenAsync 9
(9 :
ApplicationUser: I
userJ N
)N O
{ 
var 
	userRoles 
= 
await 
_userManager *
.* +
GetRolesAsync+ 8
(8 9
user9 =
)= >
;> ?
var 

authClaims 
= 
new 
List !
<! "
Claim" '
>' (
(( )
)) *
{   	
new!! 
Claim!! 
(!! 

ClaimTypes!!  
.!!  !
Name!!! %
,!!% &
user!!' +
.!!+ ,
UserName!!, 4
)!!4 5
,!!5 6
new"" 
Claim"" 
("" 

ClaimTypes""  
.""  !
NameIdentifier""! /
,""/ 0
user""1 5
.""5 6
Id""6 8
)""8 9
,""9 :
}## 	
;##	 

foreach%% 
(%% 
var%% 
role%% 
in%% 
	userRoles%% &
)%%& '
{&& 	

authClaims'' 
.'' 
Add'' 
('' 
new'' 
Claim'' $
(''$ %

ClaimTypes''% /
.''/ 0
Role''0 4
,''4 5
role''6 :
)'': ;
)''; <
;''< =
}(( 	
var++ 

authSecret++ 
=++ 
new++  
SymmetricSecurityKey++ 1
(++1 2
Encoding++2 :
.++: ;
UTF8++; ?
.++? @
GetBytes++@ H
(++H I
_configuration++I W
[++W X
$str++X d
]++d e
)++e f
)++f g
;++g h
var,, 
signingCredentials,, 
=,,  
new,,! $
SigningCredentials,,% 7
(,,7 8

authSecret,,8 B
,,,B C
SecurityAlgorithms,,D V
.,,V W

HmacSha256,,W a
),,a b
;,,b c
var.. 
tokenObject.. 
=.. 
new.. 
JwtSecurityToken.. .
(... /
issuer// 
:// 
_configuration// "
[//" #
$str//# 4
]//4 5
,//5 6
audience00 
:00 
_configuration00 $
[00$ %
$str00% 8
]008 9
,009 :
	notBefore11 
:11 
DateTime11 
.11  
Now11  #
,11# $
expires22 
:22 
DateTime22 
.22 
Now22 !
.22! "

AddMinutes22" ,
(22, -
$num22- /
)22/ 0
,220 1
claims33 
:33 

authClaims33 
,33 
signingCredentials44 
:44 
signingCredentials44  2
)55 	
;55	 

var77 
accessToken77 
=77 
new77 #
JwtSecurityTokenHandler77 5
(775 6
)776 7
.777 8

WriteToken778 B
(77B C
tokenObject77C N
)77N O
;77O P
return99 
accessToken99 
;99 
}:: 
public@@ 

async@@ 
Task@@ 
<@@ 
string@@ 
>@@ (
GenerateJwtRefreshTokenAsync@@ :
(@@: ;
ApplicationUser@@; J
user@@K O
)@@O P
{AA 
varBB 

authClaimsBB 
=BB 
newBB 
ListBB !
<BB! "
ClaimBB" '
>BB' (
(BB( )
)BB) *
{CC 	
newDD 
ClaimDD 
(DD 

ClaimTypesDD  
.DD  !
NameIdentifierDD! /
,DD/ 0
userDD1 5
.DD5 6
IdDD6 8
)DD8 9
,DD9 :
}EE 	
;EE	 

varHH 

authSecretHH 
=HH 
newHH  
SymmetricSecurityKeyHH 1
(HH1 2
EncodingHH2 :
.HH: ;
UTF8HH; ?
.HH? @
GetBytesHH@ H
(HHH I
_configurationHHI W
[HHW X
$strHHX d
]HHd e
)HHe f
)HHf g
;HHg h
varII 
signingCredentialsII 
=II  
newII! $
SigningCredentialsII% 7
(II7 8

authSecretII8 B
,IIB C
SecurityAlgorithmsIID V
.IIV W

HmacSha256IIW a
)IIa b
;IIb c
varKK 
tokenObjectKK 
=KK 
newKK 
JwtSecurityTokenKK .
(KK. /
issuerLL 
:LL 
_configurationLL "
[LL" #
$strLL# 4
]LL4 5
,LL5 6
audienceMM 
:MM 
_configurationMM $
[MM$ %
$strMM% 8
]MM8 9
,MM9 :
	notBeforeNN 
:NN 
DateTimeNN 
.NN  
NowNN  #
,NN# $
expiresOO 
:OO 
DateTimeOO 
.OO 
NowOO !
.OO! "
AddDaysOO" )
(OO) *
$numOO* +
)OO+ ,
,OO, -
claimsPP 
:PP 

authClaimsPP 
,PP 
signingCredentialsQQ 
:QQ 
signingCredentialsQQ  2
)RR 	
;RR	 

varTT 
refreshTokenTT 
=TT 
newTT #
JwtSecurityTokenHandlerTT 6
(TT6 7
)TT7 8
.TT8 9

WriteTokenTT9 C
(TTC D
tokenObjectTTD O
)TTO P
;TTP Q
returnVV 
refreshTokenVV 
;VV 
}WW 
publicYY 

asyncYY 
TaskYY 
<YY 
ClaimsPrincipalYY %
>YY% &!
GetPrincipalFromTokenYY' <
(YY< =
stringYY= C
tokenYYD I
)YYI J
{ZZ 
var[[ 
tokenHandler[[ 
=[[ 
new[[ #
JwtSecurityTokenHandler[[ 6
([[6 7
)[[7 8
;[[8 9
var\\ 
key\\ 
=\\ 
Encoding\\ 
.\\ 
UTF8\\ 
.\\  
GetBytes\\  (
(\\( )
_configuration\\) 7
[\\7 8
$str\\8 D
]\\D E
)\\E F
;\\F G
try^^ 
{__ 	
var`` 
	principal`` 
=`` 
tokenHandler`` (
.``( )
ValidateToken``) 6
(``6 7
token``7 <
,``< =
new``> A%
TokenValidationParameters``B [
{aa 
ValidateIssuerbb 
=bb  
truebb! %
,bb% &
ValidateAudiencecc  
=cc! "
truecc# '
,cc' (
ValidateLifetimedd  
=dd! "
truedd# '
,dd' ($
ValidateIssuerSigningKeyee (
=ee) *
trueee+ /
,ee/ 0
ValidIssuerff 
=ff 
_configurationff ,
[ff, -
$strff- >
]ff> ?
,ff? @
ValidAudiencegg 
=gg 
_configurationgg  .
[gg. /
$strgg/ B
]ggB C
,ggC D
IssuerSigningKeyhh  
=hh! "
newhh# & 
SymmetricSecurityKeyhh' ;
(hh; <
keyhh< ?
)hh? @
}ii 
,ii 
outii 
SecurityTokenii  
validatedTokenii! /
)ii/ 0
;ii0 1
returnjj 
	principaljj 
;jj 
}kk 	
catchll 
{mm 	
returnoo 
nulloo 
;oo 
}pp 	
}qq 
publicyy 

asyncyy 
Taskyy 
<yy 
boolyy 
>yy 
StoreRefreshTokenyy -
(yy- .
stringyy. 4
userIdyy5 ;
,yy; <
stringyy= C
refreshTokenyyD P
)yyP Q
{zz 
string{{ 
redisKey{{ 
={{ 
$"{{ 
$str{{ #
{{{# $
userId{{$ *
}{{* +
$str{{+ 8
"{{8 9
;{{9 :
var|| 
result|| 
=|| 
await|| 
_redisService|| (
.||( )
StoreString||) 4
(||4 5
redisKey||5 =
,||= >
refreshToken||? K
)||K L
;||L M
return}} 
result}} 
;}} 
}~~ 
public
ÖÖ 

async
ÖÖ 
Task
ÖÖ 
<
ÖÖ 
string
ÖÖ 
>
ÖÖ "
RetrieveRefreshToken
ÖÖ 2
(
ÖÖ2 3
string
ÖÖ3 9
userId
ÖÖ: @
)
ÖÖ@ A
{
ÜÜ 
string
áá 
redisKey
áá 
=
áá 
$"
áá 
$str
áá #
{
áá# $
userId
áá$ *
}
áá* +
$str
áá+ 8
"
áá8 9
;
áá9 :
var
àà 
result
àà 
=
àà 
await
àà 
_redisService
àà (
.
àà( )
RetrieveString
àà) 7
(
àà7 8
redisKey
àà8 @
)
àà@ A
;
ààA B
return
ââ 
result
ââ 
;
ââ 
}
ää 
public
ëë 

async
ëë 
Task
ëë 
<
ëë 
bool
ëë 
>
ëë  
DeleteRefreshToken
ëë .
(
ëë. /
string
ëë/ 5
userId
ëë6 <
)
ëë< =
{
íí 
string
ìì 
redisKey
ìì 
=
ìì 
$"
ìì 
$str
ìì #
{
ìì# $
userId
ìì$ *
}
ìì* +
$str
ìì+ 8
"
ìì8 9
;
ìì9 :
var
îî 
result
îî 
=
îî 
await
îî 
_redisService
îî (
.
îî( )
DeleteString
îî) 5
(
îî5 6
redisKey
îî6 >
)
îî> ?
;
îî? @
return
ïï 
result
ïï 
;
ïï 
}
ññ 
}óó €V
iD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\TermOfUseService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public		 
class		 
TermOfUseService		 
:		 
ITermOfUseService		  1
{

 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
IMapper 
_mapper $
;$ %
public 

TermOfUseService 
( 
IUnitOfWork '

unitOfWork( 2
,2 3
IMapper4 ;
mapper< B
)B C
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; 
} 
public 

async 
Task 
< 
ResponseDTO !
>! "
GetTermOfUses# 0
(0 1
)1 2
{ 
try 
{ 	
var 

termOfUses 
= 
await "
_unitOfWork# .
.. /
TermOfUseRepository/ B
.B C
GetAllAsyncC N
(N O
)O P
;P Q
return 
new 
ResponseDTO "
{ 
	IsSuccess 
= 
true  
,  !
Message 
= 
$str 9
,9 :

StatusCode 
= 
$num  
,  !
Result 
= 

termOfUses #
} 
; 
}   	
catch!! 
(!! 
	Exception!! 
ex!! 
)!! 
{"" 	
return## 
new## 
ResponseDTO## "
{$$ 
	IsSuccess%% 
=%% 
false%% !
,%%! "
Message&& 
=&& 
ex&& 
.&& 
Message&& $
,&&$ %

StatusCode'' 
='' 
$num''  
}(( 
;(( 
})) 	
}** 
public,, 

async,, 
Task,, 
<,, 
ResponseDTO,, !
>,,! "
GetTermOfUse,,# /
(,,/ 0
Guid,,0 4
id,,5 7
),,7 8
{-- 
try.. 
{// 	
var00 
	termOfUse00 
=00 
await00 !
_unitOfWork00" -
.00- .
TermOfUseRepository00. A
.00A B
GetAsync00B J
(00J K
t00K L
=>00M O
t00P Q
.00Q R
Id00R T
==00U W
id00X Z
)00Z [
;00[ \
if11 
(11 
	termOfUse11 
==11 
null11 !
)11! "
{22 
return33 
new33 
ResponseDTO33 &
{44 
	IsSuccess55 
=55 
false55  %
,55% &
Message66 
=66 
$str66 5
,665 6

StatusCode77 
=77  
$num77! $
}88 
;88 
}99 
return:: 
new:: 
ResponseDTO:: "
{;; 
	IsSuccess<< 
=<< 
true<<  
,<<  !
Message== 
=== 
$str== 8
,==8 9

StatusCode>> 
=>> 
$num>>  
,>>  !
Result?? 
=?? 
	termOfUse?? "
}@@ 
;@@ 
}AA 	
catchBB 
(BB 
	ExceptionBB 
exBB 
)BB 
{CC 	
returnDD 
newDD 
ResponseDTODD "
{EE 
	IsSuccessFF 
=FF 
falseFF !
,FF! "
MessageGG 
=GG 
exGG 
.GG 
MessageGG $
,GG$ %

StatusCodeHH 
=HH 
$numHH  
}II 
;II 
}JJ 	
}KK 
publicMM 

asyncMM 
TaskMM 
<MM 
ResponseDTOMM !
>MM! "
CreateTermOfUseMM# 2
(MM2 3
CreateTermOfUseDTOMM3 E
termOfUseDtoMMF R
)MMR S
{NN 
tryOO 
{PP 	
varQQ 
	termOfUseQQ 
=QQ 
_mapperQQ #
.QQ# $
MapQQ$ '
<QQ' (
	TermOfUseQQ( 1
>QQ1 2
(QQ2 3
termOfUseDtoQQ3 ?
)QQ? @
;QQ@ A
	termOfUseRR 
.RR 
IdRR 
=RR 
GuidRR 
.RR  
NewGuidRR  '
(RR' (
)RR( )
;RR) *
	termOfUseSS 
.SS 
LastUpdatedSS !
=SS" #
DateTimeSS$ ,
.SS, -
NowSS- 0
;SS0 1
awaitUU 
_unitOfWorkUU 
.UU 
TermOfUseRepositoryUU 1
.UU1 2
AddAsyncUU2 :
(UU: ;
	termOfUseUU; D
)UUD E
;UUE F
awaitVV 
_unitOfWorkVV 
.VV 
	SaveAsyncVV '
(VV' (
)VV( )
;VV) *
returnXX 
newXX 
ResponseDTOXX "
{YY 
	IsSuccessZZ 
=ZZ 
trueZZ  
,ZZ  !
Message[[ 
=[[ 
$str[[ <
,[[< =

StatusCode\\ 
=\\ 
$num\\  
,\\  !
Result]] 
=]] 
	termOfUse]] "
.]]" #
Id]]# %
}^^ 
;^^ 
}__ 	
catch`` 
(`` 
	Exception`` 
ex`` 
)`` 
{aa 	
returnbb 
newbb 
ResponseDTObb "
{cc 
	IsSuccessdd 
=dd 
falsedd !
,dd! "
Messageee 
=ee 
exee 
.ee 
Messageee $
,ee$ %

StatusCodeff 
=ff 
$numff  
}gg 
;gg 
}hh 	
}ii 
publickk 

asynckk 
Taskkk 
<kk 
ResponseDTOkk !
>kk! "
UpdateTermOfUsekk# 2
(kk2 3
UpdateTermOfUseDTOkk3 E
termOfUseDtokkF R
)kkR S
{ll 
trymm 
{nn 	
varoo 
	termOfUseoo 
=oo 
awaitoo !
_unitOfWorkoo" -
.oo- .
TermOfUseRepositoryoo. A
.ooA B
GetAsyncooB J
(ooJ K
tooK L
=>ooM O
tooP Q
.ooQ R
IdooR T
==ooU W
termOfUseDtoooX d
.ood e
Idooe g
)oog h
;ooh i
ifpp 
(pp 
	termOfUsepp 
==pp 
nullpp !
)pp! "
{qq 
returnrr 
newrr 
ResponseDTOrr &
{ss 
	IsSuccesstt 
=tt 
falsett  %
,tt% &
Messageuu 
=uu 
$struu 5
,uu5 6

StatusCodevv 
=vv  
$numvv! $
}ww 
;ww 
}xx 
_mapperzz 
.zz 
Mapzz 
(zz 
termOfUseDtozz $
,zz$ %
	termOfUsezz& /
)zz/ 0
;zz0 1
	termOfUse{{ 
.{{ 
LastUpdated{{ !
={{" #
DateTime{{$ ,
.{{, -
Now{{- 0
;{{0 1
_unitOfWork}} 
.}} 
TermOfUseRepository}} +
.}}+ ,
Update}}, 2
(}}2 3
	termOfUse}}3 <
)}}< =
;}}= >
await~~ 
_unitOfWork~~ 
.~~ 
	SaveAsync~~ '
(~~' (
)~~( )
;~~) *
return
ÄÄ 
new
ÄÄ 
ResponseDTO
ÄÄ "
{
ÅÅ 
	IsSuccess
ÇÇ 
=
ÇÇ 
true
ÇÇ  
,
ÇÇ  !
Message
ÉÉ 
=
ÉÉ 
$str
ÉÉ <
,
ÉÉ< =

StatusCode
ÑÑ 
=
ÑÑ 
$num
ÑÑ  
}
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
catch
áá 
(
áá 
	Exception
áá 
ex
áá 
)
áá 
{
àà 	
return
ââ 
new
ââ 
ResponseDTO
ââ "
{
ää 
	IsSuccess
ãã 
=
ãã 
false
ãã !
,
ãã! "
Message
åå 
=
åå 
ex
åå 
.
åå 
Message
åå $
,
åå$ %

StatusCode
çç 
=
çç 
$num
çç  
}
éé 
;
éé 
}
èè 	
}
êê 
public
íí 

async
íí 
Task
íí 
<
íí 
ResponseDTO
íí !
>
íí! "
DeleteTermOfUse
íí# 2
(
íí2 3
Guid
íí3 7
id
íí8 :
)
íí: ;
{
ìì 
try
îî 
{
ïï 	
var
ññ 
	termOfUse
ññ 
=
ññ 
await
ññ !
_unitOfWork
ññ" -
.
ññ- .!
TermOfUseRepository
ññ. A
.
ññA B
GetAsync
ññB J
(
ññJ K
t
ññK L
=>
ññM O
t
ññP Q
.
ññQ R
Id
ññR T
==
ññU W
id
ññX Z
)
ññZ [
;
ññ[ \
if
óó 
(
óó 
	termOfUse
óó 
==
óó 
null
óó !
)
óó! "
{
òò 
return
ôô 
new
ôô 
ResponseDTO
ôô &
{
öö 
	IsSuccess
õõ 
=
õõ 
false
õõ  %
,
õõ% &
Message
úú 
=
úú 
$str
úú 5
,
úú5 6

StatusCode
ùù 
=
ùù  
$num
ùù! $
}
ûû 
;
ûû 
}
üü 
	termOfUse
°° 
.
°° 
IsActive
°° 
=
°°  
false
°°! &
;
°°& '
await
¢¢ 
_unitOfWork
¢¢ 
.
¢¢ 
	SaveAsync
¢¢ '
(
¢¢' (
)
¢¢( )
;
¢¢) *
return
§§ 
new
§§ 
ResponseDTO
§§ "
{
•• 
	IsSuccess
¶¶ 
=
¶¶ 
true
¶¶  
,
¶¶  !
Message
ßß 
=
ßß 
$str
ßß <
,
ßß< =

StatusCode
®® 
=
®® 
$num
®®  
}
©© 
;
©© 
}
™™ 	
catch
´´ 
(
´´ 
	Exception
´´ 
ex
´´ 
)
´´ 
{
¨¨ 	
return
≠≠ 
new
≠≠ 
ResponseDTO
≠≠ "
{
ÆÆ 
	IsSuccess
ØØ 
=
ØØ 
false
ØØ !
,
ØØ! "
Message
∞∞ 
=
∞∞ 
ex
∞∞ 
.
∞∞ 
Message
∞∞ $
,
∞∞$ %

StatusCode
±± 
=
±± 
$num
±±  
}
≤≤ 
;
≤≤ 
}
≥≥ 	
}
¥¥ 
}µµ £¥
gD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\StudentService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
{ 
public 

class 
StudentService 
:  !
IStudentsService" 2
{ 
private 
readonly 
IUnitOfWork $
_unitOfWork% 0
;0 1
private 
readonly 
IMapper  
_mapper! (
;( )
private 
readonly 
IClosedXMLService *
_closedXmlService+ <
;< =
private 
readonly 
IHubContext $
<$ %
NotificationHub% 4
>4 5
_notificationHub6 F
;F G
private 
readonly 
IWebHostEnvironment ,
_env- 1
;1 2
private 
readonly 
IConfiguration '
_config( /
;/ 0
public 
StudentService 
( 
IUnitOfWork )

unitOfWork* 4
,4 5
IMapper6 =
mapper> D
,D E
IClosedXMLService 
closedXmlService .
,. /
IHubContext0 ;
<; <
NotificationHub< K
>K L
notificationHubM \
,\ ]
IWebHostEnvironment 
env  #
,# $
IConfiguration% 3
config4 :
): ;
{ 	
_unitOfWork 
= 

unitOfWork $
;$ %
_mapper 
= 
mapper 
; 
_closedXmlService 
= 
closedXmlService  0
;0 1
_notificationHub 
= 
notificationHub .
;. /
_env   
=   
env   
;   
_config!! 
=!! 
config!! 
;!! 
}"" 	
public%% 
async%% 
Task%% 
<%% 
ResponseDTO%% %
>%%% &
GetAllStudent%%' 4
(&& 	
ClaimsPrincipal'' 
User''  
,''  !
string(( 
?(( 
filterOn(( 
,(( 
string)) 
?)) 
filterQuery)) 
,))  
string** 
?** 
sortBy** 
,** 
bool++ 
?++ 
isAscending++ 
,++ 
int,, 

pageNumber,, 
,,, 
int-- 
pageSize-- 
).. 	
{// 	
try22 
{33 
List44 
<44 
Student44 
>44 
students44 &
=44' (
new44) ,
List44- 1
<441 2
Student442 9
>449 :
(44: ;
)44; <
;44< =
if77 
(77 
!77 
string77 
.77 
IsNullOrEmpty77 )
(77) *
filterOn77* 2
)772 3
&&774 6
!777 8
string778 >
.77> ?
IsNullOrEmpty77? L
(77L M
filterQuery77M X
)77X Y
)77Y Z
{88 
switch99 
(99 
filterOn99 $
.99$ %
Trim99% )
(99) *
)99* +
.99+ ,
ToLower99, 3
(993 4
)994 5
)995 6
{:: 
case;; 
$str;; #
:;;# $
{<< 
students==  (
===) *
_unitOfWork==+ 6
.==6 7
StudentRepository==7 H
.==H I
GetAllAsync==I T
(==T U
includeProperties==U f
:==f g
$str==h y
)==y z
.>>$ %

GetAwaiter>>% /
(>>/ 0
)>>0 1
.>>1 2
	GetResult>>2 ;
(>>; <
)>>< =
.>>= >
Where>>> C
(>>C D
x>>D E
=>>>F H
x??( )
.??) *
ApplicationUser??* 9
.??9 :
FullName??: B
.??B C
Contains??C K
(??K L
filterQuery??L W
,??W X
StringComparison@@, <
.@@< =$
CurrentCultureIgnoreCase@@= U
)@@U V
)@@V W
.@@W X
ToList@@X ^
(@@^ _
)@@_ `
;@@` a
breakAA  %
;AA% &
}BB 
caseCC 
$strCC $
:CC$ %
{DD 
studentsEE  (
=EE) *
_unitOfWorkEE+ 6
.EE6 7
StudentRepositoryEE7 H
.EEH I
GetAllAsyncEEI T
(EET U
includePropertiesEEU f
:EEf g
$strEEh y
)EEy z
.FF$ %

GetAwaiterFF% /
(FF/ 0
)FF0 1
.FF1 2
	GetResultFF2 ;
(FF; <
)FF< =
.FF= >
WhereFF> C
(FFC D
xFFD E
=>FFF H
xGG( )
.GG) *
ApplicationUserGG* 9
.GG9 :
EmailGG: ?
.GG? @
ContainsGG@ H
(GGH I
filterQueryGGI T
,GGT U
StringComparisonHH, <
.HH< =$
CurrentCultureIgnoreCaseHH= U
)HHU V
)HHV W
.HHW X
ToListHHX ^
(HH^ _
)HH_ `
;HH` a
breakII  %
;II% &
}JJ 
defaultKK 
:KK  
{LL 
studentsMM  (
=MM) *
_unitOfWorkMM+ 6
.MM6 7
StudentRepositoryMM7 H
.MMH I
GetAllAsyncMMI T
(MMT U
includePropertiesMMU f
:MMf g
$strMMh y
)MMy z
.NN$ %

GetAwaiterNN% /
(NN/ 0
)NN0 1
.NN1 2
	GetResultNN2 ;
(NN; <
)NN< =
.NN= >
ToListNN> D
(NND E
)NNE F
;NNF G
breakOO  %
;OO% &
}PP 
}QQ 
}RR 
elseSS 
{TT 
studentsUU 
=UU 
_unitOfWorkUU *
.UU* +
StudentRepositoryUU+ <
.UU< =
GetAllAsyncUU= H
(UUH I
includePropertiesUUI Z
:UUZ [
$strUU\ m
)UUm n
.VV 

GetAwaiterVV #
(VV# $
)VV$ %
.VV% &
	GetResultVV& /
(VV/ 0
)VV0 1
.VV1 2
ToListVV2 8
(VV8 9
)VV9 :
;VV: ;
}WW 
ifZZ 
(ZZ 
!ZZ 
stringZZ 
.ZZ 
IsNullOrEmptyZZ )
(ZZ) *
sortByZZ* 0
)ZZ0 1
)ZZ1 2
{[[ 
switch\\ 
(\\ 
sortBy\\ "
.\\" #
Trim\\# '
(\\' (
)\\( )
.\\) *
ToLower\\* 1
(\\1 2
)\\2 3
)\\3 4
{]] 
case^^ 
$str^^ #
:^^# $
{__ 
students``  (
=``) *
isAscending``+ 6
==``7 9
true``: >
?aa$ %
[aa& '
..aa' )
studentsaa* 2
.aa2 3
OrderByaa3 :
(aa: ;
xaa; <
=>aa= ?
xaa@ A
.aaA B
ApplicationUseraaB Q
.aaQ R
FullNameaaR Z
)aaZ [
]aa[ \
:bb$ %
[bb& '
..bb' )
studentsbb* 2
.bb2 3
OrderByDescendingbb3 D
(bbD E
xbbE F
=>bbG I
xbbJ K
.bbK L
ApplicationUserbbL [
.bb[ \
FullNamebb\ d
)bbd e
]bbe f
;bbf g
breakcc  %
;cc% &
}dd 
caseee 
$stree $
:ee$ %
{ff 
studentsgg  (
=gg) *
isAscendinggg+ 6
==gg7 9
truegg: >
?hh$ %
[hh& '
..hh' )
studentshh* 2
.hh2 3
OrderByhh3 :
(hh: ;
xhh; <
=>hh= ?
xhh@ A
.hhA B
ApplicationUserhhB Q
.hhQ R
EmailhhR W
)hhW X
]hhX Y
:ii$ %
[ii& '
..ii' )
studentsii* 2
.ii2 3
OrderByDescendingii3 D
(iiD E
xiiE F
=>iiG I
xiiJ K
.iiK L
ApplicationUseriiL [
.ii[ \
Emailii\ a
)iia b
]iib c
;iic d
breakjj  %
;jj% &
}kk 
defaultll 
:ll  
{mm 
breaknn  %
;nn% &
}oo 
}pp 
}qq 
iftt 
(tt 

pageNumbertt 
>tt  
$numtt! "
&&tt# %
pageSizett& .
>tt/ 0
$numtt1 2
)tt2 3
{uu 
varvv 

skipResultvv "
=vv# $
(vv% &

pageNumbervv& 0
-vv1 2
$numvv3 4
)vv4 5
*vv6 7
pageSizevv8 @
;vv@ A
studentsww 
=ww 
studentsww '
.ww' (
Skipww( ,
(ww, -

skipResultww- 7
)ww7 8
.ww8 9
Takeww9 =
(ww= >
pageSizeww> F
)wwF G
.wwG H
ToListwwH N
(wwN O
)wwO P
;wwP Q
}xx 
if|| 
(|| 
students|| 
==|| 
null||  $
||||% '
!||( )
students||) 1
.||1 2
Any||2 5
(||5 6
)||6 7
)||7 8
{}} 
return~~ 
new~~ 
ResponseDTO~~ *
(~~* +
)~~+ ,
{ 
Message
ÄÄ 
=
ÄÄ  !
$str
ÄÄ" 9
,
ÄÄ9 :
Result
ÅÅ 
=
ÅÅ  
null
ÅÅ! %
,
ÅÅ% &
	IsSuccess
ÇÇ !
=
ÇÇ" #
false
ÇÇ$ )
,
ÇÇ) *

StatusCode
ÉÉ "
=
ÉÉ# $
$num
ÉÉ% (
}
ÑÑ 
;
ÑÑ 
}
ÖÖ 
var
áá  
studentInfoDtoList
áá &
=
áá' (
new
áá) ,
List
áá- 1
<
áá1 2
StudentInfoDTO
áá2 @
>
áá@ A
(
ááA B
)
ááB C
;
ááC D
foreach
ââ 
(
ââ 
var
ââ 
student
ââ $
in
ââ% '
students
ââ( 0
)
ââ0 1
{
ää 
var
ãã 
studentInfoDto
ãã &
=
ãã' (
new
ãã) ,
StudentInfoDTO
ãã- ;
{
åå 
	StudentId
çç !
=
çç" #
student
çç$ +
.
çç+ ,
	StudentId
çç, 5
,
çç5 6
FullName
éé  
=
éé! "
student
éé# *
.
éé* +
ApplicationUser
éé+ :
?
éé: ;
.
éé; <
FullName
éé< D
,
ééD E
Email
èè 
=
èè 
student
èè  '
.
èè' (
ApplicationUser
èè( 7
?
èè7 8
.
èè8 9
Email
èè9 >
,
èè> ?
PhoneNumber
êê #
=
êê$ %
student
êê& -
.
êê- .
ApplicationUser
êê. =
?
êê= >
.
êê> ?
PhoneNumber
êê? J
,
êêJ K
}
ëë 
;
ëë  
studentInfoDtoList
ìì &
.
ìì& '
Add
ìì' *
(
ìì* +
studentInfoDto
ìì+ 9
)
ìì9 :
;
ìì: ;
}
îî 
return
ññ 
new
ññ 
ResponseDTO
ññ &
(
ññ& '
)
ññ' (
{
óó 
Message
òò 
=
òò 
$str
òò =
,
òò= >
Result
ôô 
=
ôô  
studentInfoDtoList
ôô /
,
ôô/ 0
	IsSuccess
öö 
=
öö 
true
öö  $
,
öö$ %

StatusCode
õõ 
=
õõ  
$num
õõ! $
}
úú 
;
úú 
}
ùù 
catch
ûû 
(
ûû 
	Exception
ûû 
e
ûû 
)
ûû 
{
üü 
return
†† 
new
†† 
ResponseDTO
†† &
(
††& '
)
††' (
{
°° 
Message
¢¢ 
=
¢¢ 
e
¢¢ 
.
¢¢  
Message
¢¢  '
,
¢¢' (
Result
££ 
=
££ 
null
££ !
,
££! "
	IsSuccess
§§ 
=
§§ 
false
§§  %
,
§§% &

StatusCode
•• 
=
••  
$num
••! $
}
¶¶ 
;
¶¶ 
}
ßß 
}
®® 	
public
´´ 
async
´´ 
Task
´´ 
<
´´ 
ResponseDTO
´´ %
>
´´% &
GetById
´´' .
(
´´. /
Guid
´´/ 3
id
´´4 6
)
´´6 7
{
¨¨ 	
{
≠≠ 
try
ÆÆ 
{
ØØ 
var
∞∞ 
student
∞∞ 
=
∞∞  !
await
∞∞" '
_unitOfWork
∞∞( 3
.
∞∞3 4
StudentRepository
∞∞4 E
.
∞∞E F
GetById
∞∞F M
(
∞∞M N
id
∞∞N P
)
∞∞P Q
;
∞∞Q R
if
±± 
(
±± 
student
±± 
is
±±  "
null
±±# '
)
±±' (
{
≤≤ 
return
≥≥ 
new
≥≥ "
ResponseDTO
≥≥# .
(
≥≥. /
)
≥≥/ 0
{
¥¥ 
Message
µµ #
=
µµ$ %
$str
µµ& @
,
µµ@ A
	IsSuccess
∂∂ %
=
∂∂& '
false
∂∂( -
,
∂∂- .

StatusCode
∑∑ &
=
∑∑' (
$num
∑∑) ,
,
∑∑, -
Result
∏∏ "
=
∏∏# $
null
∏∏% )
}
ππ 
;
ππ 
}
∫∫  
StudentFullInfoDTO
ºº & 
studentFullInfoDto
ºº' 9
=
ºº: ;
new
ºº< ? 
StudentFullInfoDTO
ºº@ R
(
ººR S
)
ººS T
{
ΩΩ 
	StudentId
ææ !
=
ææ" #
student
ææ$ +
.
ææ+ ,
	StudentId
ææ, 5
,
ææ5 6
UserId
øø 
=
øø  
student
øø! (
.
øø( )
UserId
øø) /
,
øø/ 0
	AvatarUrl
¿¿ !
=
¿¿" #
student
¿¿$ +
.
¿¿+ ,
ApplicationUser
¿¿, ;
.
¿¿; <
	AvatarUrl
¿¿< E
,
¿¿E F
FullName
¡¡  
=
¡¡! "
student
¡¡# *
.
¡¡* +
ApplicationUser
¡¡+ :
.
¡¡: ;
FullName
¡¡; C
,
¡¡C D

University
¬¬ "
=
¬¬# $
student
¬¬% ,
.
¬¬, -

University
¬¬- 7
,
¬¬7 8
Email
√√ 
=
√√ 
student
√√  '
.
√√' (
ApplicationUser
√√( 7
.
√√7 8
Email
√√8 =
,
√√= >
Address
ƒƒ 
=
ƒƒ  !
student
ƒƒ" )
.
ƒƒ) *
ApplicationUser
ƒƒ* 9
.
ƒƒ9 :
Address
ƒƒ: A
,
ƒƒA B
	BirthDate
≈≈ !
=
≈≈" #
student
≈≈$ +
.
≈≈+ ,
ApplicationUser
≈≈, ;
.
≈≈; <
	BirthDate
≈≈< E
,
≈≈E F
Country
∆∆ 
=
∆∆  !
student
∆∆" )
.
∆∆) *
ApplicationUser
∆∆* 9
.
∆∆9 :
Country
∆∆: A
,
∆∆A B
Gender
«« 
=
««  
student
««! (
.
««( )
ApplicationUser
««) 8
.
««8 9
Gender
««9 ?
,
««? @
PhoneNumber
»» #
=
»»$ %
student
»»& -
.
»»- .
ApplicationUser
»». =
.
»»= >
PhoneNumber
»»> I
,
»»I J
}
…… 
;
…… 
return
ÀÀ 
new
ÀÀ 
ResponseDTO
ÀÀ *
(
ÀÀ* +
)
ÀÀ+ ,
{
ÃÃ 
Message
ÕÕ 
=
ÕÕ  !
$str
ÕÕ" @
,
ÕÕ@ A
	IsSuccess
ŒŒ !
=
ŒŒ" #
false
ŒŒ$ )
,
ŒŒ) *

StatusCode
œœ "
=
œœ# $
$num
œœ% (
,
œœ( )
Result
–– 
=
––   
studentFullInfoDto
––! 3
}
—— 
;
—— 
}
““ 
catch
”” 
(
”” 
	Exception
””  
e
””! "
)
””" #
{
‘‘ 
return
’’ 
new
’’ 
ResponseDTO
’’ *
(
’’* +
)
’’+ ,
{
÷÷ 
Message
◊◊ 
=
◊◊  !
e
◊◊" #
.
◊◊# $
Message
◊◊$ +
,
◊◊+ ,
	IsSuccess
ÿÿ !
=
ÿÿ" #
false
ÿÿ$ )
,
ÿÿ) *

StatusCode
ŸŸ "
=
ŸŸ# $
$num
ŸŸ% (
,
ŸŸ( )
Result
⁄⁄ 
=
⁄⁄  
null
⁄⁄! %
}
€€ 
;
€€ 
}
‹‹ 
}
›› 
}
ﬁﬁ 	
public
·· 
async
·· 
Task
·· 
<
·· 
ResponseDTO
·· %
>
··% &

UpdateById
··' 1
(
··1 2
UpdateStudentDTO
··2 B
updateStudentDTO
··C S
)
··S T
{
‚‚ 	
try
„„ 
{
‰‰ 
var
ÂÂ 
studentToUpdate
ÂÂ #
=
ÂÂ$ %
await
ÊÊ 
_unitOfWork
ÊÊ %
.
ÊÊ% &
StudentRepository
ÊÊ& 7
.
ÊÊ7 8
GetById
ÊÊ8 ?
(
ÊÊ? @
updateStudentDTO
ÊÊ@ P
.
ÊÊP Q
	StudentId
ÊÊQ Z
)
ÊÊZ [
;
ÊÊ[ \
if
ËË 
(
ËË 
studentToUpdate
ËË #
==
ËË$ &
null
ËË' +
)
ËË+ ,
{
ÈÈ 
return
ÍÍ 
new
ÍÍ 
ResponseDTO
ÍÍ *
{
ÎÎ 
Message
ÏÏ 
=
ÏÏ  !
$str
ÏÏ" 5
,
ÏÏ5 6
Result
ÌÌ 
=
ÌÌ  
null
ÌÌ! %
,
ÌÌ% &
	IsSuccess
ÓÓ !
=
ÓÓ" #
false
ÓÓ$ )
,
ÓÓ) *

StatusCode
ÔÔ "
=
ÔÔ# $
$num
ÔÔ% (
}
 
;
 
}
ÒÒ 
studentToUpdate
ÛÛ 
.
ÛÛ  
ApplicationUser
ÛÛ  /
.
ÛÛ/ 0
FullName
ÛÛ0 8
=
ÛÛ9 :
updateStudentDTO
ÛÛ; K
?
ÛÛK L
.
ÛÛL M
FullName
ÛÛM U
;
ÛÛU V
studentToUpdate
ÙÙ 
.
ÙÙ  

University
ÙÙ  *
=
ÙÙ+ ,
updateStudentDTO
ÙÙ- =
.
ÙÙ= >

University
ÙÙ> H
;
ÙÙH I
studentToUpdate
ıı 
.
ıı  
ApplicationUser
ıı  /
.
ıı/ 0
Address
ıı0 7
=
ıı8 9
updateStudentDTO
ıı: J
?
ııJ K
.
ııK L
Address
ııL S
;
ııS T
studentToUpdate
ˆˆ 
.
ˆˆ  
ApplicationUser
ˆˆ  /
.
ˆˆ/ 0
	BirthDate
ˆˆ0 9
=
ˆˆ: ;
updateStudentDTO
ˆˆ< L
?
ˆˆL M
.
ˆˆM N
	BirthDate
ˆˆN W
;
ˆˆW X
studentToUpdate
˜˜ 
.
˜˜  
ApplicationUser
˜˜  /
.
˜˜/ 0
Gender
˜˜0 6
=
˜˜7 8
updateStudentDTO
˜˜9 I
?
˜˜I J
.
˜˜J K
Gender
˜˜K Q
;
˜˜Q R
studentToUpdate
¯¯ 
.
¯¯  
ApplicationUser
¯¯  /
.
¯¯/ 0
Country
¯¯0 7
=
¯¯8 9
updateStudentDTO
¯¯: J
?
¯¯J K
.
¯¯K L
Country
¯¯L S
;
¯¯S T
studentToUpdate
˘˘ 
.
˘˘  
ApplicationUser
˘˘  /
.
˘˘/ 0

UpdateTime
˘˘0 :
=
˘˘; <
DateTime
˘˘= E
.
˘˘E F
Now
˘˘F I
;
˘˘I J
_unitOfWork
¸¸ 
.
¸¸ 
StudentRepository
¸¸ -
.
¸¸- .
Update
¸¸. 4
(
¸¸4 5
studentToUpdate
¸¸5 D
)
¸¸D E
;
¸¸E F
await
˝˝ 
_unitOfWork
˝˝ !
.
˝˝! "
	SaveAsync
˝˝" +
(
˝˝+ ,
)
˝˝, -
;
˝˝- .
return
ˇˇ 
new
ˇˇ 
ResponseDTO
ˇˇ &
{
ÄÄ 
Message
ÅÅ 
=
ÅÅ 
$str
ÅÅ <
,
ÅÅ< =
Result
ÇÇ 
=
ÇÇ 
null
ÇÇ !
,
ÇÇ! "
	IsSuccess
ÉÉ 
=
ÉÉ 
true
ÉÉ  $
,
ÉÉ$ %

StatusCode
ÑÑ 
=
ÑÑ  
$num
ÑÑ! $
}
ÖÖ 
;
ÖÖ 
}
ÜÜ 
catch
áá 
(
áá 
	Exception
áá 
e
áá 
)
áá 
{
àà 
return
ââ 
new
ââ 
ResponseDTO
ââ &
{
ää 
Message
ãã 
=
ãã 
e
ãã 
.
ãã  
Message
ãã  '
,
ãã' (
Result
åå 
=
åå 
null
åå !
,
åå! "
	IsSuccess
çç 
=
çç 
false
çç  %
,
çç% &

StatusCode
éé 
=
éé  
$num
éé! $
}
èè 
;
èè 
}
êê 
}
ëë 	
public
îî 
async
îî 
Task
îî 
<
îî 
ResponseDTO
îî %
>
îî% &
ActivateStudent
îî' 6
(
îî6 7
ClaimsPrincipal
îî7 F
User
îîG K
,
îîK L
Guid
îîM Q
	studentId
îîR [
)
îî[ \
{
ïï 	
try
ññ 
{
óó 
var
òò 
userId
òò 
=
òò 
User
òò !
.
òò! "
Claims
òò" (
.
òò( )
FirstOrDefault
òò) 7
(
òò7 8
x
òò8 9
=>
òò: <
x
òò= >
.
òò> ?
Type
òò? C
==
òòD F

ClaimTypes
òòG Q
.
òòQ R
NameIdentifier
òòR `
)
òò` a
?
òòa b
.
òòb c
Value
òòc h
;
òòh i
var
ôô 
student
ôô 
=
ôô 
await
ôô #
_unitOfWork
ôô$ /
.
ôô/ 0
StudentRepository
ôô0 A
.
ôôA B
GetById
ôôB I
(
ôôI J
	studentId
ôôJ S
)
ôôS T
;
ôôT U
if
öö 
(
öö 
student
öö 
is
öö 
null
öö #
)
öö# $
{
õõ 
return
úú 
new
úú 
ResponseDTO
úú *
(
úú* +
)
úú+ ,
{
ùù 
Message
ûû 
=
ûû  !
$str
ûû" 9
,
ûû9 :
	IsSuccess
üü !
=
üü" #
false
üü$ )
,
üü) *

StatusCode
†† "
=
††# $
$num
††% (
,
††( )
Result
°° 
=
°°  
null
°°! %
}
¢¢ 
;
¢¢ 
}
££ 
student
•• 
.
•• 
ApplicationUser
•• '
.
••' (
LockoutEnabled
••( 6
=
••7 8
true
••9 =
;
••= >
student
¶¶ 
.
¶¶ 
ApplicationUser
¶¶ '
.
¶¶' (

LockoutEnd
¶¶( 2
=
¶¶3 4
DateTime
¶¶5 =
.
¶¶= >
UtcNow
¶¶> D
;
¶¶D E
await
ßß 
_unitOfWork
ßß !
.
ßß! "
	SaveAsync
ßß" +
(
ßß+ ,
)
ßß, -
;
ßß- .
return
©© 
new
©© 
ResponseDTO
©© &
(
©©& '
)
©©' (
{
™™ 
Message
´´ 
=
´´ 
$str
´´ ;
,
´´; <
Result
¨¨ 
=
¨¨ 
null
¨¨ !
,
¨¨! "
	IsSuccess
≠≠ 
=
≠≠ 
true
≠≠  $
,
≠≠$ %

StatusCode
ÆÆ 
=
ÆÆ  
$num
ÆÆ! $
}
ØØ 
;
ØØ 
}
∞∞ 
catch
±± 
(
±± 
	Exception
±± 
e
±± 
)
±± 
{
≤≤ 
return
≥≥ 
new
≥≥ 
ResponseDTO
≥≥ &
(
≥≥& '
)
≥≥' (
{
¥¥ 
Message
µµ 
=
µµ 
e
µµ 
.
µµ  
Message
µµ  '
,
µµ' (
	IsSuccess
∂∂ 
=
∂∂ 
true
∂∂  $
,
∂∂$ %

StatusCode
∑∑ 
=
∑∑  
$num
∑∑! $
,
∑∑$ %
Result
∏∏ 
=
∏∏ 
null
∏∏ !
}
ππ 
;
ππ 
}
∫∫ 
}
ªª 	
public
ææ 
async
ææ 
Task
ææ 
<
ææ 
ResponseDTO
ææ %
>
ææ% &
DeactivateStudent
ææ' 8
(
ææ8 9
ClaimsPrincipal
ææ9 H
User
ææI M
,
ææM N
Guid
ææO S
	studentId
ææT ]
)
ææ] ^
{
øø 	
try
¿¿ 
{
¡¡ 
var
¬¬ 
userId
¬¬ 
=
¬¬ 
User
¬¬ !
.
¬¬! "
Claims
¬¬" (
.
¬¬( )
FirstOrDefault
¬¬) 7
(
¬¬7 8
x
¬¬8 9
=>
¬¬: <
x
¬¬= >
.
¬¬> ?
Type
¬¬? C
==
¬¬D F

ClaimTypes
¬¬G Q
.
¬¬Q R
NameIdentifier
¬¬R `
)
¬¬` a
?
¬¬a b
.
¬¬b c
Value
¬¬c h
;
¬¬h i
var
ƒƒ 
student
ƒƒ 
=
ƒƒ 
await
ƒƒ #
_unitOfWork
ƒƒ$ /
.
ƒƒ/ 0
StudentRepository
ƒƒ0 A
.
ƒƒA B
GetById
ƒƒB I
(
ƒƒI J
	studentId
ƒƒJ S
)
ƒƒS T
;
ƒƒT U
if
≈≈ 
(
≈≈ 
student
≈≈ 
is
≈≈ 
null
≈≈ #
)
≈≈# $
{
∆∆ 
return
«« 
new
«« 
ResponseDTO
«« *
(
««* +
)
««+ ,
{
»» 
Message
…… 
=
……  !
$str
……" 9
,
……9 :
	IsSuccess
   !
=
  " #
false
  $ )
,
  ) *

StatusCode
ÀÀ "
=
ÀÀ# $
$num
ÀÀ% (
,
ÀÀ( )
Result
ÃÃ 
=
ÃÃ  
null
ÃÃ! %
}
ÕÕ 
;
ÕÕ 
}
ŒŒ 
student
–– 
.
–– 
ApplicationUser
–– '
.
––' (
LockoutEnabled
––( 6
=
––7 8
false
––9 >
;
––> ?
await
—— 
_unitOfWork
—— !
.
——! "
	SaveAsync
——" +
(
——+ ,
)
——, -
;
——- .
return
”” 
new
”” 
ResponseDTO
”” &
(
””& '
)
””' (
{
‘‘ 
Message
’’ 
=
’’ 
$str
’’ >
,
’’> ?
Result
÷÷ 
=
÷÷ 
null
÷÷ !
,
÷÷! "
	IsSuccess
◊◊ 
=
◊◊ 
true
◊◊  $
,
◊◊$ %

StatusCode
ÿÿ 
=
ÿÿ  
$num
ÿÿ! $
}
ŸŸ 
;
ŸŸ 
}
⁄⁄ 
catch
€€ 
(
€€ 
	Exception
€€ 
e
€€ 
)
€€ 
{
‹‹ 
return
›› 
new
›› 
ResponseDTO
›› &
(
››& '
)
››' (
{
ﬁﬁ 
Message
ﬂﬂ 
=
ﬂﬂ 
e
ﬂﬂ 
.
ﬂﬂ  
Message
ﬂﬂ  '
,
ﬂﬂ' (
	IsSuccess
‡‡ 
=
‡‡ 
true
‡‡  $
,
‡‡$ %

StatusCode
·· 
=
··  
$num
··! $
,
··$ %
Result
‚‚ 
=
‚‚ 
null
‚‚ !
}
„„ 
;
„„ 
}
‰‰ 
}
ÂÂ 	
public
ËË 
async
ËË 
Task
ËË 
<
ËË 
ResponseDTO
ËË %
>
ËË% &$
GetStudentTotalCourses
ËË' =
(
ËË= >
Guid
ËË> B
	studentId
ËËC L
)
ËËL M
{
ÈÈ 	
try
ÍÍ 
{
ÎÎ 
var
ÏÏ 
id
ÏÏ 
=
ÏÏ 
await
ÏÏ 
_unitOfWork
ÏÏ *
.
ÏÏ* +
StudentRepository
ÏÏ+ <
.
ÏÏ< =
GetAsync
ÏÏ= E
(
ÏÏE F
i
ÏÏF G
=>
ÏÏH J
i
ÏÏK L
.
ÏÏL M
	StudentId
ÏÏM V
==
ÏÏW Y
	studentId
ÏÏZ c
)
ÏÏc d
;
ÏÏd e
if
ÓÓ 
(
ÓÓ 
id
ÓÓ 
==
ÓÓ 
null
ÓÓ 
)
ÓÓ 
{
ÔÔ 
return
 
new
 
ResponseDTO
 *
(
* +
)
+ ,
{
ÒÒ 
Message
ÚÚ 
=
ÚÚ  !
$str
ÚÚ" 5
,
ÚÚ5 6
Result
ÛÛ 
=
ÛÛ  
null
ÛÛ! %
,
ÛÛ% &
	IsSuccess
ÙÙ !
=
ÙÙ" #
false
ÙÙ$ )
,
ÙÙ) *

StatusCode
ıı "
=
ıı# $
$num
ıı% (
}
ˆˆ 
;
ˆˆ 
}
˜˜ 
var
˘˘ 
courses
˘˘ 
=
˘˘ 
await
˘˘ #
_unitOfWork
˘˘$ /
.
˘˘/ 0+
StudentCourseStatusRepository
˘˘0 M
.
˘˘M N
GetAllAsync
˘˘N Y
(
˘˘Y Z
c
˘˘Z [
=>
˘˘\ ^
c
˘˘_ `
.
˘˘` a
Id
˘˘a c
==
˘˘d f
id
˘˘g i
.
˘˘i j
	StudentId
˘˘j s
)
˘˘s t
;
˘˘t u
var
˚˚ 
totalCourses
˚˚  
=
˚˚! "
courses
˚˚# *
.
˚˚* +
Count
˚˚+ 0
(
˚˚0 1
)
˚˚1 2
;
˚˚2 3
var
¸¸ 
pending
¸¸ 
=
¸¸ 
courses
¸¸ %
.
¸¸% &
Count
¸¸& +
(
¸¸+ ,
x
¸¸, -
=>
¸¸. 0
x
¸¸1 2
.
¸¸2 3
Status
¸¸3 9
==
¸¸: <
$num
¸¸= >
)
¸¸> ?
;
¸¸? @
var
˝˝ 
enrolled
˝˝ 
=
˝˝ 
courses
˝˝ &
.
˝˝& '
Count
˝˝' ,
(
˝˝, -
x
˝˝- .
=>
˝˝/ 1
x
˝˝2 3
.
˝˝3 4
Status
˝˝4 :
==
˝˝; =
$num
˝˝> ?
)
˝˝? @
;
˝˝@ A
var
˛˛ 
	completed
˛˛ 
=
˛˛ 
courses
˛˛  '
.
˛˛' (
Count
˛˛( -
(
˛˛- .
x
˛˛. /
=>
˛˛0 2
x
˛˛3 4
.
˛˛4 5
Status
˛˛5 ;
==
˛˛< >
$num
˛˛? @
)
˛˛@ A
;
˛˛A B
var
ˇˇ 
canceled
ˇˇ 
=
ˇˇ 
courses
ˇˇ &
.
ˇˇ& '
Count
ˇˇ' ,
(
ˇˇ, -
x
ˇˇ- .
=>
ˇˇ/ 1
x
ˇˇ2 3
.
ˇˇ3 4
Status
ˇˇ4 :
==
ˇˇ; =
$num
ˇˇ> ?
)
ˇˇ? @
;
ˇˇ@ A
return
ÅÅ 
new
ÅÅ 
ResponseDTO
ÅÅ &
(
ÅÅ& '
)
ÅÅ' (
{
ÇÇ 
Message
ÉÉ 
=
ÉÉ 
$str
ÉÉ 6
,
ÉÉ6 7
	IsSuccess
ÑÑ 
=
ÑÑ 
true
ÑÑ  $
,
ÑÑ$ %

StatusCode
ÖÖ 
=
ÖÖ  
$num
ÖÖ! $
,
ÖÖ$ %
Result
ÜÜ 
=
ÜÜ 
new
ÜÜ  "
StudentTotalCountDTO
ÜÜ! 5
(
ÜÜ5 6
)
ÜÜ6 7
{
áá 
Total
àà 
=
àà 
totalCourses
àà  ,
,
àà, -
Pending
ââ 
=
ââ  !
pending
ââ" )
,
ââ) *
Enrolled
ää  
=
ää! "
enrolled
ää# +
,
ää+ ,
	Completed
ãã !
=
ãã" #
	completed
ãã$ -
,
ãã- .
Canceled
åå  
=
åå! "
canceled
åå# +
}
çç 
}
éé 
;
éé 
}
èè 
catch
êê 
(
êê 
	Exception
êê 
e
êê 
)
êê 
{
ëë 
return
íí 
new
íí 
ResponseDTO
íí &
{
ìì 
Message
îî 
=
îî 
e
îî 
.
îî  
Message
îî  '
,
îî' (
Result
ïï 
=
ïï 
null
ïï !
,
ïï! "
	IsSuccess
ññ 
=
ññ 
false
ññ  %
,
ññ% &

StatusCode
óó 
=
óó  
$num
óó! $
}
òò 
;
òò 
}
ôô 
}
öö 	
public
ÓÓ 
async
ÓÓ 
Task
ÓÓ 
<
ÓÓ 
ResponseDTO
ÓÓ %
>
ÓÓ% &)
GetAllCourseStudentEnrolled
ÓÓ' B
(
ÓÓB C
Guid
ÓÓC G
	studentId
ÓÓH Q
)
ÓÓQ R
{
ÔÔ 	
try
 
{
ÒÒ 
var
ÛÛ 
student
ÛÛ 
=
ÛÛ 
await
ÛÛ #
_unitOfWork
ÛÛ$ /
.
ÛÛ/ 0
StudentRepository
ÛÛ0 A
.
ÛÛA B
GetAsync
ÛÛB J
(
ÛÛJ K
i
ÛÛK L
=>
ÛÛM O
i
ÛÛP Q
.
ÛÛQ R
	StudentId
ÛÛR [
==
ÛÛ\ ^
	studentId
ÛÛ_ h
)
ÛÛh i
;
ÛÛi j
if
ÙÙ 
(
ÙÙ 
student
ÙÙ 
==
ÙÙ 
null
ÙÙ #
)
ÙÙ# $
{
ıı 
return
ˆˆ 
new
ˆˆ 
ResponseDTO
ˆˆ *
(
ˆˆ* +
)
ˆˆ+ ,
{
˜˜ 
Message
¯¯ 
=
¯¯  !
$str
¯¯" 5
,
¯¯5 6
Result
˘˘ 
=
˘˘  
null
˘˘! %
,
˘˘% &
	IsSuccess
˙˙ !
=
˙˙" #
false
˙˙$ )
,
˙˙) *

StatusCode
˚˚ "
=
˚˚# $
$num
˚˚% (
}
¸¸ 
;
¸¸ 
}
˝˝ 
var
ÄÄ 
enrolledCourseIds
ÄÄ %
=
ÄÄ& '
(
ÄÄ( )
await
ÄÄ) .
_unitOfWork
ÄÄ/ :
.
ÄÄ: ;%
StudentCourseRepository
ÄÄ; R
.
ÅÅ 
GetAllAsync
ÅÅ $
(
ÅÅ$ %
sc
ÅÅ% '
=>
ÅÅ( *
sc
ÅÅ+ -
.
ÅÅ- .
	StudentId
ÅÅ. 7
==
ÅÅ8 :
	studentId
ÅÅ; D
&&
ÅÅE G
sc
ÅÅH J
.
ÅÅJ K
Status
ÅÅK Q
==
ÅÅR T
StaticStatus
ÅÅU a
.
ÅÅa b
StudentCourse
ÅÅb o
.
ÅÅo p
Enrolled
ÅÅp x
)
ÅÅx y
)
ÅÅy z
.
ÇÇ 
Select
ÇÇ 
(
ÇÇ  
sc
ÇÇ  "
=>
ÇÇ# %
sc
ÇÇ& (
.
ÇÇ( )
CourseId
ÇÇ) 1
)
ÇÇ1 2
.
ÉÉ 
Distinct
ÉÉ !
(
ÉÉ! "
)
ÉÉ" #
.
ÑÑ 
ToList
ÑÑ 
(
ÑÑ  
)
ÑÑ  !
;
ÑÑ! "
if
ÜÜ 
(
ÜÜ 
!
ÜÜ 
enrolledCourseIds
ÜÜ &
.
ÜÜ& '
Any
ÜÜ' *
(
ÜÜ* +
)
ÜÜ+ ,
)
ÜÜ, -
{
áá 
return
àà 
new
àà 
ResponseDTO
àà *
(
àà* +
)
àà+ ,
{
ââ 
Message
ää 
=
ää  !
$str
ää" K
,
ääK L
	IsSuccess
ãã !
=
ãã" #
false
ãã$ )
,
ãã) *

StatusCode
åå "
=
åå# $
$num
åå% (
,
åå( )
Result
çç 
=
çç  
null
çç! %
}
éé 
;
éé 
}
èè 
var
íí 
courseVersions
íí "
=
íí# $
await
íí% *
_unitOfWork
íí+ 6
.
íí6 7%
CourseVersionRepository
íí7 N
.
ìì 
GetAllAsync
ìì $
(
ìì$ %
cv
ìì% '
=>
ìì( *
enrolledCourseIds
ìì+ <
.
ìì< =
Contains
ìì= E
(
ììE F
cv
ììF H
.
ììH I
CourseId
ììI Q
)
ììQ R
,
ììR S
includeProperties
ììT e
:
ììe f
$str
ììg x
)
ììx y
;
ììy z
var
ññ  
courseEnrolledDtos
ññ &
=
ññ' (
new
ññ) ,
List
ññ- 1
<
ññ1 2
CourseEnrolledDTO
ññ2 C
>
ññC D
(
ññD E
)
ññE F
;
ññF G
foreach
òò 
(
òò 
var
òò 
cv
òò 
in
òò  "
courseVersions
òò# 1
)
òò1 2
{
ôô 
var
öö 

instructor
öö "
=
öö# $
await
öö% *
_unitOfWork
öö+ 6
.
öö6 7"
InstructorRepository
öö7 K
.
ööK L
GetAsync
ööL T
(
ööT U
x
ööU V
=>
ööW Y
x
ööZ [
.
öö[ \
InstructorId
öö\ h
==
ööi k
cv
ööl n
.
öön o
InstructorId
ööo {
,
öö{ | 
includePropertiesöö} é
:ööé è
$strööê °
)öö° ¢
;öö¢ £
var
õõ 
instructorName
õõ &
=
õõ' (

instructor
õõ) 3
.
õõ3 4
ApplicationUser
õõ4 C
.
õõC D
FullName
õõD L
;
õõL M 
courseEnrolledDtos
ùù &
.
ùù& '
Add
ùù' *
(
ùù* +
new
ùù+ .
CourseEnrolledDTO
ùù/ @
(
ùù@ A
)
ùùA B
{
ûû 

CourseName
üü "
=
üü# $
cv
üü% '
.
üü' (
Title
üü( -
,
üü- .
CourseImage
†† #
=
††$ %
cv
††& (
.
††( )
CourseImgUrl
††) 5
,
††5 6

CourseRate
°° "
=
°°# $
(
°°% &
float
°°& +
)
°°+ ,
cv
°°, .
.
°°. /
Course
°°/ 5
.
°°5 6
	TotalRate
°°6 ?
,
°°? @
CourseSummary
¢¢ %
=
¢¢& '
cv
¢¢( *
.
¢¢* +
Description
¢¢+ 6
.
¢¢6 7
Length
¢¢7 =
>
¢¢> ?
$num
¢¢@ C
?
¢¢D E
cv
¢¢F H
.
¢¢H I
Description
¢¢I T
.
¢¢T U
	Substring
¢¢U ^
(
¢¢^ _
$num
¢¢_ `
,
¢¢` a
$num
¢¢b e
)
¢¢e f
+
¢¢g h
$str
¢¢i n
:
¢¢o p
cv
¢¢q s
.
¢¢s t
Description
¢¢t 
,¢¢ Ä
Category
££  
=
££! "
cv
££# %
.
££% &
Category
££& .
.
££. /
Name
££/ 3
,
££3 4
InstructorName
§§ &
=
§§' (
instructorName
§§) 7
}
•• 
)
•• 
;
•• 
}
¶¶ 
return
®® 
new
®® 
ResponseDTO
®® &
(
®®& '
)
®®' (
{
©© 
Message
™™ 
=
™™ 
$str
™™ H
,
™™H I
	IsSuccess
´´ 
=
´´ 
true
´´  $
,
´´$ %

StatusCode
¨¨ 
=
¨¨  
$num
¨¨! $
,
¨¨$ %
Result
≠≠ 
=
≠≠  
courseEnrolledDtos
≠≠ /
}
ÆÆ 
;
ÆÆ 
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞ 
e
∞∞ 
)
∞∞ 
{
±± 
return
≤≤ 
new
≤≤ 
ResponseDTO
≤≤ &
(
≤≤& '
)
≤≤' (
{
≥≥ 
Message
¥¥ 
=
¥¥ 
e
¥¥ 
.
¥¥  
Message
¥¥  '
,
¥¥' (
Result
µµ 
=
µµ 
null
µµ !
,
µµ! "
	IsSuccess
∂∂ 
=
∂∂ 
false
∂∂  %
,
∂∂% &

StatusCode
∑∑ 
=
∑∑  
$num
∑∑! $
}
∏∏ 
;
∏∏ 
}
ππ 
}
∫∫ 	
public
ºº 
async
ºº 
Task
ºº 
<
ºº 
ResponseDTO
ºº %
>
ºº% &"
GetAllStudentComment
ºº' ;
(
ΩΩ 	
Guid
ææ 
	studentId
ææ 
,
ææ 
int
ææ 

pageNumber
ææ  *
,
ææ* +
int
ææ, /
pageSize
ææ0 8
)
øø 	
{
¿¿ 	
try
¡¡ 
{
¬¬ 
var
√√ 
comments
√√ 
=
√√ 
_unitOfWork
√√ *
.
√√* +&
StudentCommentRepository
√√+ C
.
√√C D
GetAllAsync
√√D O
(
√√O P
x
ƒƒ 
=>
ƒƒ 
x
ƒƒ 
.
ƒƒ 
	StudentId
ƒƒ $
==
ƒƒ% '
	studentId
ƒƒ( 1
&&
ƒƒ2 4
x
≈≈ 
.
≈≈ 
Status
≈≈ !
!=
≈≈" $
$num
≈≈% &
)
∆∆ 
.
∆∆ 

GetAwaiter
∆∆ 
(
∆∆ 
)
∆∆ 
.
∆∆ 
	GetResult
∆∆ (
(
∆∆( )
)
∆∆) *
.
∆∆* +
ToList
∆∆+ 1
(
∆∆1 2
)
∆∆2 3
;
∆∆3 4
if
«« 
(
«« 
comments
«« 
is
«« 
null
««  $
)
««$ %
{
»» 
return
…… 
new
…… 
ResponseDTO
…… *
(
……* +
)
……+ ,
{
   
Message
ÀÀ 
=
ÀÀ  !
$str
ÀÀ" 8
,
ÀÀ8 9
	IsSuccess
ÃÃ !
=
ÃÃ" #
true
ÃÃ$ (
,
ÃÃ( )

StatusCode
ÕÕ "
=
ÕÕ# $
$num
ÕÕ% (
,
ÕÕ( )
Result
ŒŒ 
=
ŒŒ  
null
ŒŒ! %
}
œœ 
;
œœ 
}
–– 
comments
““ 
=
““ 
comments
““ #
.
““# $
OrderByDescending
““$ 5
(
““5 6
x
““6 7
=>
““8 :
x
““; <
.
““< =
CreatedTime
““= H
)
““H I
.
““I J
ToList
““J P
(
““P Q
)
““Q R
;
““R S
if
’’ 
(
’’ 

pageNumber
’’ 
>
’’  
$num
’’! "
&&
’’# %
pageSize
’’& .
>
’’/ 0
$num
’’1 2
)
’’2 3
{
÷÷ 
var
◊◊ 

skipResult
◊◊ "
=
◊◊# $
(
◊◊% &

pageNumber
◊◊& 0
-
◊◊1 2
$num
◊◊3 4
)
◊◊4 5
*
◊◊6 7
pageSize
◊◊8 @
;
◊◊@ A
comments
ÿÿ 
=
ÿÿ 
comments
ÿÿ '
.
ÿÿ' (
Skip
ÿÿ( ,
(
ÿÿ, -

skipResult
ÿÿ- 7
)
ÿÿ7 8
.
ÿÿ8 9
Take
ÿÿ9 =
(
ÿÿ= >
pageSize
ÿÿ> F
)
ÿÿF G
.
ÿÿG H
ToList
ÿÿH N
(
ÿÿN O
)
ÿÿO P
;
ÿÿP Q
}
ŸŸ 
var
€€ 
commentsDto
€€ 
=
€€  !
_mapper
€€" )
.
€€) *
Map
€€* -
<
€€- .
List
€€. 2
<
€€2 3
GetAllCommentsDTO
€€3 D
>
€€D E
>
€€E F
(
€€F G
comments
€€G O
)
€€O P
;
€€P Q
return
›› 
new
›› 
ResponseDTO
›› &
(
››& '
)
››' (
{
ﬁﬁ 
Message
ﬂﬂ 
=
ﬂﬂ 
$str
ﬂﬂ @
,
ﬂﬂ@ A
	IsSuccess
‡‡ 
=
‡‡ 
true
‡‡  $
,
‡‡$ %

StatusCode
·· 
=
··  
$num
··! $
,
··$ %
Result
‚‚ 
=
‚‚ 
commentsDto
‚‚ (
}
„„ 
;
„„ 
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ 
e
ÂÂ 
)
ÂÂ 
{
ÊÊ 
return
ÁÁ 
new
ÁÁ 
ResponseDTO
ÁÁ &
(
ÁÁ& '
)
ÁÁ' (
{
ËË 
Message
ÈÈ 
=
ÈÈ 
e
ÈÈ 
.
ÈÈ  
Message
ÈÈ  '
,
ÈÈ' (
Result
ÍÍ 
=
ÍÍ 
null
ÍÍ !
,
ÍÍ! "
	IsSuccess
ÎÎ 
=
ÎÎ 
false
ÎÎ  %
,
ÎÎ% &

StatusCode
ÏÏ 
=
ÏÏ  
$num
ÏÏ! $
}
ÌÌ 
;
ÌÌ 
}
ÓÓ 
}
ÔÔ 	
public
ÚÚ 
async
ÚÚ 
Task
ÚÚ 
<
ÚÚ 
ResponseDTO
ÚÚ %
>
ÚÚ% &"
CreateStudentComment
ÚÚ' ;
(
ÚÚ; <
ClaimsPrincipal
ÚÚ< K
User
ÚÚL P
,
ÚÚP Q%
CreateStudentCommentDTO
ÛÛ #%
createStudentCommentDTO
ÛÛ$ ;
)
ÛÛ; <
{
ÙÙ 	
try
ıı 
{
ˆˆ 
var
˜˜ 
	studentId
˜˜ 
=
˜˜ 
await
¯¯ 
_unitOfWork
¯¯ %
.
¯¯% &
StudentRepository
¯¯& 7
.
¯¯7 8
GetAsync
¯¯8 @
(
¯¯@ A
i
¯¯A B
=>
¯¯C E
i
˘˘ 
.
˘˘ 
	StudentId
˘˘ #
==
˘˘$ &%
createStudentCommentDTO
˘˘' >
.
˘˘> ?
	StudentId
˘˘? H
)
˘˘H I
;
˘˘I J
if
˙˙ 
(
˙˙ 
	studentId
˙˙ 
is
˙˙  
null
˙˙! %
)
˙˙% &
{
˚˚ 
return
¸¸ 
new
¸¸ 
ResponseDTO
¸¸ *
(
¸¸* +
)
¸¸+ ,
{
˝˝ 
Message
˛˛ 
=
˛˛  !
$str
˛˛" 5
,
˛˛5 6
	IsSuccess
ˇˇ !
=
ˇˇ" #
false
ˇˇ$ )
,
ˇˇ) *

StatusCode
ÄÄ "
=
ÄÄ# $
$num
ÄÄ% (
,
ÄÄ( )
Result
ÅÅ 
=
ÅÅ  
null
ÅÅ! %
}
ÇÇ 
;
ÇÇ 
}
ÉÉ 
var
ÖÖ 
userId
ÖÖ 
=
ÖÖ 
User
ÖÖ !
.
ÖÖ! "
Claims
ÖÖ" (
.
ÖÖ( )
FirstOrDefault
ÖÖ) 7
(
ÖÖ7 8
x
ÖÖ8 9
=>
ÖÖ: <
x
ÖÖ= >
.
ÖÖ> ?
Type
ÖÖ? C
==
ÖÖD F

ClaimTypes
ÖÖG Q
.
ÖÖQ R
NameIdentifier
ÖÖR `
)
ÖÖ` a
?
ÖÖa b
.
ÖÖb c
Value
ÖÖc h
;
ÖÖh i
var
ÜÜ 
admin
ÜÜ 
=
ÜÜ 
await
ÜÜ !
_unitOfWork
ÜÜ" -
.
ÜÜ- .#
UserManagerRepository
ÜÜ. C
.
ÜÜC D
FindByIdAsync
ÜÜD Q
(
ÜÜQ R
userId
ÜÜR X
)
ÜÜX Y
;
ÜÜY Z
StudentComment
àà 
studentComment
àà -
=
àà. /
new
àà0 3
StudentComment
àà4 B
(
ààB C
)
ààC D
{
ââ 
Comment
ää 
=
ää %
createStudentCommentDTO
ää 5
.
ää5 6
Comment
ää6 =
,
ää= >
	StudentId
ãã 
=
ãã %
createStudentCommentDTO
ãã  7
.
ãã7 8
	StudentId
ãã8 A
,
ããA B
UpdatedTime
åå 
=
åå  !
null
åå" &
,
åå& '
CreatedTime
çç 
=
çç  !
DateTime
çç" *
.
çç* +
Now
çç+ .
,
çç. /
	CreatedBy
éé 
=
éé 
admin
éé  %
.
éé% &
Email
éé& +
,
éé+ ,
	UpdatedBy
èè 
=
èè 
$str
èè  "
,
èè" #
Status
êê 
=
êê 
$num
êê 
}
ëë 
;
ëë 
await
ìì 
_unitOfWork
ìì !
.
ìì! "&
StudentCommentRepository
ìì" :
.
ìì: ;
AddAsync
ìì; C
(
ììC D
studentComment
ììD R
)
ììR S
;
ììS T
await
îî 
_unitOfWork
îî !
.
îî! "
	SaveAsync
îî" +
(
îî+ ,
)
îî, -
;
îî- .
return
ññ 
new
ññ 
ResponseDTO
ññ &
(
ññ& '
)
ññ' (
{
óó 
Message
òò 
=
òò 
$str
òò C
,
òòC D
	IsSuccess
ôô 
=
ôô 
true
ôô  $
,
ôô$ %

StatusCode
öö 
=
öö  
$num
öö! $
,
öö$ %
Result
õõ 
=
õõ 
null
õõ !
}
úú 
;
úú 
}
ùù 
catch
ûû 
(
ûû 
	Exception
ûû 
e
ûû 
)
ûû 
{
üü 
return
†† 
new
†† 
ResponseDTO
†† &
(
††& '
)
††' (
{
°° 
Message
¢¢ 
=
¢¢ 
e
¢¢ 
.
¢¢  
Message
¢¢  '
,
¢¢' (
	IsSuccess
££ 
=
££ 
false
££  %
,
££% &

StatusCode
§§ 
=
§§  
$num
§§! $
,
§§$ %
Result
•• 
=
•• 
null
•• !
}
¶¶ 
;
¶¶ 
}
ßß 
}
®® 	
public
´´ 
async
´´ 
Task
´´ 
<
´´ 
ResponseDTO
´´ %
>
´´% &"
UpdateStudentComment
´´' ;
(
´´; <
ClaimsPrincipal
´´< K
User
´´L P
,
´´P Q%
UpdateStudentCommentDTO
¨¨ #%
updateStudentCommentDTO
¨¨$ ;
)
¨¨; <
{
≠≠ 	
try
ÆÆ 
{
ØØ 
var
∞∞ 
	studentId
∞∞ 
=
∞∞ 
await
±± 
_unitOfWork
±± %
.
±±% &&
StudentCommentRepository
±±& >
.
±±> ?
GetAsync
±±? G
(
±±G H
i
±±H I
=>
±±J L
i
±±M N
.
±±N O
Id
±±O Q
==
±±R T%
updateStudentCommentDTO
±±U l
.
±±l m
Id
±±m o
)
±±o p
;
±±p q
if
≤≤ 
(
≤≤ 
	studentId
≤≤ 
==
≤≤  
null
≤≤! %
)
≤≤% &
{
≥≥ 
return
¥¥ 
new
¥¥ 
ResponseDTO
¥¥ *
(
¥¥* +
)
¥¥+ ,
{
µµ 
Message
∂∂ 
=
∂∂  !
$str
∂∂" 5
,
∂∂5 6
Result
∑∑ 
=
∑∑  
null
∑∑! %
,
∑∑% &
	IsSuccess
∏∏ !
=
∏∏" #
false
∏∏$ )
,
∏∏) *

StatusCode
ππ "
=
ππ# $
$num
ππ% (
}
∫∫ 
;
∫∫ 
}
ªª 
var
ΩΩ 
userId
ΩΩ 
=
ΩΩ 
User
ΩΩ !
.
ΩΩ! "
Claims
ΩΩ" (
.
ΩΩ( )
FirstOrDefault
ΩΩ) 7
(
ΩΩ7 8
x
ΩΩ8 9
=>
ΩΩ: <
x
ΩΩ= >
.
ΩΩ> ?
Type
ΩΩ? C
==
ΩΩD F

ClaimTypes
ΩΩG Q
.
ΩΩQ R
NameIdentifier
ΩΩR `
)
ΩΩ` a
?
ΩΩa b
.
ΩΩb c
Value
ΩΩc h
;
ΩΩh i
var
ææ 
admin
ææ 
=
ææ 
await
ææ !
_unitOfWork
ææ" -
.
ææ- .#
UserManagerRepository
ææ. C
.
ææC D
FindByIdAsync
ææD Q
(
ææQ R
userId
ææR X
)
ææX Y
;
ææY Z
	studentId
¡¡ 
.
¡¡ 
UpdatedTime
¡¡ %
=
¡¡& '
DateTime
¡¡( 0
.
¡¡0 1
Now
¡¡1 4
;
¡¡4 5
	studentId
¬¬ 
.
¬¬ 
	UpdatedBy
¬¬ #
=
¬¬$ %
admin
¬¬& +
.
¬¬+ ,
Email
¬¬, 1
;
¬¬1 2
	studentId
√√ 
.
√√ 
Comment
√√ !
=
√√" #%
updateStudentCommentDTO
√√$ ;
.
√√; <
Comment
√√< C
;
√√C D
	studentId
ƒƒ 
.
ƒƒ 
Status
ƒƒ  
=
ƒƒ! "
$num
ƒƒ# $
;
ƒƒ$ %
_unitOfWork
∆∆ 
.
∆∆ &
StudentCommentRepository
∆∆ 4
.
∆∆4 5
Update
∆∆5 ;
(
∆∆; <
	studentId
∆∆< E
)
∆∆E F
;
∆∆F G
await
…… 
_unitOfWork
…… !
.
……! "
	SaveAsync
……" +
(
……+ ,
)
……, -
;
……- .
return
ÀÀ 
new
ÀÀ 
ResponseDTO
ÀÀ &
(
ÀÀ& '
)
ÀÀ' (
{
ÃÃ 
Message
ÕÕ 
=
ÕÕ 
$str
ÕÕ <
,
ÕÕ< =
Result
ŒŒ 
=
ŒŒ 
null
ŒŒ !
,
ŒŒ! "
	IsSuccess
œœ 
=
œœ 
true
œœ  $
,
œœ$ %

StatusCode
–– 
=
––  
$num
––! $
,
––$ %
}
—— 
;
—— 
}
““ 
catch
”” 
(
”” 
	Exception
”” 
e
”” 
)
”” 
{
‘‘ 
return
’’ 
new
’’ 
ResponseDTO
’’ &
{
÷÷ 
Message
◊◊ 
=
◊◊ 
e
◊◊ 
.
◊◊  
Message
◊◊  '
,
◊◊' (
Result
ÿÿ 
=
ÿÿ 
null
ÿÿ !
,
ÿÿ! "
	IsSuccess
ŸŸ 
=
ŸŸ 
false
ŸŸ  %
,
ŸŸ% &

StatusCode
⁄⁄ 
=
⁄⁄  
$num
⁄⁄! $
}
€€ 
;
€€ 
}
‹‹ 
}
›› 	
public
‡‡ 
async
‡‡ 
Task
‡‡ 
<
‡‡ 
ResponseDTO
‡‡ %
>
‡‡% &"
DeleteStudentComment
‡‡' ;
(
‡‡; <
Guid
‡‡< @
	commentId
‡‡A J
)
‡‡J K
{
·· 	
try
‚‚ 
{
„„ 
var
‰‰ 
comment
‰‰ 
=
‰‰ 
await
ÂÂ 
_unitOfWork
ÂÂ %
.
ÂÂ% &&
StudentCommentRepository
ÂÂ& >
.
ÂÂ> ?
GetAsync
ÂÂ? G
(
ÂÂG H
x
ÂÂH I
=>
ÂÂJ L
x
ÂÂM N
.
ÂÂN O
Id
ÂÂO Q
==
ÂÂR T
	commentId
ÂÂU ^
)
ÂÂ^ _
;
ÂÂ_ `
if
ÊÊ 
(
ÊÊ 
comment
ÊÊ 
==
ÊÊ 
null
ÊÊ #
)
ÊÊ# $
{
ÁÁ 
return
ËË 
new
ËË 
ResponseDTO
ËË *
(
ËË* +
)
ËË+ ,
{
ÈÈ 
Message
ÍÍ 
=
ÍÍ  !
$str
ÍÍ" 9
,
ÍÍ9 :
	IsSuccess
ÎÎ !
=
ÎÎ" #
false
ÎÎ$ )
,
ÎÎ) *

StatusCode
ÏÏ "
=
ÏÏ# $
$num
ÏÏ% (
,
ÏÏ( )
Result
ÌÌ 
=
ÌÌ  
null
ÌÌ! %
,
ÌÌ% &
}
ÓÓ 
;
ÓÓ 
}
ÔÔ 
comment
ÚÚ 
.
ÚÚ 
Status
ÚÚ 
=
ÚÚ  
$num
ÚÚ! "
;
ÚÚ" #
_unitOfWork
ÙÙ 
.
ÙÙ &
StudentCommentRepository
ÙÙ 4
.
ÙÙ4 5
Update
ÙÙ5 ;
(
ÙÙ; <
comment
ÙÙ< C
)
ÙÙC D
;
ÙÙD E
await
ıı 
_unitOfWork
ıı !
.
ıı! "
	SaveAsync
ıı" +
(
ıı+ ,
)
ıı, -
;
ıı- .
return
˜˜ 
new
˜˜ 
ResponseDTO
˜˜ &
(
˜˜& '
)
˜˜' (
{
¯¯ 
Message
˘˘ 
=
˘˘ 
$str
˘˘ <
,
˘˘< =
	IsSuccess
˙˙ 
=
˙˙ 
true
˙˙  $
,
˙˙$ %

StatusCode
˚˚ 
=
˚˚  
$num
˚˚! $
,
˚˚$ %
Result
¸¸ 
=
¸¸ 
comment
¸¸ $
.
¸¸$ %
Id
¸¸% '
,
¸¸' (
}
˝˝ 
;
˝˝ 
}
˛˛ 
catch
ˇˇ 
(
ˇˇ 
	Exception
ˇˇ 
e
ˇˇ 
)
ˇˇ 
{
ÄÄ 
return
ÅÅ 
new
ÅÅ 
ResponseDTO
ÅÅ &
{
ÇÇ 
Message
ÉÉ 
=
ÉÉ 
e
ÉÉ 
.
ÉÉ  
Message
ÉÉ  '
,
ÉÉ' (
Result
ÑÑ 
=
ÑÑ 
null
ÑÑ !
,
ÑÑ! "
	IsSuccess
ÖÖ 
=
ÖÖ 
false
ÖÖ  %
,
ÖÖ% &

StatusCode
ÜÜ 
=
ÜÜ  
$num
ÜÜ! $
}
áá 
;
áá 
}
àà 
}
ââ 	
public
åå 
async
åå 
Task
åå 
<
åå 
ResponseDTO
åå %
>
åå% &
ExportStudents
åå' 5
(
åå5 6
string
åå6 <
userId
åå= C
,
ååC D
int
ååE H
month
ååI N
,
ååN O
int
ååP S
year
ååT X
)
ååX Y
{
çç 	
var
èè 
students
èè 
=
èè 
_unitOfWork
èè &
.
èè& '
StudentRepository
èè' 8
.
èè8 9
GetAllAsync
èè9 D
(
èèD E
includeProperties
èèE V
:
èèV W
$str
èèX i
)
èèi j
.
êê 

GetAwaiter
êê 
(
êê 
)
êê 
.
êê 
	GetResult
êê '
(
êê' (
)
êê( )
.
êê) *
ToList
êê* 0
(
êê0 1
)
êê1 2
;
êê2 3
students
ìì 
=
ìì 
students
ìì 
.
ìì  
Where
ìì  %
(
ìì% &
x
ìì& '
=>
ìì( *
x
îî 
.
îî 
ApplicationUser
îî %
.
îî% &

CreateTime
îî& 0
.
îî0 1
HasValue
îî1 9
&&
îî: <
x
îî= >
.
îî> ?
ApplicationUser
îî? N
.
îîN O

CreateTime
îîO Y
.
îîY Z
Value
îîZ _
.
îî_ `
Month
îî` e
==
îîf h
month
îîi n
&&
îîo q
x
ïï 
.
ïï 
ApplicationUser
ïï %
.
ïï% &

CreateTime
ïï& 0
.
ïï0 1
Value
ïï1 6
.
ïï6 7
Year
ïï7 ;
==
ïï< >
year
ïï? C
)
ïïC D
.
ññ 
ToList
ññ 
(
ññ 
)
ññ 
;
ññ 
var
ôô 
studentInfoDtos
ôô 
=
ôô  !
_mapper
ôô" )
.
ôô) *
Map
ôô* -
<
ôô- .
List
ôô. 2
<
ôô2 3 
StudentFullInfoDTO
ôô3 E
>
ôôE F
>
ôôF G
(
ôôG H
students
ôôH P
)
ôôP Q
;
ôôQ R
var
úú 
fileStudent
úú 
=
úú 
await
úú #
_closedXmlService
úú$ 5
.
úú5 6 
ExportStudentExcel
úú6 H
(
úúH I
studentInfoDtos
úúI X
)
úúX Y
;
úúY Z
await
üü 
_notificationHub
üü "
.
üü" #
Clients
üü# *
.
üü* +
User
üü+ /
(
üü/ 0
userId
üü0 6
)
üü6 7
.
üü7 8
	SendAsync
üü8 A
(
üüA B
$str
üüB T
,
üüT U
fileStudent
üüV a
)
üüa b
;
üüb c
return
°° 
new
°° 
ResponseDTO
°° "
(
°°" #
)
°°# $
{
¢¢ 
Message
££ 
=
££ 
$str
££ &
,
££& '
	IsSuccess
§§ 
=
§§ 
true
§§  
,
§§  !

StatusCode
•• 
=
•• 
$num
••  
,
••  !
Result
¶¶ 
=
¶¶ 
null
¶¶ 
}
ßß 
;
ßß 
}
®® 	
public
´´ 
async
´´ 
Task
´´ 
<
´´ "
ClosedXMLResponseDTO
´´ .
>
´´. /
DownloadStudents
´´0 @
(
´´@ A
string
´´A G
fileName
´´H P
)
´´P Q
{
¨¨ 	
try
≠≠ 
{
ÆÆ 
string
ØØ 
filePath
ØØ 
=
ØØ  !
Path
ØØ" &
.
ØØ& '
Combine
ØØ' .
(
ØØ. /
_env
ØØ/ 3
.
ØØ3 4
ContentRootPath
ØØ4 C
,
ØØC D
_config
ØØE L
[
ØØL M
$str
ØØM q
]
ØØq r
,
ØØr s
fileName
∞∞ 
)
∞∞ 
;
∞∞ 
if
≤≤ 
(
≤≤ 
!
≤≤ 
File
≤≤ 
.
≤≤ 
Exists
≤≤  
(
≤≤  !
filePath
≤≤! )
)
≤≤) *
)
≤≤* +
{
≥≥ 
return
¥¥ 
new
¥¥ "
ClosedXMLResponseDTO
¥¥ 3
(
¥¥3 4
)
¥¥4 5
{
µµ 
Message
∂∂ 
=
∂∂  !
$str
∂∂" 2
,
∂∂2 3
	IsSuccess
∑∑ !
=
∑∑" #
false
∑∑$ )
,
∑∑) *

StatusCode
∏∏ "
=
∏∏# $
$num
∏∏% (
,
∏∏( )
Stream
ππ 
=
ππ  
null
ππ! %
,
ππ% &
ContentType
∫∫ #
=
∫∫$ %
null
∫∫& *
,
∫∫* +
FileName
ªª  
=
ªª! "
null
ªª# '
}
ºº 
;
ºº 
}
ΩΩ 
var
¿¿ 
memoryStream
¿¿  
=
¿¿! "
new
¿¿# &
MemoryStream
¿¿' 3
(
¿¿3 4
)
¿¿4 5
;
¿¿5 6
using
¡¡ 
(
¡¡ 
var
¡¡ 
stream
¡¡ !
=
¡¡" #
new
¡¡$ '

FileStream
¡¡( 2
(
¡¡2 3
filePath
¡¡3 ;
,
¡¡; <
FileMode
¡¡= E
.
¡¡E F
Open
¡¡F J
)
¡¡J K
)
¡¡K L
{
¬¬ 
await
√√ 
stream
√√  
.
√√  !
CopyToAsync
√√! ,
(
√√, -
memoryStream
√√- 9
)
√√9 :
;
√√: ;
}
ƒƒ 
memoryStream
∆∆ 
.
∆∆ 
Position
∆∆ %
=
∆∆& '
$num
∆∆( )
;
∆∆) *
var
«« 
contentType
«« 
=
««  !
$str
««" e
;
««e f
File
   
.
   
Delete
   
(
   
filePath
   $
)
  $ %
;
  % &
return
ÃÃ 
new
ÃÃ "
ClosedXMLResponseDTO
ÃÃ /
(
ÃÃ/ 0
)
ÃÃ0 1
{
ÕÕ 
Message
ŒŒ 
=
ŒŒ 
$str
ŒŒ :
,
ŒŒ: ;
	IsSuccess
œœ 
=
œœ 
true
œœ  $
,
œœ$ %

StatusCode
–– 
=
––  
$num
––! $
,
––$ %
Stream
—— 
=
—— 
memoryStream
—— )
,
——) *
ContentType
““ 
=
““  !
contentType
““" -
,
““- .
FileName
”” 
=
”” 
fileName
”” '
}
‘‘ 
;
‘‘ 
}
’’ 
catch
÷÷ 
(
÷÷ 
	Exception
÷÷ 
e
÷÷ 
)
÷÷ 
{
◊◊ 
Console
ÿÿ 
.
ÿÿ 
	WriteLine
ÿÿ !
(
ÿÿ! "
e
ÿÿ" #
.
ÿÿ# $
Message
ÿÿ$ +
)
ÿÿ+ ,
;
ÿÿ, -
throw
ŸŸ 
;
ŸŸ 
}
⁄⁄ 
}
€€ 	
public
›› 
async
›› 
Task
›› 
<
›› 
ResponseDTO
›› %
>
››% &+
TotalPricesCoursesByStudentId
››' D
(
››D E
Guid
››E I
	studentId
››J S
)
››S T
{
ﬁﬁ 	
try
ﬂﬂ 
{
‡‡ 
var
‚‚ 
student
‚‚ 
=
‚‚ 
await
‚‚ #
_unitOfWork
‚‚$ /
.
‚‚/ 0
StudentRepository
‚‚0 A
.
‚‚A B
GetAsync
‚‚B J
(
‚‚J K
s
‚‚K L
=>
‚‚M O
s
‚‚P Q
.
‚‚Q R
	StudentId
‚‚R [
==
‚‚\ ^
	studentId
‚‚_ h
)
‚‚h i
;
‚‚i j
if
‰‰ 
(
‰‰ 
student
‰‰ 
==
‰‰ 
null
‰‰ #
)
‰‰# $
{
ÂÂ 
return
ÊÊ 
new
ÊÊ 
ResponseDTO
ÊÊ *
(
ÊÊ* +
)
ÊÊ+ ,
{
ÁÁ 
Message
ËË 
=
ËË  !
$str
ËË" 5
,
ËË5 6
Result
ÈÈ 
=
ÈÈ  
null
ÈÈ! %
,
ÈÈ% &
	IsSuccess
ÍÍ !
=
ÍÍ" #
false
ÍÍ$ )
,
ÍÍ) *

StatusCode
ÎÎ "
=
ÎÎ# $
$num
ÎÎ% (
}
ÏÏ 
;
ÏÏ 
}
ÌÌ 
var
ÔÔ 
orderHeaders
ÔÔ  
=
ÔÔ! "
await
ÔÔ# (
_unitOfWork
ÔÔ) 4
.
ÔÔ4 5#
OrderHeaderRepository
ÔÔ5 J
.
ÔÔJ K
GetAllAsync
ÔÔK V
(
ÔÔV W
o
ÔÔW X
=>
ÔÔY [
o
ÔÔ\ ]
.
ÔÔ] ^
	StudentId
ÔÔ^ g
==
ÔÔh j
	studentId
ÔÔk t
)
ÔÔt u
;
ÔÔu v
if
ÒÒ 
(
ÒÒ 
orderHeaders
ÒÒ  
==
ÒÒ! #
null
ÒÒ$ (
||
ÒÒ) +
!
ÒÒ, -
orderHeaders
ÒÒ- 9
.
ÒÒ9 :
Any
ÒÒ: =
(
ÒÒ= >
)
ÒÒ> ?
)
ÒÒ? @
{
ÚÚ 
return
ÛÛ 
new
ÛÛ 
ResponseDTO
ÛÛ *
(
ÛÛ* +
)
ÛÛ+ ,
{
ÙÙ 
Message
ıı 
=
ıı  !
$str
ıı" I
,
ııI J
Result
ˆˆ 
=
ˆˆ  
null
ˆˆ! %
,
ˆˆ% &
	IsSuccess
˜˜ !
=
˜˜" #
false
˜˜$ )
,
˜˜) *

StatusCode
¯¯ "
=
¯¯# $
$num
¯¯% (
}
˘˘ 
;
˘˘ 
}
˙˙ 
var
˝˝ 
orderHeaderId
˝˝ !
=
˝˝" #
orderHeaders
˝˝$ 0
.
˝˝0 1
Select
˝˝1 7
(
˝˝7 8
x
˝˝8 9
=>
˝˝: <
x
˝˝= >
.
˝˝> ?
Id
˝˝? A
)
˝˝A B
.
˝˝B C
ToList
˝˝C I
(
˝˝I J
)
˝˝J K
;
˝˝K L
var
ÄÄ 
orderDetails
ÄÄ  
=
ÄÄ! "
await
ÄÄ# (
_unitOfWork
ÄÄ) 4
.
ÄÄ4 5$
OrderDetailsRepository
ÄÄ5 K
.
ÄÄK L
GetAllAsync
ÄÄL W
(
ÄÄW X
od
ÅÅ 
=>
ÅÅ 
orderHeaderId
ÅÅ '
.
ÅÅ' (
Contains
ÅÅ( 0
(
ÅÅ0 1
od
ÅÅ1 3
.
ÅÅ3 4
OrderHeaderId
ÅÅ4 A
)
ÅÅA B
&&
ÅÅC E
od
ÅÅF H
.
ÅÅH I
CourseId
ÅÅI Q
!=
ÅÅR T
Guid
ÅÅU Y
.
ÅÅY Z
Empty
ÅÅZ _
)
ÅÅ_ `
;
ÅÅ` a
var
ÑÑ 
courses
ÑÑ 
=
ÑÑ 
orderDetails
ÑÑ *
.
ÑÑ* +
Count
ÑÑ+ 0
(
ÑÑ0 1
)
ÑÑ1 2
;
ÑÑ2 3
var
áá 

totalPrice
áá 
=
áá  
orderDetails
áá! -
.
áá- .
Sum
áá. 1
(
áá1 2
od
áá2 4
=>
áá5 7
od
áá8 :
.
áá: ;
CoursePrice
áá; F
)
ááF G
;
ááG H
return
ââ 
new
ââ 
ResponseDTO
ââ &
(
ââ& '
)
ââ' (
{
ää 
Message
ãã 
=
ãã 
$str
ãã <
,
ãã< =
Result
åå 
=
åå 
new
åå  
{
åå! "
Courses
åå# *
=
åå+ ,
courses
åå- 4
,
åå4 5

TotalPrice
åå6 @
=
ååA B

totalPrice
ååC M
}
ååN O
,
ååO P
	IsSuccess
çç 
=
çç 
true
çç  $
,
çç$ %

StatusCode
éé 
=
éé  
$num
éé! $
}
èè 
;
èè 
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë 
e
ëë 
)
ëë 
{
íí 
return
ìì 
new
ìì 
ResponseDTO
ìì &
(
ìì& '
)
ìì' (
{
îî 
Message
ïï 
=
ïï 
e
ïï 
.
ïï  
Message
ïï  '
,
ïï' (
Result
ññ 
=
ññ 
null
ññ !
,
ññ! "
	IsSuccess
óó 
=
óó 
false
óó  %
,
óó% &

StatusCode
òò 
=
òò  
$num
òò! $
}
ôô 
;
ôô 
}
öö 
}
õõ 	
public
ùù 
async
ùù 
Task
ùù 
<
ùù 
ResponseDTO
ùù %
>
ùù% &%
GetAllCourseByStudentId
ùù' >
(
ùù> ?
Guid
ùù? C
	studentId
ùùD M
)
ùùM N
{
ûû 	
try
üü 
{
†† 
var
°° 
student
°° 
=
°° 
await
°° #
_unitOfWork
°°$ /
.
°°/ 0
StudentRepository
°°0 A
.
°°A B
GetAsync
°°B J
(
°°J K
i
°°K L
=>
°°M O
i
°°P Q
.
°°Q R
	StudentId
°°R [
==
°°\ ^
	studentId
°°_ h
)
°°h i
;
°°i j
if
¢¢ 
(
¢¢ 
student
¢¢ 
==
¢¢ 
null
¢¢ #
)
¢¢# $
{
££ 
return
§§ 
new
§§ 
ResponseDTO
§§ *
(
§§* +
)
§§+ ,
{
•• 
Message
¶¶ 
=
¶¶  !
$str
¶¶" 5
,
¶¶5 6
Result
ßß 
=
ßß  
null
ßß! %
,
ßß% &
	IsSuccess
®® !
=
®®" #
false
®®$ )
,
®®) *

StatusCode
©© "
=
©©# $
$num
©©% (
}
™™ 
;
™™ 
}
´´ 
var
≠≠ 
courses
≠≠ 
=
≠≠ 
await
≠≠ #
_unitOfWork
≠≠$ /
.
≠≠/ 0%
StudentCourseRepository
≠≠0 G
.
≠≠G H
GetAllAsync
≠≠H S
(
≠≠S T
c
ÆÆ 
=>
ÆÆ 
c
ÆÆ 
.
ÆÆ 
	StudentId
ÆÆ $
==
ÆÆ% '
	studentId
ÆÆ( 1
,
ÆÆ1 2
includeProperties
ØØ %
:
ØØ% &
$str
ØØ' J
)
∞∞ 
;
∞∞ 
if
≤≤ 
(
≤≤ 
courses
≤≤ 
==
≤≤ 
null
≤≤ #
)
≤≤# $
{
≥≥ 
return
¥¥ 
new
¥¥ 
ResponseDTO
¥¥ *
(
¥¥* +
)
¥¥+ ,
{
µµ 
Message
∂∂ 
=
∂∂  !
$str
∂∂" 3
,
∂∂3 4
Result
∑∑ 
=
∑∑  
null
∑∑! %
,
∑∑% &
	IsSuccess
∏∏ !
=
∏∏" #
false
∏∏$ )
,
∏∏) *

StatusCode
ππ "
=
ππ# $
$num
ππ% (
}
∫∫ 
;
∫∫ 
}
ªª 
var
ΩΩ 
listCourses
ΩΩ 
=
ΩΩ  !
courses
ΩΩ" )
.
ΩΩ) *
Select
ΩΩ* 0
(
ΩΩ0 1
cs
ΩΩ1 3
=>
ΩΩ4 6
new
ΩΩ7 :
{
ææ 
cs
øø 
.
øø 
Id
øø 
,
øø 
cs
¿¿ 
.
¿¿ 
	StudentId
¿¿  
,
¿¿  !
cs
¡¡ 
.
¡¡ 
CourseId
¡¡ 
,
¡¡  
cs
¬¬ 
.
¬¬ 
CertificateImgUrl
¬¬ (
,
¬¬( )
cs
√√ 
.
√√ 
CreatedTime
√√ "
,
√√" #
cs
ƒƒ 
.
ƒƒ 
	UpdatedBy
ƒƒ  
,
ƒƒ  !
cs
≈≈ 
.
≈≈ 
UpdatedTime
≈≈ "
,
≈≈" #
cs
∆∆ 
.
∆∆ 
Status
∆∆ 
,
∆∆ 
InstructorName
«« "
=
««# $
cs
««% '
.
««' (
Course
««( .
.
««. /

Instructor
««/ 9
.
««9 :
ApplicationUser
««: I
.
««I J
FullName
««J R
}
»» 
)
»» 
.
»» 
ToList
»» 
(
»» 
)
»» 
;
»» 
if
   
(
   
!
   
listCourses
    
.
    !
Any
  ! $
(
  $ %
)
  % &
)
  & '
{
ÀÀ 
return
ÃÃ 
new
ÃÃ 
ResponseDTO
ÃÃ *
(
ÃÃ* +
)
ÃÃ+ ,
{
ÕÕ 
Message
ŒŒ 
=
ŒŒ  !
$str
ŒŒ" K
,
ŒŒK L
Result
œœ 
=
œœ  
null
œœ! %
,
œœ% &
	IsSuccess
–– !
=
––" #
false
––$ )
,
––) *

StatusCode
—— "
=
——# $
$num
——% (
}
““ 
;
““ 
}
”” 
return
’’ 
new
’’ 
ResponseDTO
’’ &
(
’’& '
)
’’' (
{
÷÷ 
Message
◊◊ 
=
◊◊ 
$str
◊◊ <
,
◊◊< =
Result
ÿÿ 
=
ÿÿ 
listCourses
ÿÿ (
,
ÿÿ( )
	IsSuccess
ŸŸ 
=
ŸŸ 
true
ŸŸ  $
,
ŸŸ$ %

StatusCode
⁄⁄ 
=
⁄⁄  
$num
⁄⁄! $
}
€€ 
;
€€ 
}
‹‹ 
catch
›› 
(
›› 
	Exception
›› 
e
›› 
)
›› 
{
ﬁﬁ 
return
ﬂﬂ 
new
ﬂﬂ 
ResponseDTO
ﬂﬂ &
(
ﬂﬂ& '
)
ﬂﬂ' (
{
‡‡ 
Message
·· 
=
·· 
e
·· 
.
··  
Message
··  '
,
··' (
Result
‚‚ 
=
‚‚ 
null
‚‚ !
,
‚‚! "
	IsSuccess
„„ 
=
„„ 
false
„„  %
,
„„% &

StatusCode
‰‰ 
=
‰‰  
$num
‰‰! $
}
ÂÂ 
;
ÂÂ 
}
ÊÊ 
}
ÁÁ 	
}
ÈÈ 
}ÍÍ ∞
sD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\StudentCourseStatusService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public		 
class		 &
StudentCourseStatusService		 '
:		( )'
IStudentCourseStatusService		* E
{

 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
public 
&
StudentCourseStatusService %
(% &
IUnitOfWork& 1

unitOfWork2 <
)< =
{ 
_unitOfWork 
= 

unitOfWork  
;  !
} 
public 

Task 
< 
ResponseDTO 
> #
GetStudentCoursesStatus 4
(4 5
Guid5 9
studentCourseId: I
)I J
{ 
throw 
new #
NotImplementedException )
() *
)* +
;+ ,
} 
public 

Task 
< 
ResponseDTO 
> "
GetStudentCourseStatus 3
(3 4
Guid4 8!
studentCourseStatusId9 N
)N O
{ 
throw 
new #
NotImplementedException )
() *
)* +
;+ ,
} 
public 

async 
Task 
< 
ResponseDTO !
>! "%
CreateStudentCourseStatus# <
(< =(
CreateStudentCourseStatusDTO= Y(
createStudentCourseStatusDtoZ v
)v w
{ 
try 
{ 	
var   
studentCourseStatus   #
=  $ %
new  & )
StudentCourseStatus  * =
(  = >
)  > ?
{!! 
Id"" 
="" 
Guid"" 
."" 
NewGuid"" !
(""! "
)""" #
,""# $
CreatedTime## 
=## 
DateTime## &
.##& '
UtcNow##' -
,##- .
Status$$ 
=$$ (
createStudentCourseStatusDto$$ 5
.$$5 6
Status$$6 <
,$$< =
StudentCourseId%% 
=%%  !(
createStudentCourseStatusDto%%" >
.%%> ?
StudentCourseId%%? N
,%%N O
	CreatedBy&& 
=&& (
createStudentCourseStatusDto&& 8
.&&8 9
	CreatedBy&&9 B
}'' 
;'' 
await)) 
_unitOfWork)) 
.)) )
StudentCourseStatusRepository)) ;
.)); <
AddAsync))< D
())D E
studentCourseStatus))E X
)))X Y
;))Y Z
await** 
_unitOfWork** 
.** 
	SaveAsync** '
(**' (
)**( )
;**) *
return,, 
new,, 
ResponseDTO,, "
(,," #
),,# $
{-- 
	IsSuccess.. 
=.. 
true..  
,..  !

StatusCode// 
=// 
$num//  
,//  !
Message00 
=00 
$str00 E
,00E F
Result11 
=11 
studentCourseStatus11 ,
.11, -
Id11- /
}22 
;22 
}33 	
catch44 
(44 
	Exception44 
e44 
)44 
{55 	
return66 
new66 
ResponseDTO66 "
(66" #
)66# $
{77 
	IsSuccess88 
=88 
false88 !
,88! "

StatusCode99 
=99 
$num99  
,99  !
Message:: 
=:: 
e:: 
.:: 
Message:: #
,::# $
Result;; 
=;; 
null;; 
}<< 
;<< 
}== 	
}>> 
}?? ¬Q
mD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\StudentCourseService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public

 
class

  
StudentCourseService

 !
:

" #!
IStudentCourseService

$ 9
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly '
IStudentCourseStatusService 0'
_studentCourseStatusService1 L
;L M
public 
 
StudentCourseService 
(  
IUnitOfWork  +

unitOfWork, 6
,6 7'
IStudentCourseStatusService8 S&
studentCourseStatusServiceT n
)n o
{ 
_unitOfWork 
= 

unitOfWork  
;  !'
_studentCourseStatusService #
=$ %&
studentCourseStatusService& @
;@ A
} 
public 

async 
Task 
< 
ResponseDTO !
>! "
CreateStudentCourse# 6
(6 7
ClaimsPrincipal7 F
UserG K
,K L
EnrollCourseDTOM \
enrollCourseDto] l
)l m
{ 
try 
{ 	
var 
	userEmail 
= 
User  
.  !
Claims! '
.' (
FirstOrDefault( 6
(6 7
x7 8
=>9 ;
x< =
.= >
Type> B
==C E

ClaimTypesF P
.P Q
NameQ U
)U V
?V W
.W X
ValueX ]
;] ^
var 
student 
= 
await 
_unitOfWork  +
.+ ,
StudentRepository, =
.= >
GetAsync> F
(F G
xG H
=>I K
xL M
.M N
	StudentIdN W
==X Z
enrollCourseDto[ j
.j k
	studentIdk t
)t u
;u v
if 
( 
student 
is 
null 
)  
{ 
return 
new 
ResponseDTO &
(& '
)' (
{ 
	IsSuccess   
=   
false    %
,  % &

StatusCode!! 
=!!  
$num!!! $
,!!$ %
Message"" 
="" 
$str"" 5
,""5 6
Result## 
=## 
null## !
}$$ 
;$$ 
}%% 
var'' 
course'' 
='' 
await'' 
_unitOfWork'' *
.''* +
CourseRepository''+ ;
.''; <
GetAsync''< D
(''D E
x''E F
=>''G I
x''J K
.''K L
Id''L N
==''O Q
enrollCourseDto''R a
.''a b
courseId''b j
)''j k
;''k l
if(( 
((( 
course(( 
is(( 
null(( 
)(( 
{)) 
return** 
new** 
ResponseDTO** &
(**& '
)**' (
{++ 
	IsSuccess,, 
=,, 
false,,  %
,,,% &

StatusCode-- 
=--  
$num--! $
,--$ %
Message.. 
=.. 
$str.. 4
,..4 5
Result// 
=// 
null// !
}00 
;00 
}11 
var33 
studentCourse33 
=33 
new33  #
StudentCourse33$ 1
(331 2
)332 3
{44 
Id55 
=55 
Guid55 
.55 
NewGuid55 !
(55! "
)55" #
,55# $
	StudentId66 
=66 
student66 #
.66# $
	StudentId66$ -
,66- .
CourseId77 
=77 
course77 !
.77! "
Id77" $
,77$ %
	CreatedBy88 
=88 
	userEmail88 %
,88% &
CreatedTime99 
=99 
DateTime99 &
.99& '
UtcNow99' -
,99- .
Status:: 
=:: 
StaticStatus:: %
.::% &
StudentCourse::& 3
.::3 4
Enrolled::4 <
,::< =
};; 
;;; 
await== 
_unitOfWork== 
.== #
StudentCourseRepository== 5
.==5 6
AddAsync==6 >
(==> ?
studentCourse==? L
)==L M
;==M N
await>> 
_unitOfWork>> 
.>> 
	SaveAsync>> '
(>>' (
)>>( )
;>>) *
await@@ '
_studentCourseStatusService@@ -
.@@- .%
CreateStudentCourseStatus@@. G
(AA 
newBB (
CreateStudentCourseStatusDTOBB 0
(BB0 1
)BB1 2
{CC 
	CreatedByDD 
=DD 
	userEmailDD  )
,DD) *
StatusEE 
=EE 
StaticStatusEE )
.EE) *
StudentCourseEE* 7
.EE7 8
EnrolledEE8 @
,EE@ A
StudentCourseIdFF #
=FF$ %
studentCourseFF& 3
.FF3 4
IdFF4 6
}GG 
)HH 
;HH 
returnJJ 
newJJ 
ResponseDTOJJ "
(JJ" #
)JJ# $
{KK 
	IsSuccessLL 
=LL 
trueLL  
,LL  !

StatusCodeMM 
=MM 
$numMM  
,MM  !
MessageNN 
=NN 
$strNN A
,NNA B
ResultOO 
=OO 
studentCourseOO &
}PP 
;PP 
}QQ 	
catchRR 
(RR 
	ExceptionRR 
eRR 
)RR 
{SS 	
returnTT 
newTT 
ResponseDTOTT "
(TT" #
)TT# $
{UU 
	IsSuccessVV 
=VV 
falseVV !
,VV! "

StatusCodeWW 
=WW 
$numWW  
,WW  !
MessageXX 
=XX 
eXX 
.XX 
MessageXX #
,XX# $
ResultYY 
=YY 
nullYY 
}ZZ 
;ZZ 
}[[ 	
}\\ 
public^^ 

async^^ 
Task^^ 
<^^ 
ResponseDTO^^ !
>^^! "
UpdateStudentCourse^^# 6
(__ 
ClaimsPrincipal`` 
User`` 
,`` "
UpdateStudentCourseDTOaa "
updateStudentCourseDtoaa 5
)bb 
{cc 
trydd 
{ee 	
varff 
studentCourseff 
=ff 
awaitff  %
_unitOfWorkff& 1
.ff1 2#
StudentCourseRepositoryff2 I
.ffI J
GetAsyncffJ R
(gg 
xhh 
=>hh 
xhh 
.hh 
	StudentIdhh  
==hh! #"
updateStudentCourseDtohh$ :
.hh: ;
	StudentIdhh; D
&&hhE G
xhhH I
.hhI J
CourseIdhhJ R
==hhS U"
updateStudentCourseDtohhV l
.hhl m
CourseIdhhm u
)ii 
;ii 
ifkk 
(kk 
studentCoursekk 
iskk  
nullkk! %
)kk% &
{ll 
returnmm 
newmm 
ResponseDTOmm &
(mm& '
)mm' (
{nn 
	IsSuccessoo 
=oo 
falseoo  %
,oo% &

StatusCodepp 
=pp  
$numpp! $
,pp$ %
Messageqq 
=qq 
$strqq <
,qq< =
Resultrr 
=rr 
nullrr !
}ss 
;ss 
}tt 
studentCoursevv 
.vv 
Statusvv  
=vv! ""
updateStudentCourseDtovv# 9
.vv9 :
Statusvv: @
;vv@ A
_unitOfWorkww 
.ww #
StudentCourseRepositoryww /
.ww/ 0
Updateww0 6
(ww6 7
studentCourseww7 D
)wwD E
;wwE F
awaitxx 
_unitOfWorkxx 
.xx 
	SaveAsyncxx '
(xx' (
)xx( )
;xx) *
awaitzz '
_studentCourseStatusServicezz -
.zz- .%
CreateStudentCourseStatuszz. G
({{ 
new|| (
CreateStudentCourseStatusDTO|| 0
(||0 1
)||1 2
{}} 
	CreatedBy~~ 
=~~ 
User~~  $
.~~$ %
Claims~~% +
.~~+ ,
FirstOrDefault~~, :
(~~: ;
x~~; <
=>~~= ?
x~~@ A
.~~A B
Type~~B F
==~~G I

ClaimTypes~~J T
.~~T U
Name~~U Y
)~~Y Z
?~~Z [
.~~[ \
Value~~\ a
,~~a b
StudentCourseId #
=$ %
studentCourse& 3
.3 4
Id4 6
,6 7
Status
ÄÄ 
=
ÄÄ $
updateStudentCourseDto
ÄÄ 3
.
ÄÄ3 4
Status
ÄÄ4 :
}
ÅÅ 
)
ÇÇ 
;
ÇÇ 
return
ÑÑ 
new
ÑÑ 
ResponseDTO
ÑÑ "
(
ÑÑ" #
)
ÑÑ# $
{
ÖÖ 
	IsSuccess
ÜÜ 
=
ÜÜ 
true
ÜÜ  
,
ÜÜ  !

StatusCode
áá 
=
áá 
$num
áá  
,
áá  !
Message
àà 
=
àà 
$str
àà >
,
àà> ?
Result
ââ 
=
ââ 
null
ââ 
}
ää 
;
ää 
}
ãã 	
catch
åå 
(
åå 
	Exception
åå 
e
åå 
)
åå 
{
çç 	
return
éé 
new
éé 
ResponseDTO
éé "
(
éé" #
)
éé# $
{
èè 
	IsSuccess
êê 
=
êê 
false
êê !
,
êê! "

StatusCode
ëë 
=
ëë 
$num
ëë  
,
ëë  !
Message
íí 
=
íí 
e
íí 
.
íí 
Message
íí #
,
íí# $
Result
ìì 
=
ìì 
null
ìì 
}
îî 
;
îî 
}
ïï 	
}
ññ 
}óó ÿÖ
fD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\StripeService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
StripeService 
: 
IStripeService +
{		 
public

 

async

 
Task

 
<

 
ResponseDTO

 !
>

! " 
CreatePaymentSession

# 7
(

7 8"
CreateStripeSessionDTO

8 N"
createStripeSessionDto

O e
)

e f
{ 
try 
{ 	
var 
options 
= 
new  
SessionCreateOptions 2
{ 

SuccessUrl 
= "
createStripeSessionDto 3
.3 4
ApprovedUrl4 ?
,? @
	CancelUrl 
= "
createStripeSessionDto 2
.2 3
	CancelUrl3 <
,< =
	LineItems 
= 
new 
List  $
<$ %"
SessionLineItemOptions% ;
>; <
(< =
)= >
,> ?
Mode 
= 
$str  
,  !
} 
; 
if 
( "
createStripeSessionDto &
.& '
OrdersDetails' 4
is5 7
null8 <
)< =
{ 
throw 
new "
NullReferenceException 0
(0 1
)1 2
;2 3
} 
foreach 
( 
var 
orderDetail $
in% '"
createStripeSessionDto( >
.> ?
OrdersDetails? L
)L M
{ 
var 
sessionLineItem #
=$ %
new& )"
SessionLineItemOptions* @
(@ A
)A B
{ 
	PriceData 
= 
new  #+
SessionLineItemPriceDataOptions$ C
(C D
)D E
{   

UnitAmount!! "
=!!# $
(!!% &
long!!& *
)!!* +
(!!+ ,
(!!, -
orderDetail!!- 8
.!!8 9
CoursePrice!!9 D
*!!E F
$num!!G J
)!!J K
*!!L M
(!!N O
$num!!O R
)!!R S
)!!S T
,!!T U
Currency""  
=""! "
$str""# (
,""( )
ProductData## #
=##$ %
new##& )6
*SessionLineItemPriceDataProductDataOptions##* T
(##T U
)##U V
{$$ 
Name%%  
=%%! "
orderDetail%%# .
.%%. /
CourseTitle%%/ :
,%%: ;
}&& 
}'' 
,'' 
Quantity(( 
=(( 
$num((  
})) 
;)) 
options** 
.** 
	LineItems** !
.**! "
Add**" %
(**% &
sessionLineItem**& 5
)**5 6
;**6 7
}++ 
var-- 
service-- 
=-- 
new-- 
SessionService-- ,
(--, -
)--- .
;--. /
var.. 
session.. 
=.. 
await.. 
service..  '
...' (
CreateAsync..( 3
(..3 4
options..4 ;
)..; <
;..< =
var00 
response00 
=00 
new00 $
ResponseStripeSessionDTO00 7
(007 8
)008 9
{11 
StripeSessionId22 
=22  !
session22" )
.22) *
Id22* ,
,22, -
StripeSessionUrl33  
=33! "
session33# *
.33* +
Url33+ .
}44 
;44 
return77 
new77 
ResponseDTO77 "
(77" #
)77# $
{88 
Result99 
=99 
response99 !
,99! "
Message:: 
=:: 
$str:: >
,::> ?
	IsSuccess;; 
=;; 
true;;  
,;;  !

StatusCode<< 
=<< 
$num<<  
}== 
;== 
}>> 	
catch?? 
(?? 
	Exception?? 
e?? 
)?? 
{@@ 	
ConsoleAA 
.AA 
	WriteLineAA 
(AA 
eAA 
)AA  
;AA  !
throwBB 
;BB 
}CC 	
}DD 
publicFF 

asyncFF 
TaskFF 
<FF 
ResponseDTOFF !
>FF! ""
ValidatePaymentSessionFF# 9
(FF9 :$
ValidateStripeSessionDTOFF: R$
validateStripeSessionDtoFFS k
)FFk l
{GG 
tryHH 
{II 	
varJJ 
serviceJJ 
=JJ 
newJJ 
SessionServiceJJ ,
(JJ, -
)JJ- .
;JJ. /
varKK 
sessionKK 
=KK 
awaitKK 
serviceKK  '
.KK' (
GetAsyncKK( 0
(KK0 1$
validateStripeSessionDtoKK1 I
.KKI J
StripeSessionIdKKJ Y
)KKY Z
;KKZ [
varMM  
paymentIntentServiceMM $
=MM% &
newMM' * 
PaymentIntentServiceMM+ ?
(MM? @
)MM@ A
;MMA B
varNN 
paymentIntentNN 
=NN 
awaitNN  % 
paymentIntentServiceNN& :
.NN: ;
GetAsyncNN; C
(NNC D
sessionNND K
.NNK L
PaymentIntentIdNNL [
)NN[ \
;NN\ ]$
validateStripeSessionDtoPP $
.PP$ %
PaymentIntentIdPP% 4
=PP5 6
paymentIntentPP7 D
.PPD E
IdPPE G
;PPG H$
validateStripeSessionDtoQQ $
.QQ$ %
StatusQQ% +
=QQ, -
paymentIntentQQ. ;
.QQ; <
StatusQQ< B
;QQB C
returnSS 
newSS 
ResponseDTOSS "
(SS" #
)SS# $
{TT 
ResultUU 
=UU $
validateStripeSessionDtoUU 1
,UU1 2
MessageVV 
=VV 
$strVV @
,VV@ A
	IsSuccessWW 
=WW 
trueWW  
,WW  !

StatusCodeXX 
=XX 
$numXX  
}YY 
;YY 
}ZZ 	
catch[[ 
([[ 
	Exception[[ 
e[[ 
)[[ 
{\\ 	
Console]] 
.]] 
	WriteLine]] 
(]] 
e]] 
)]]  
;]]  !
throw^^ 
;^^ 
}__ 	
}`` 
publicbb 

asyncbb 
Taskbb 
<bb 
ResponseDTObb !
>bb! ""
CreateConnectedAccountbb# 9
(cc +
CreateStripeConnectedAccountDTOdd '+
createStripeConnectedAccountDtodd( G
)ee 
{ff 
varhh 
optionshh 
=hh 
newhh  
AccountCreateOptionshh .
{ii 	
Typejj 
=jj 

StaticEnumjj 
.jj 
StripeAccountTypejj /
.jj/ 0
expressjj0 7
.jj7 8
ToStringjj8 @
(jj@ A
)jjA B
,jjB C
Emailkk 
=kk +
createStripeConnectedAccountDtokk 3
.kk3 4
Emailkk4 9
,kk9 :
Capabilitiesmm 
=mm 
newmm &
AccountCapabilitiesOptionsmm 9
{nn 
CardPaymentsoo 
=oo 
newoo "2
&AccountCapabilitiesCardPaymentsOptionsoo# I
{ooJ K
	RequestedooL U
=ooV W
trueooX \
}oo] ^
,oo^ _
	Transferspp 
=pp 
newpp /
#AccountCapabilitiesTransfersOptionspp  C
{ppD E
	RequestedppF O
=ppP Q
trueppR V
}ppW X
,ppX Y
}qq 
,qq 
BusinessTypess 
=ss 
$strss '
,ss' (
}tt 	
;tt	 

varvv 
servicevv 
=vv 
newvv 
AccountServicevv (
(vv( )
)vv) *
;vv* +
varww 
accountww 
=ww 
awaitww 
serviceww #
.ww# $
CreateAsyncww$ /
(ww/ 0
optionsww0 7
)ww7 8
;ww8 9
varzz 
accountLinkOptionszz 
=zz  
newzz! $$
AccountLinkCreateOptionszz% =
{{{ 	
Account|| 
=|| 
account|| 
.|| 
Id||  
,||  !

RefreshUrl}} 
=}} +
createStripeConnectedAccountDto}} 8
.}}8 9

RefreshUrl}}9 C
,}}C D
	ReturnUrl~~ 
=~~ +
createStripeConnectedAccountDto~~ 7
.~~7 8
	ReturnUrl~~8 A
,~~A B
Type 
= 

StaticEnum 
. !
StripeAccountLinkType 3
.3 4
account_onboarding4 F
.F G
ToStringG O
(O P
)P Q
,Q R
}
ÄÄ 	
;
ÄÄ	 

var
ÇÇ  
accountLinkService
ÇÇ 
=
ÇÇ  
new
ÇÇ! $ 
AccountLinkService
ÇÇ% 7
(
ÇÇ7 8
)
ÇÇ8 9
;
ÇÇ9 :
var
ÉÉ 
accountLink
ÉÉ 
=
ÉÉ 
await
ÉÉ  
accountLinkService
ÉÉ  2
.
ÉÉ2 3
CreateAsync
ÉÉ3 >
(
ÉÉ> ? 
accountLinkOptions
ÉÉ? Q
)
ÉÉQ R
;
ÉÉR S
var
ÖÖ /
!responseStripeConnectedAccountDto
ÖÖ -
=
ÖÖ. /
new
ÖÖ0 3/
!ResponseStripeConnectedAccountDTO
ÖÖ4 U
(
ÖÖU V
)
ÖÖV W
{
ÜÜ 	
	AccountId
áá 
=
áá 
account
áá 
.
áá  
Id
áá  "
,
áá" #
AccountLinkUrl
àà 
=
àà 
accountLink
àà (
.
àà( )
Url
àà) ,
}
ââ 	
;
ââ	 

return
ãã 
new
ãã 
ResponseDTO
ãã 
(
ãã 
)
ãã  
{
åå 	
Result
çç 
=
çç /
!responseStripeConnectedAccountDto
çç 6
,
çç6 7
	IsSuccess
éé 
=
éé 
true
éé 
,
éé 

StatusCode
èè 
=
èè 
$num
èè 
,
èè 
Message
êê 
=
êê 
$str
êê D
}
ëë 	
;
ëë	 

}
íí 
public
îî 

async
îî 
Task
îî 
<
îî 
ResponseDTO
îî !
>
îî! "
AddCard
îî# *
(
îî* +
AddStripeCardDTO
îî+ ;
addStripeCardDto
îî< L
)
îîL M
{
ïï 
var
ññ 
options
ññ 
=
ññ 
new
ññ *
ExternalAccountCreateOptions
ññ 6
{
óó 	
ExternalAccount
òò 
=
òò 
addStripeCardDto
òò .
.
òò. /
	CardToken
òò/ 8
,
òò8 9
}
ôô 	
;
ôô	 

var
õõ 
service
õõ 
=
õõ 
new
õõ $
ExternalAccountService
õõ 0
(
õõ0 1
)
õõ1 2
;
õõ2 3
var
úú 
externalAccount
úú 
=
úú 
await
úú #
service
úú$ +
.
úú+ ,
CreateAsync
úú, 7
(
úú7 8
addStripeCardDto
úú8 H
.
úúH I 
ConnectedAccountId
úúI [
,
úú[ \
options
úú] d
)
úúd e
;
úúe f
return
ûû 
new
ûû 
ResponseDTO
ûû 
(
ûû 
)
ûû  
{
üü 	
Result
†† 
=
†† 
externalAccount
†† $
,
††$ %
	IsSuccess
°° 
=
°° 
true
°° 
,
°° 

StatusCode
¢¢ 
=
¢¢ 
$num
¢¢ 
,
¢¢ 
Message
££ 
=
££ 
$str
££ -
}
§§ 	
;
§§	 

}
•• 
public
ßß 

async
ßß 
Task
ßß 
<
ßß 
ResponseDTO
ßß !
>
ßß! "
CreateTransfer
ßß# 1
(
ßß1 2%
CreateStripeTransferDTO
ßß2 I%
createStripeTransferDto
ßßJ a
)
ßßa b
{
®® 
try
©© 
{
™™ 	
var
´´ 
options
´´ 
=
´´ 
new
´´ #
TransferCreateOptions
´´ 3
{
¨¨ 
Amount
≠≠ 
=
≠≠ %
createStripeTransferDto
≠≠ 0
.
≠≠0 1
Amount
≠≠1 7
*
≠≠8 9
$num
≠≠: =
,
≠≠= >
Currency
ÆÆ 
=
ÆÆ %
createStripeTransferDto
ÆÆ 2
.
ÆÆ2 3
Currency
ÆÆ3 ;
,
ÆÆ; <
Destination
ØØ 
=
ØØ %
createStripeTransferDto
ØØ 5
.
ØØ5 6 
ConnectedAccountId
ØØ6 H
,
ØØH I
}
∞∞ 
;
∞∞ 
var
≤≤ 
transferService
≤≤ 
=
≤≤  !
new
≤≤" %
TransferService
≤≤& 5
(
≤≤5 6
)
≤≤6 7
;
≤≤7 8
await
≥≥ 
transferService
≥≥ !
.
≥≥! "
CreateAsync
≥≥" -
(
≥≥- .
options
≥≥. 5
)
≥≥5 6
;
≥≥6 7
return
µµ 
new
µµ 
ResponseDTO
µµ "
(
µµ" #
)
µµ# $
{
∂∂ 
Result
∑∑ 
=
∑∑ %
createStripeTransferDto
∑∑ 0
,
∑∑0 1
	IsSuccess
∏∏ 
=
∏∏ 
true
∏∏  
,
∏∏  !

StatusCode
ππ 
=
ππ 
$num
ππ  
,
ππ  !
Message
∫∫ 
=
∫∫ 
$str
∫∫ 8
}
ªª 
;
ªª 
}
ºº 	
catch
ΩΩ 
(
ΩΩ 
	Exception
ΩΩ 
e
ΩΩ 
)
ΩΩ 
{
ææ 	
return
øø 
new
øø 
ResponseDTO
øø "
(
øø" #
)
øø# $
{
¿¿ 
Result
¡¡ 
=
¡¡ 
null
¡¡ 
,
¡¡ 
	IsSuccess
¬¬ 
=
¬¬ 
true
¬¬  
,
¬¬  !

StatusCode
√√ 
=
√√ 
$num
√√  
,
√√  !
Message
ƒƒ 
=
ƒƒ 
e
ƒƒ 
.
ƒƒ 
Message
ƒƒ #
}
≈≈ 
;
≈≈ 
}
∆∆ 	
}
«« 
public
…… 

async
…… 
Task
…… 
<
…… 
ResponseDTO
…… !
>
……! "
CreatePayout
……# /
(
……/ 0#
CreateStripePayoutDTO
……0 E#
createStripePayoutDto
……F [
)
……[ \
{
   
try
ÀÀ 
{
ÃÃ 	
var
ÕÕ 
options
ÕÕ 
=
ÕÕ 
new
ÕÕ !
PayoutCreateOptions
ÕÕ 1
{
ŒŒ 
Amount
œœ 
=
œœ #
createStripePayoutDto
œœ .
.
œœ. /
Amount
œœ/ 5
*
œœ6 7
$num
œœ8 ;
,
œœ; <
Currency
–– 
=
–– #
createStripePayoutDto
–– 0
.
––0 1
Currency
––1 9
,
––9 :
}
—— 
;
—— 
var
”” 
service
”” 
=
”” 
new
”” 
PayoutService
”” +
(
””+ ,
)
””, -
;
””- .
var
’’ 
payout
’’ 
=
’’ 
await
’’ 
service
’’ &
.
’’& '
CreateAsync
’’' 2
(
÷÷ 
options
◊◊ 
,
◊◊ 
new
◊◊ 
RequestOptions
◊◊ +
{
ÿÿ 
StripeAccount
ŸŸ !
=
ŸŸ" ##
createStripePayoutDto
ŸŸ$ 9
.
ŸŸ9 : 
ConnectedAccountId
ŸŸ: L
}
⁄⁄ 
)
€€ 
;
€€ 
return
›› 
new
›› 
ResponseDTO
›› "
(
››" #
)
››# $
{
ﬁﬁ 
Result
ﬂﬂ 
=
ﬂﬂ 
payout
ﬂﬂ 
,
ﬂﬂ  
	IsSuccess
‡‡ 
=
‡‡ 
true
‡‡  
,
‡‡  !

StatusCode
·· 
=
·· 
$num
··  
,
··  !
Message
‚‚ 
=
‚‚ 
$str
‚‚ 6
}
„„ 
;
„„ 
}
‰‰ 	
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ 
e
ÂÂ 
)
ÂÂ 
{
ÊÊ 	
return
ÁÁ 
new
ÁÁ 
ResponseDTO
ÁÁ "
(
ÁÁ" #
)
ÁÁ# $
{
ËË 
Result
ÈÈ 
=
ÈÈ 
null
ÈÈ 
,
ÈÈ 
	IsSuccess
ÍÍ 
=
ÍÍ 
true
ÍÍ  
,
ÍÍ  !

StatusCode
ÎÎ 
=
ÎÎ 
$num
ÎÎ  
,
ÎÎ  !
Message
ÏÏ 
=
ÏÏ 
e
ÏÏ 
.
ÏÏ 
Message
ÏÏ #
}
ÌÌ 
;
ÌÌ 
}
ÓÓ 	
}
ÔÔ 
} Ï˝
uD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\SectionDetailsVersionService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class (
SectionDetailsVersionService )
:* +)
ISectionDetailsVersionService, I
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
IMapper 
_mapper $
;$ %
private 
readonly 
IFirebaseService %
_firebaseService& 6
;6 7
private 
readonly 
UserManager  
<  !
ApplicationUser! 0
>0 1
_userManager2 >
;> ?
public 
(
SectionDetailsVersionService '
(' (
IUnitOfWork( 3

unitOfWork4 >
,> ?
IMapper@ G
mapperH N
,N O
IFirebaseServiceP `
firebaseServicea p
,p q
UserManager 
< 
ApplicationUser #
># $
userManager% 0
)0 1
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; 
_firebaseService 
= 
firebaseService *
;* +
_userManager 
= 
userManager "
;" #
}   
public"" 

async"" 
Task"" 
<"" 
ResponseDTO"" !
>""! "'
CloneSectionsDetailsVersion""# >
(## 
ClaimsPrincipal$$ 
User$$ 
,$$ *
CloneSectionsDetailsVersionDTO%% &*
cloneSectionsDetailsVersionDto%%' E
)&& 
{'' 
try(( 
{)) 	
var** "
sectionDetailsVersions** &
=**' (
await++ 
_unitOfWork++ !
.++! "+
SectionDetailsVersionRepository++" A
.,, @
4GetSectionDetailsVersionsOfCourseSectionVersionAsync,, I
(-- *
cloneSectionsDetailsVersionDto.. 6
...6 7%
OldCourseSectionVersionId..7 P
,..P Q
asNoTracking// $
://$ %
true//& *
)00 
;00 
if22 
(22 "
sectionDetailsVersions22 &
.22& '
IsNullOrEmpty22' 4
(224 5
)225 6
)226 7
{33 
return44 
new44 
ResponseDTO44 &
(44& '
)44' (
{55 
	IsSuccess66 
=66 
false66  %
,66% &

StatusCode77 
=77  
$num77! $
,77$ %
Result88 
=88 
null88 !
,88! "
Message99 
=99 
$str99 W
}:: 
;:: 
};; 
foreach== 
(== 
var== !
sectionDetailsVersion== .
in==/ 1"
sectionDetailsVersions==2 H
)==H I
{>> !
sectionDetailsVersion?? %
.??% &
Id??& (
=??) *
Guid??+ /
.??/ 0
NewGuid??0 7
(??7 8
)??8 9
;??9 :!
sectionDetailsVersion@@ %
.@@% &"
CourseSectionVersionId@@& <
=@@= >*
cloneSectionsDetailsVersionDto@@? ]
.@@] ^%
NewCourseSectionVersionId@@^ w
;@@w x
}AA 
awaitCC 
_unitOfWorkCC 
.CC +
SectionDetailsVersionRepositoryCC =
.CC= >
AddRangeAsyncCC> K
(CCK L"
sectionDetailsVersionsCCL b
)CCb c
;CCc d
awaitDD 
_unitOfWorkDD 
.DD 
	SaveAsyncDD '
(DD' (
)DD( )
;DD) *
returnFF 
newFF 
ResponseDTOFF "
(FF" #
)FF# $
{GG 
	IsSuccessHH 
=HH 
trueHH  
,HH  !

StatusCodeII 
=II 
$numII  
,II  !
MessageJJ 
=JJ 
$strJJ O
,JJO P
ResultKK 
=KK 
nullKK 
}LL 
;LL 
}MM 	
catchNN 
(NN 
	ExceptionNN 
eNN 
)NN 
{OO 	
returnPP 
newPP 
ResponseDTOPP "
(PP" #
)PP# $
{QQ 
	IsSuccessRR 
=RR 
falseRR !
,RR! "

StatusCodeSS 
=SS 
$numSS  
,SS  !
MessageTT 
=TT 
eTT 
.TT 
MessageTT #
,TT# $
ResultUU 
=UU 
nullUU 
}VV 
;VV 
}WW 	
}XX 
publicZZ 

asyncZZ 
TaskZZ 
<ZZ 
ResponseDTOZZ !
>ZZ! "&
GetSectionsDetailsVersionsZZ# =
([[ 
ClaimsPrincipal\\ 
User\\ 
,\\ 
Guid]] 
?]] 
courseSectionId]] 
,]] 
string^^ 
?^^ 
filterOn^^ 
,^^ 
string__ 
?__ 
filterQuery__ 
,__ 
string`` 
?`` 
sortBy`` 
,`` 
boolaa 
?aa 
isAscendingaa 
,aa 
intbb 

pageNumberbb 
,bb 
intcc 
pageSizecc 
)cc 
{dd 
tryee 
{ff 	
IEnumerablegg 
<gg !
SectionDetailsVersiongg -
>gg- .
sectionsgg/ 7
;gg7 8
sectionsjj 
=jj 
awaitjj 
_unitOfWorkjj (
.jj( )+
SectionDetailsVersionRepositoryjj) H
.jjH I
GetAllAsyncjjI T
(jjT U
xjjU V
=>jjW Y
xkk 
.kk "
CourseSectionVersionIdkk (
==kk) +
courseSectionIdkk, ;
)kk; <
;kk< =
ifnn 
(nn 
!nn 
sectionsnn 
.nn 
Anynn 
(nn 
)nn 
)nn  
{oo 
returnpp 
newpp 
ResponseDTOpp &
(pp& '
)pp' (
{qq 
Messagerr 
=rr 
$strrr 4
,rr4 5
	IsSuccessss 
=ss 
truess  $
,ss$ %

StatusCodett 
=tt  
$numtt! $
,tt$ %
Resultuu 
=uu 
sectionsuu %
}vv 
;vv 
}ww 
varyy 
listSectionyy 
=yy 
sectionsyy &
.yy& '
ToListyy' -
(yy- .
)yy. /
;yy/ 0
if|| 
(|| 
!|| 
string|| 
.|| 
IsNullOrEmpty|| %
(||% &
filterOn||& .
)||. /
&&||0 2
!||3 4
string||4 :
.||: ;
IsNullOrEmpty||; H
(||H I
filterQuery||I T
)||T U
)||U V
{}} 
switch~~ 
(~~ 
filterOn~~  
.~~  !
Trim~~! %
(~~% &
)~~& '
.~~' (
ToLower~~( /
(~~/ 0
)~~0 1
)~~1 2
{ 
case
ÄÄ 
$str
ÄÄ 
:
ÄÄ  
listSection
ÅÅ #
=
ÅÅ$ %
listSection
ÅÅ& 1
.
ÅÅ1 2
Where
ÅÅ2 7
(
ÅÅ7 8
x
ÅÅ8 9
=>
ÅÅ: <
x
ÇÇ 
.
ÇÇ 
Name
ÇÇ "
.
ÇÇ" #
Contains
ÇÇ# +
(
ÇÇ+ ,
filterQuery
ÇÇ, 7
,
ÇÇ7 8
StringComparison
ÇÇ9 I
.
ÇÇI J&
CurrentCultureIgnoreCase
ÇÇJ b
)
ÇÇb c
)
ÇÇc d
.
ÇÇd e
ToList
ÇÇe k
(
ÇÇk l
)
ÇÇl m
;
ÇÇm n
break
ÉÉ 
;
ÉÉ 
default
ÑÑ 
:
ÑÑ 
break
ÖÖ 
;
ÖÖ 
}
ÜÜ 
}
áá 
if
ää 
(
ää 
!
ää 
string
ää 
.
ää 
IsNullOrEmpty
ää %
(
ää% &
sortBy
ää& ,
)
ää, -
)
ää- .
{
ãã 
switch
åå 
(
åå 
sortBy
åå 
.
åå 
Trim
åå #
(
åå# $
)
åå$ %
.
åå% &
ToLower
åå& -
(
åå- .
)
åå. /
)
åå/ 0
{
çç 
case
éé 
$str
éé 
:
éé  
listSection
èè #
=
èè$ %
listSection
èè& 1
.
èè1 2
OrderBy
èè2 9
(
èè9 :
x
èè: ;
=>
èè< >
x
èè? @
.
èè@ A
Name
èèA E
)
èèE F
.
èèF G
ToList
èèG M
(
èèM N
)
èèN O
;
èèO P
break
êê 
;
êê 
default
ëë 
:
ëë 
break
íí 
;
íí 
}
ìì 
}
îî 
if
óó 
(
óó 

pageNumber
óó 
>
óó 
$num
óó 
&&
óó !
pageSize
óó" *
>
óó+ ,
$num
óó- .
)
óó. /
{
òò 
var
ôô 

skipResult
ôô 
=
ôô  
(
ôô! "

pageNumber
ôô" ,
-
ôô- .
$num
ôô/ 0
)
ôô0 1
*
ôô2 3
pageSize
ôô4 <
;
ôô< =
listSection
öö 
=
öö 
listSection
öö )
.
öö) *
Skip
öö* .
(
öö. /

skipResult
öö/ 9
)
öö9 :
.
öö: ;
Take
öö; ?
(
öö? @
pageSize
öö@ H
)
ööH I
.
ööI J
ToList
ööJ P
(
ööP Q
)
ööQ R
;
ööR S
}
õõ 
var
ûû 

sectionDto
ûû 
=
ûû 
listSection
ûû (
.
ûû( )
Select
ûû) /
(
ûû/ 0
section
ûû0 7
=>
ûû8 :
new
ûû; >$
GetAllSectionDetailDTO
ûû? U
{
üü 
Id
†† 
=
†† 
section
†† 
.
†† 
Id
†† 
,
††  !
courseSectionDetail
°° #
=
°°$ %
section
°°& -
.
°°- .$
CourseSectionVersionId
°°. D
,
°°D E
name
¢¢ 
=
¢¢ 
section
¢¢ 
.
¢¢ 
Name
¢¢ #
,
¢¢# $
videoUrl
££ 
=
££ 
section
££ "
.
££" #
VideoUrl
££# +
,
££+ ,
slideUrl
§§ 
=
§§ 
section
§§ "
.
§§" #
SlideUrl
§§# +
,
§§+ ,
docsUrl
•• 
=
•• 
section
•• !
.
••! "
DocsUrl
••" )
,
••) *
type
¶¶ 
=
¶¶ 
section
¶¶ 
.
¶¶ 
Type
¶¶ #
,
¶¶# $
currentStatus
ßß 
=
ßß 
section
ßß  '
.
ßß' (
CurrentStatus
ßß( 5
,
ßß5 6
}
®® 
)
®® 
.
®® 
ToList
®® 
(
®® 
)
®® 
;
®® 
return
™™ 
new
™™ 
ResponseDTO
™™ "
(
™™" #
)
™™# $
{
´´ 
Message
¨¨ 
=
¨¨ 
$str
¨¨ D
,
¨¨D E
	IsSuccess
≠≠ 
=
≠≠ 
true
≠≠  
,
≠≠  !

StatusCode
ÆÆ 
=
ÆÆ 
$num
ÆÆ  
,
ÆÆ  !
Result
ØØ 
=
ØØ 

sectionDto
ØØ #
}
∞∞ 
;
∞∞ 
}
±± 	
catch
≤≤ 
(
≤≤ 
	Exception
≤≤ 
e
≤≤ 
)
≤≤ 
{
≥≥ 	
return
¥¥ 
new
¥¥ 
ResponseDTO
¥¥ "
(
¥¥" #
)
¥¥# $
{
µµ 
Message
∂∂ 
=
∂∂ 
e
∂∂ 
.
∂∂ 
Message
∂∂ #
,
∂∂# $
Result
∑∑ 
=
∑∑ 
null
∑∑ 
,
∑∑ 
	IsSuccess
∏∏ 
=
∏∏ 
false
∏∏ !
,
∏∏! "

StatusCode
ππ 
=
ππ 
$num
ππ  
}
∫∫ 
;
∫∫ 
}
ªª 	
}
ºº 
public
ææ 

async
ææ 
Task
ææ 
<
ææ 
ResponseDTO
ææ !
>
ææ! "&
GetSectionDetailsVersion
ææ# ;
(
ææ; <
ClaimsPrincipal
ææ< K
User
ææL P
,
ææP Q
Guid
ææR V
	detailsId
ææW `
)
ææ` a
{
øø 
try
¿¿ 
{
¡¡ 	
var
¬¬ 
detail
¬¬ 
=
¬¬ 
await
√√ 
_unitOfWork
√√ !
.
√√! "-
SectionDetailsVersionRepository
√√" A
.
√√A B*
GetSectionDetailsVersionById
√√B ^
(
√√^ _
	detailsId
√√_ h
)
√√h i
;
√√i j
if
≈≈ 
(
≈≈ 
detail
≈≈ 
is
≈≈ 
null
≈≈ 
)
≈≈ 
{
∆∆ 
return
«« 
new
«« 
ResponseDTO
«« &
(
««& '
)
««' (
{
»» 
Result
…… 
=
…… 
$str
…… 
,
……  
Message
   
=
   
$str
   K
,
  K L
	IsSuccess
ÀÀ 
=
ÀÀ 
true
ÀÀ  $
,
ÀÀ$ %

StatusCode
ÃÃ 
=
ÃÃ  
$num
ÃÃ! $
}
ÕÕ 
;
ÕÕ 
}
ŒŒ 
var
–– 
sectionDetail
–– 
=
–– 
new
––  ##
SectionDetailsVersion
––$ 9
{
—— 
Id
““ 
=
““ 
	detailsId
““ 
,
““ $
CourseSectionVersionId
”” &
=
””' (
detail
””) /
.
””/ 0$
CourseSectionVersionId
””0 F
,
””F G
Name
‘‘ 
=
‘‘ 
detail
‘‘ 
.
‘‘ 
Name
‘‘ "
,
‘‘" #
VideoUrl
’’ 
=
’’ 
detail
’’ !
.
’’! "
VideoUrl
’’" *
,
’’* +
SlideUrl
÷÷ 
=
÷÷ 
detail
÷÷ !
.
÷÷! "
SlideUrl
÷÷" *
,
÷÷* +
DocsUrl
◊◊ 
=
◊◊ 
detail
◊◊  
.
◊◊  !
DocsUrl
◊◊! (
,
◊◊( )
Type
ÿÿ 
=
ÿÿ 
detail
ÿÿ 
.
ÿÿ 
Type
ÿÿ "
,
ÿÿ" #
CurrentStatus
ŸŸ 
=
ŸŸ 
detail
ŸŸ  &
.
ŸŸ& '
CurrentStatus
ŸŸ' 4
,
ŸŸ4 5
}
⁄⁄ 
;
⁄⁄ 
return
‹‹ 
new
‹‹ 
ResponseDTO
‹‹ "
(
‹‹" #
)
‹‹# $
{
›› 
Result
ﬁﬁ 
=
ﬁﬁ 
sectionDetail
ﬁﬁ &
,
ﬁﬁ& '
Message
ﬂﬂ 
=
ﬂﬂ 
$str
ﬂﬂ B
,
ﬂﬂB C
	IsSuccess
‡‡ 
=
‡‡ 
true
‡‡  
,
‡‡  !

StatusCode
·· 
=
·· 
$num
··  
}
‚‚ 
;
‚‚ 
}
„„ 	
catch
‰‰ 
(
‰‰ 
	Exception
‰‰ 
e
‰‰ 
)
‰‰ 
{
ÂÂ 	
return
ÊÊ 
new
ÊÊ 
ResponseDTO
ÊÊ "
(
ÊÊ" #
)
ÊÊ# $
{
ÁÁ 
Result
ËË 
=
ËË 
null
ËË 
,
ËË 
Message
ÈÈ 
=
ÈÈ 
e
ÈÈ 
.
ÈÈ 
Message
ÈÈ #
,
ÈÈ# $
	IsSuccess
ÍÍ 
=
ÍÍ 
true
ÍÍ  
,
ÍÍ  !

StatusCode
ÎÎ 
=
ÎÎ 
$num
ÎÎ  
}
ÏÏ 
;
ÏÏ 
}
ÌÌ 	
}
ÓÓ 
public
 

async
 
Task
 
<
 
ResponseDTO
 !
>
! ")
CreateSectionDetailsVersion
# >
(
ÒÒ 
ClaimsPrincipal
ÚÚ 
User
ÚÚ 
,
ÚÚ ,
CreateSectionDetailsVersionDTO
ÛÛ &,
createSectionDetailsVersionDto
ÛÛ' E
)
ÙÙ 
{
ıı 
try
ˆˆ 
{
˜˜ 	
var
¯¯ 
Id
¯¯ 
=
¯¯ 
await
˘˘ 
_unitOfWork
˘˘ !
.
˘˘! ",
CourseSectionVersionRepository
˘˘" @
.
˘˘@ A
GetAsync
˘˘A I
(
˘˘I J
i
˘˘J K
=>
˘˘L N
i
˙˙ 
.
˙˙ 
Id
˙˙ 
==
˙˙ ,
createSectionDetailsVersionDto
˙˙ :
.
˙˙: ;$
courseSectionVersionId
˙˙; Q
)
˙˙Q R
;
˙˙R S
if
˚˚ 
(
˚˚ 
Id
˚˚ 
==
˚˚ 
null
˚˚ 
)
˚˚ 
{
¸¸ 
return
˝˝ 
new
˝˝ 
ResponseDTO
˝˝ &
(
˝˝& '
)
˝˝' (
{
˛˛ 
Message
ˇˇ 
=
ˇˇ 
$str
ˇˇ >
,
ˇˇ> ?
Result
ÄÄ 
=
ÄÄ 
null
ÄÄ !
,
ÄÄ! "
	IsSuccess
ÅÅ 
=
ÅÅ 
false
ÅÅ  %
,
ÅÅ% &

StatusCode
ÇÇ 
=
ÇÇ  
$num
ÇÇ! $
}
ÉÉ 
;
ÉÉ 
}
ÑÑ 
var
ÜÜ 
sectionDetail
ÜÜ 
=
ÜÜ 
new
ÜÜ  ##
SectionDetailsVersion
ÜÜ$ 9
{
áá $
CourseSectionVersionId
àà &
=
àà' (,
createSectionDetailsVersionDto
àà) G
.
ààG H$
courseSectionVersionId
ààH ^
,
àà^ _
Name
ââ 
=
ââ ,
createSectionDetailsVersionDto
ââ 5
?
ââ5 6
.
ââ6 7
name
ââ7 ;
,
ââ; <
}
ää 
;
ää 
await
åå 
_unitOfWork
åå 
.
åå -
SectionDetailsVersionRepository
åå =
.
åå= >
AddAsync
åå> F
(
ååF G
sectionDetail
ååG T
)
ååT U
;
ååU V
await
çç 
_unitOfWork
çç 
.
çç 
	SaveAsync
çç '
(
çç' (
)
çç( )
;
çç) *
return
èè 
new
èè 
ResponseDTO
èè "
{
êê 
Message
ëë 
=
ëë 
$str
ëë >
,
ëë> ?
Result
íí 
=
íí 
null
íí 
,
íí 
	IsSuccess
ìì 
=
ìì 
true
ìì  
,
ìì  !

StatusCode
îî 
=
îî 
$num
îî  
}
ïï 
;
ïï 
}
ññ 	
catch
ôô 
(
ôô 
	Exception
ôô 
e
ôô 
)
ôô 
{
öö 	
return
õõ 
new
õõ 
ResponseDTO
õõ "
{
úú 
Message
ùù 
=
ùù 
e
ùù 
.
ùù 
Message
ùù #
,
ùù# $
Result
ûû 
=
ûû 
null
ûû 
,
ûû 
	IsSuccess
üü 
=
üü 
false
üü !
,
üü! "

StatusCode
†† 
=
†† 
$num
††  
}
°° 
;
°° 
}
¢¢ 	
}
££ 
public
•• 

async
•• 
Task
•• 
<
•• 
ResponseDTO
•• !
>
••! "'
EditSectionDetailsVersion
••# <
(
¶¶ 
ClaimsPrincipal
ßß 
User
ßß 
,
ßß *
EditSectionDetailsVersionDTO
®® $*
editSectionDetailsVersionDto
®®% A
)
©© 
{
™™ 
try
´´ 
{
¨¨ 	
var
≠≠ 
id
≠≠ 
=
≠≠ 
await
≠≠ 
_unitOfWork
≠≠ &
.
≠≠& '-
SectionDetailsVersionRepository
≠≠' F
.
≠≠F G
GetAsync
≠≠G O
(
≠≠O P
i
≠≠P Q
=>
≠≠R T
i
ÆÆ 
.
ÆÆ 
Id
ÆÆ 
==
ÆÆ *
editSectionDetailsVersionDto
ÆÆ 4
.
ÆÆ4 5
sectionDetailId
ÆÆ5 D
)
ÆÆD E
;
ÆÆE F
if
∞∞ 
(
∞∞ 
id
∞∞ 
==
∞∞ 
null
∞∞ 
)
∞∞ 
{
±± 
return
≤≤ 
new
≤≤ 
ResponseDTO
≤≤ &
(
≤≤& '
)
≤≤' (
{
≥≥ 
Message
¥¥ 
=
¥¥ 
$str
¥¥ >
,
¥¥> ?
Result
µµ 
=
µµ 
null
µµ !
,
µµ! "
	IsSuccess
∂∂ 
=
∂∂ 
false
∂∂  %
,
∂∂% &

StatusCode
∑∑ 
=
∑∑  
$num
∑∑! $
}
∏∏ 
;
∏∏ 
}
ππ 
id
ªª 
.
ªª $
CourseSectionVersionId
ªª %
=
ªª& '*
editSectionDetailsVersionDto
ªª( D
.
ªªD E
courseSectionId
ªªE T
;
ªªT U
id
ºº 
.
ºº 
Name
ºº 
=
ºº *
editSectionDetailsVersionDto
ºº 2
?
ºº2 3
.
ºº3 4
name
ºº4 8
;
ºº8 9
_unitOfWork
øø 
.
øø -
SectionDetailsVersionRepository
øø 7
.
øø7 8
Update
øø8 >
(
øø> ?
id
øø? A
)
øøA B
;
øøB C
await
¿¿ 
_unitOfWork
¿¿ 
.
¿¿ 
	SaveAsync
¿¿ '
(
¿¿' (
)
¿¿( )
;
¿¿) *
return
¬¬ 
new
¬¬ 
ResponseDTO
¬¬ "
{
√√ 
Message
ƒƒ 
=
ƒƒ 
$str
ƒƒ <
,
ƒƒ< =
Result
≈≈ 
=
≈≈ 
id
≈≈ 
,
≈≈ 
	IsSuccess
∆∆ 
=
∆∆ 
true
∆∆  
,
∆∆  !

StatusCode
«« 
=
«« 
$num
««  
}
»» 
;
»» 
}
…… 	
catch
   
(
   
	Exception
   
e
   
)
   
{
ÀÀ 	
return
ÃÃ 
new
ÃÃ 
ResponseDTO
ÃÃ "
{
ÕÕ 
Message
ŒŒ 
=
ŒŒ 
e
ŒŒ 
.
ŒŒ 
Message
ŒŒ #
,
ŒŒ# $
Result
œœ 
=
œœ 
null
œœ 
,
œœ 
	IsSuccess
–– 
=
–– 
false
–– !
,
––! "

StatusCode
—— 
=
—— 
$num
——  
}
““ 
;
““ 
}
”” 	
}
‘‘ 
public
÷÷ 

async
÷÷ 
Task
÷÷ 
<
÷÷ 
ResponseDTO
÷÷ !
>
÷÷! ")
RemoveSectionDetailsVersion
÷÷# >
(
◊◊ 
ClaimsPrincipal
ÿÿ 
User
ÿÿ 
,
ÿÿ 
Guid
ŸŸ 
	detailsId
ŸŸ 
)
⁄⁄ 
{
€€ 
try
‹‹ 
{
›› 	
var
ﬁﬁ 
Id
ﬁﬁ 
=
ﬁﬁ 
await
ﬁﬁ 
_unitOfWork
ﬁﬁ &
.
ﬁﬁ& '-
SectionDetailsVersionRepository
ﬁﬁ' F
.
ﬁﬁF G
GetAsync
ﬁﬁG O
(
ﬁﬁO P
i
ﬁﬁP Q
=>
ﬁﬁR T
i
ﬁﬁU V
.
ﬁﬁV W
Id
ﬁﬁW Y
==
ﬁﬁZ \
	detailsId
ﬁﬁ] f
)
ﬁﬁf g
;
ﬁﬁg h
if
ﬂﬂ 
(
ﬂﬂ 
Id
ﬂﬂ 
==
ﬂﬂ 
null
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
return
·· 
new
·· 
ResponseDTO
·· &
(
··& '
)
··' (
{
‚‚ 
Message
„„ 
=
„„ 
$str
„„ >
,
„„> ?
Result
‰‰ 
=
‰‰ 
null
‰‰ !
,
‰‰! "
	IsSuccess
ÂÂ 
=
ÂÂ 
false
ÂÂ  %
,
ÂÂ% &

StatusCode
ÊÊ 
=
ÊÊ  
$num
ÊÊ! $
}
ÁÁ 
;
ÁÁ 
}
ËË 
_unitOfWork
ÎÎ 
.
ÎÎ -
SectionDetailsVersionRepository
ÎÎ 7
.
ÎÎ7 8
Remove
ÎÎ8 >
(
ÎÎ> ?
Id
ÎÎ? A
)
ÎÎA B
;
ÎÎB C
await
ÏÏ 
_unitOfWork
ÏÏ 
.
ÏÏ 
	SaveAsync
ÏÏ '
(
ÏÏ' (
)
ÏÏ( )
;
ÏÏ) *
return
ÓÓ 
new
ÓÓ 
ResponseDTO
ÓÓ "
(
ÓÓ" #
)
ÓÓ# $
{
ÔÔ 
Message
 
=
 
$str
 E
,
E F
Result
ÒÒ 
=
ÒÒ 
null
ÒÒ 
,
ÒÒ 
	IsSuccess
ÚÚ 
=
ÚÚ 
true
ÚÚ  
,
ÚÚ  !

StatusCode
ÛÛ 
=
ÛÛ 
$num
ÛÛ  
}
ÙÙ 
;
ÙÙ 
}
ıı 	
catch
ˆˆ 
(
ˆˆ 
	Exception
ˆˆ 
e
ˆˆ 
)
ˆˆ 
{
˜˜ 	
return
¯¯ 
new
¯¯ 
ResponseDTO
¯¯ "
{
˘˘ 
Message
˙˙ 
=
˙˙ 
e
˙˙ 
.
˙˙ 
Message
˙˙ #
,
˙˙# $
Result
˚˚ 
=
˚˚ 
null
˚˚ 
,
˚˚ 
	IsSuccess
¸¸ 
=
¸¸ 
false
¸¸ !
,
¸¸! "

StatusCode
˝˝ 
=
˝˝ 
$num
˝˝  
}
˛˛ 
;
˛˛ 
}
ˇˇ 	
}
ÄÄ 
public
ÇÇ 

async
ÇÇ 
Task
ÇÇ 
<
ÇÇ 
ResponseDTO
ÇÇ !
>
ÇÇ! "0
"UploadSectionDetailsVersionContent
ÇÇ# E
(
ÉÉ 
ClaimsPrincipal
ÑÑ 
User
ÑÑ 
,
ÑÑ 
Guid
ÖÖ 
	detailsId
ÖÖ 
,
ÖÖ 3
%UploadSectionDetailsVersionContentDTO
ÜÜ -3
%uploadSectionDetailsVersionContentDto
ÜÜ. S
)
áá 
{
àà 
try
ââ 
{
ää 	
if
åå 
(
åå 3
%uploadSectionDetailsVersionContentDto
åå 5
.
åå5 6
File
åå6 :
==
åå; =
null
åå> B
)
ååB C
{
çç 
return
éé 
new
éé 
ResponseDTO
éé &
(
éé& '
)
éé' (
{
èè 
	IsSuccess
êê 
=
êê 
false
êê  %
,
êê% &

StatusCode
ëë 
=
ëë  
$num
ëë! $
,
ëë$ %
Message
íí 
=
íí 
$str
íí 1
}
ìì 
;
ìì 
}
îî 
var
ññ 
fileExtension
ññ 
=
ññ 
Path
ññ  $
.
ññ$ %
GetExtension
ññ% 1
(
ññ1 23
%uploadSectionDetailsVersionContentDto
ññ2 W
.
ññW X
File
ññX \
.
ññ\ ]
FileName
ññ] e
)
ññe f
.
ññf g
ToLower
ññg n
(
ññn o
)
ñño p
;
ññp q
string
óó 
[
óó 
]
óó 
allowedExtensions
óó &
=
óó' (
{
óó) *
$str
óó+ 2
,
óó2 3
$str
óó4 :
,
óó: ;
$str
óó< B
,
óóB C
$str
óóD J
}
óóK L
;
óóL M
if
ôô 
(
ôô 
!
ôô 
allowedExtensions
ôô "
.
ôô" #
Contains
ôô# +
(
ôô+ ,
fileExtension
ôô, 9
)
ôô9 :
)
ôô: ;
{
öö 
return
õõ 
new
õõ 
ResponseDTO
õõ &
(
õõ& '
)
õõ' (
{
úú 
	IsSuccess
ùù 
=
ùù 
false
ùù  %
,
ùù% &

StatusCode
ûû 
=
ûû  
$num
ûû! $
,
ûû$ %
Message
üü 
=
üü 
$str
üü a
}
†† 
;
†† 
}
°° 
var
§§ 
userId
§§ 
=
§§ 
User
§§ 
.
§§ 
Claims
§§ $
.
§§$ %
FirstOrDefault
§§% 3
(
§§3 4
x
§§4 5
=>
§§6 8
x
§§9 :
.
§§: ;
Type
§§; ?
==
§§@ B

ClaimTypes
§§C M
.
§§M N
NameIdentifier
§§N \
)
§§\ ]
?
§§] ^
.
§§^ _
Value
§§_ d
;
§§d e
if
•• 
(
•• 
string
•• 
.
•• 
IsNullOrEmpty
•• $
(
••$ %
userId
••% +
)
••+ ,
)
••, -
{
¶¶ 
return
ßß 
new
ßß 
ResponseDTO
ßß &
(
ßß& '
)
ßß' (
{
®® 
	IsSuccess
©© 
=
©© 
false
©©  %
,
©©% &

StatusCode
™™ 
=
™™  
$num
™™! $
,
™™$ %
Message
´´ 
=
´´ 
$str
´´ :
}
¨¨ 
;
¨¨ 
}
≠≠ 
var
∞∞ 

instructor
∞∞ 
=
∞∞ 
await
∞∞ "
_unitOfWork
∞∞# .
.
∞∞. /"
InstructorRepository
∞∞/ C
.
∞∞C D
GetAsync
∞∞D L
(
∞∞L M
x
∞∞M N
=>
∞∞O Q
x
∞∞R S
.
∞∞S T
UserId
∞∞T Z
==
∞∞[ ]
userId
∞∞^ d
)
∞∞d e
;
∞∞e f
if
±± 
(
±± 

instructor
±± 
==
±± 
null
±± "
)
±±" #
{
≤≤ 
return
≥≥ 
new
≥≥ 
ResponseDTO
≥≥ &
(
≥≥& '
)
≥≥' (
{
¥¥ 
	IsSuccess
µµ 
=
µµ 
false
µµ  %
,
µµ% &

StatusCode
∂∂ 
=
∂∂  
$num
∂∂! $
,
∂∂$ %
Message
∑∑ 
=
∑∑ 
$str
∑∑ :
}
∏∏ 
;
∏∏ 
}
ππ 
var
ΩΩ 
courseDetail
ΩΩ 
=
ΩΩ 
await
ΩΩ $
_unitOfWork
ΩΩ% 0
.
ΩΩ0 1-
SectionDetailsVersionRepository
ΩΩ1 P
.
ΩΩP Q
GetAsync
ΩΩQ Y
(
ΩΩY Z
x
ΩΩZ [
=>
ΩΩ\ ^
x
ææ 
.
ææ 
Id
ææ 
==
ææ 
	detailsId
ææ !
)
ææ! "
;
ææ" #
if
øø 
(
øø 
courseDetail
øø 
==
øø 
null
øø  $
)
øø$ %
{
¿¿ 
return
¡¡ 
new
¡¡ 
ResponseDTO
¡¡ &
(
¡¡& '
)
¡¡' (
{
¬¬ 
	IsSuccess
√√ 
=
√√ 
false
√√  %
,
√√% &

StatusCode
ƒƒ 
=
ƒƒ  
$num
ƒƒ! $
,
ƒƒ$ %
Message
≈≈ 
=
≈≈ 
$str
≈≈ I
}
∆∆ 
;
∆∆ 
}
«« 
var
…… 
courseSection
…… 
=
…… 
await
   
_unitOfWork
   !
.
  ! ",
CourseSectionVersionRepository
  " @
.
  @ A
GetAsync
  A I
(
  I J
x
  J K
=>
  L N
x
ÀÀ 
.
ÀÀ 
Id
ÀÀ 
==
ÀÀ 
courseDetail
ÀÀ (
.
ÀÀ( )$
CourseSectionVersionId
ÀÀ) ?
)
ÀÀ? @
;
ÀÀ@ A
if
ÃÃ 
(
ÃÃ 
courseSection
ÃÃ 
==
ÃÃ  
null
ÃÃ! %
)
ÃÃ% &
{
ÕÕ 
return
ŒŒ 
new
ŒŒ 
ResponseDTO
ŒŒ &
(
ŒŒ& '
)
ŒŒ' (
{
œœ 
	IsSuccess
–– 
=
–– 
false
––  %
,
––% &

StatusCode
—— 
=
——  
$num
——! $
,
——$ %
Message
““ 
=
““ 
$str
““ A
}
”” 
;
”” 
}
‘‘ 
var
÷÷ 
courseVersion
÷÷ 
=
÷÷ 
await
◊◊ 
_unitOfWork
◊◊ !
.
◊◊! "%
CourseVersionRepository
◊◊" 9
.
◊◊9 :
GetAsync
◊◊: B
(
◊◊B C
x
◊◊C D
=>
◊◊E G
x
◊◊H I
.
◊◊I J
Id
◊◊J L
==
◊◊M O
courseSection
◊◊P ]
.
◊◊] ^
CourseVersionId
◊◊^ m
)
◊◊m n
;
◊◊n o
if
ÿÿ 
(
ÿÿ 
courseVersion
ÿÿ 
==
ÿÿ  
null
ÿÿ! %
)
ÿÿ% &
{
ŸŸ 
return
⁄⁄ 
new
⁄⁄ 
ResponseDTO
⁄⁄ &
(
⁄⁄& '
)
⁄⁄' (
{
€€ 
	IsSuccess
‹‹ 
=
‹‹ 
false
‹‹  %
,
‹‹% &

StatusCode
›› 
=
››  
$num
››! $
,
››$ %
Message
ﬁﬁ 
=
ﬁﬁ 
$str
ﬁﬁ 9
}
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 
var
„„ 
courseId
„„ 
=
„„ 
courseVersion
„„ (
.
„„( )
CourseId
„„) 1
;
„„1 2
ResponseDTO
ÊÊ 
responseDto
ÊÊ #
;
ÊÊ# $
if
ÁÁ 
(
ÁÁ 
fileExtension
ÁÁ 
==
ÁÁ  
$str
ÁÁ! '
||
ÁÁ( *
fileExtension
ÁÁ+ 8
==
ÁÁ9 ;
$str
ÁÁ< B
)
ÁÁB C
{
ËË 
responseDto
ÈÈ 
=
ÈÈ 
await
ÈÈ #
_firebaseService
ÈÈ$ 4
.
ÈÈ4 5
UploadVideo
ÈÈ5 @
(
ÈÈ@ A3
%uploadSectionDetailsVersionContentDto
ÈÈA f
.
ÈÈf g
File
ÈÈg k
,
ÈÈk l
courseId
ÈÈm u
)
ÈÈu v
;
ÈÈv w
courseDetail
ÎÎ 
.
ÎÎ 
VideoUrl
ÎÎ %
=
ÎÎ& '
responseDto
ÎÎ( 3
.
ÎÎ3 4
Result
ÎÎ4 :
?
ÎÎ: ;
.
ÎÎ; <
ToString
ÎÎ< D
(
ÎÎD E
)
ÎÎE F
;
ÎÎF G
}
ÏÏ 
else
ÌÌ 
if
ÌÌ 
(
ÌÌ 
fileExtension
ÌÌ "
==
ÌÌ# %
$str
ÌÌ& ,
)
ÌÌ, -
{
ÓÓ 
responseDto
ÔÔ 
=
ÔÔ 
await
ÔÔ #
_firebaseService
ÔÔ$ 4
.
ÔÔ4 5
UploadSlide
ÔÔ5 @
(
ÔÔ@ A3
%uploadSectionDetailsVersionContentDto
ÔÔA f
.
ÔÔf g
File
ÔÔg k
,
ÔÔk l
courseId
ÔÔm u
)
ÔÔu v
;
ÔÔv w
courseDetail
ÒÒ 
.
ÒÒ 
SlideUrl
ÒÒ %
=
ÒÒ& '
responseDto
ÒÒ( 3
.
ÒÒ3 4
Result
ÒÒ4 :
?
ÒÒ: ;
.
ÒÒ; <
ToString
ÒÒ< D
(
ÒÒD E
)
ÒÒE F
;
ÒÒF G
}
ÚÚ 
else
ÛÛ 
{
ÙÙ 
responseDto
ıı 
=
ıı 
await
ıı #
_firebaseService
ıı$ 4
.
ıı4 5
	UploadDoc
ıı5 >
(
ıı> ?3
%uploadSectionDetailsVersionContentDto
ıı? d
.
ııd e
File
ııe i
,
ııi j
courseId
ıık s
)
ııs t
;
ııt u
courseDetail
˜˜ 
.
˜˜ 
DocsUrl
˜˜ $
=
˜˜% &
responseDto
˜˜' 2
.
˜˜2 3
Result
˜˜3 9
?
˜˜9 :
.
˜˜: ;
ToString
˜˜; C
(
˜˜C D
)
˜˜D E
;
˜˜E F
}
¯¯ 
if
˙˙ 
(
˙˙ 
!
˙˙ 
responseDto
˙˙ 
.
˙˙ 
	IsSuccess
˙˙ &
)
˙˙& '
{
˚˚ 
return
¸¸ 
new
¸¸ 
ResponseDTO
¸¸ &
(
¸¸& '
)
¸¸' (
{
˝˝ 
	IsSuccess
˛˛ 
=
˛˛ 
false
˛˛  %
,
˛˛% &

StatusCode
ˇˇ 
=
ˇˇ  
$num
ˇˇ! $
,
ˇˇ$ %
Message
ÄÄ 
=
ÄÄ 
$str
ÄÄ 3
}
ÅÅ 
;
ÅÅ 
}
ÇÇ 
courseDetail
ÖÖ 
.
ÖÖ #
UpdateTypeDescription
ÖÖ .
(
ÖÖ. /
)
ÖÖ/ 0
;
ÖÖ0 1
_unitOfWork
áá 
.
áá -
SectionDetailsVersionRepository
áá 7
.
áá7 8
Update
áá8 >
(
áá> ?
courseDetail
áá? K
)
ááK L
;
ááL M
await
àà 
_unitOfWork
àà 
.
àà 
	SaveAsync
àà '
(
àà' (
)
àà( )
;
àà) *
return
ää 
new
ää 
ResponseDTO
ää "
(
ää" #
)
ää# $
{
ãã 
	IsSuccess
åå 
=
åå 
true
åå  
,
åå  !

StatusCode
çç 
=
çç 
$num
çç  
,
çç  !
Result
éé 
=
éé 
responseDto
éé $
.
éé$ %
Result
éé% +
,
éé+ ,
Message
èè 
=
èè 
$str
èè 4
}
êê 
;
êê 
}
ëë 	
catch
íí 
(
íí 
	Exception
íí 
e
íí 
)
íí 
{
ìì 	
return
îî 
new
îî 
ResponseDTO
îî "
(
îî" #
)
îî# $
{
ïï 
	IsSuccess
ññ 
=
ññ 
false
ññ !
,
ññ! "

StatusCode
óó 
=
óó 
$num
óó  
,
óó  !
Result
òò 
=
òò 
null
òò 
,
òò 
Message
ôô 
=
ôô 
e
ôô 
.
ôô 
Message
ôô #
}
öö 
;
öö 
}
õõ 	
}
úú 
public
ûû 

async
ûû 
Task
ûû 
<
ûû  
ContentResponseDTO
ûû (
>
ûû( )1
#DisplaySectionDetailsVersionContent
ûû* M
(
üü 
Guid
†† %
sectionDetailsVersionId
†† $
,
††$ %
string
°° 
userId
°° 
,
°° 
string
¢¢ 
type
¢¢ 
)
££ 
{
§§ 
try
•• 
{
¶¶ 	
var
ßß 
user
ßß 
=
ßß 
await
ßß 
_userManager
ßß )
.
ßß) *
FindByIdAsync
ßß* 7
(
ßß7 8
userId
ßß8 >
)
ßß> ?
;
ßß? @
if
©© 
(
©© %
sectionDetailsVersionId
©© '
.
©©' (
ToString
©©( 0
(
©©0 1
)
©©1 2
.
©©2 3
IsNullOrEmpty
©©3 @
(
©©@ A
)
©©A B
)
©©B C
{
™™ 
throw
´´ 
new
´´ 
	Exception
´´ #
(
´´# $
$str
´´$ D
)
´´D E
;
´´E F
}
¨¨ 
if
ÆÆ 
(
ÆÆ 
type
ÆÆ 
.
ÆÆ 
IsNullOrEmpty
ÆÆ "
(
ÆÆ" #
)
ÆÆ# $
)
ÆÆ$ %
{
ØØ 
throw
∞∞ 
new
∞∞ 
	Exception
∞∞ #
(
∞∞# $
$str
∞∞$ ;
)
∞∞; <
;
∞∞< =
}
±± 
var
≥≥ "
sectionDetailVersion
≥≥ $
=
≥≥% &
await
≥≥' ,
_unitOfWork
≥≥- 8
.
≥≥8 9-
SectionDetailsVersionRepository
≥≥9 X
.
¥¥ 
GetAsync
¥¥ 
(
¥¥ 
x
¥¥ 
=>
¥¥ 
x
¥¥  
.
¥¥  !
Id
¥¥! #
==
¥¥$ &%
sectionDetailsVersionId
¥¥' >
)
¥¥> ?
;
¥¥? @
if
∂∂ 
(
∂∂ "
sectionDetailVersion
∂∂ $
is
∂∂% '
null
∂∂( ,
)
∂∂, -
{
∑∑ 
throw
∏∏ 
new
∏∏ 
	Exception
∏∏ #
(
∏∏# $
$str
∏∏$ D
)
∏∏D E
;
∏∏E F
}
ππ 
var
ªª 
courseVersionId
ªª 
=
ªª  !
_unitOfWork
ªª" -
.
ªª- .,
CourseSectionVersionRepository
ªª. L
.
ºº 
GetAsync
ºº 
(
ºº 
x
ºº 
=>
ºº 
x
ºº  
.
ºº  !
Id
ºº! #
==
ºº$ &"
sectionDetailVersion
ºº' ;
.
ºº; <$
CourseSectionVersionId
ºº< R
)
ººR S
.
ΩΩ 

GetAwaiter
ΩΩ 
(
ΩΩ 
)
ΩΩ 
.
ææ 
	GetResult
ææ 
(
ææ 
)
ææ 
!
ææ 
.
øø 
CourseVersionId
øø  
;
øø  !
var
¡¡ 
courseId
¡¡ 
=
¡¡ 
_unitOfWork
¡¡ &
.
¡¡& '%
CourseVersionRepository
¡¡' >
.
¬¬ 
GetAsync
¬¬ 
(
¬¬ 
x
¬¬ 
=>
¬¬ 
x
¬¬  
.
¬¬  !
Id
¬¬! #
==
¬¬$ &
courseVersionId
¬¬' 6
)
¬¬6 7
.
√√ 

GetAwaiter
√√ 
(
√√ 
)
√√ 
.
ƒƒ 
	GetResult
ƒƒ 
(
ƒƒ 
)
ƒƒ 
!
ƒƒ 
.
≈≈ 
CourseId
≈≈ 
;
≈≈ 
var
«« 
role
«« 
=
«« 
await
«« 
_userManager
«« )
.
««) *
GetRolesAsync
««* 7
(
««7 8
user
««8 <
)
««< =
;
««= >
if
»» 
(
»» 
role
»» 
.
»» 
Contains
»» 
(
»» 
StaticUserRoles
»» -
.
»»- .
Student
»». 5
)
»»5 6
)
»»6 7
{
…… 
var
   
student
   
=
   
await
   #
_unitOfWork
  $ /
.
  / 0
StudentRepository
  0 A
.
  A B
GetAsync
  B J
(
  J K
x
  K L
=>
  M O
x
  P Q
.
  Q R
UserId
  R X
==
  Y [
userId
  \ b
)
  b c
;
  c d
var
ÀÀ 
studentCourse
ÀÀ !
=
ÀÀ" #
await
ÀÀ$ )
_unitOfWork
ÀÀ* 5
.
ÀÀ5 6%
StudentCourseRepository
ÀÀ6 M
.
ÃÃ 
GetAsync
ÃÃ 
(
ÃÃ 
x
ÃÃ 
=>
ÃÃ  "
x
ÃÃ# $
.
ÃÃ$ %
CourseId
ÃÃ% -
==
ÃÃ. 0
courseId
ÃÃ1 9
&&
ÃÃ: <
x
ÃÃ= >
.
ÃÃ> ?
	StudentId
ÃÃ? H
==
ÃÃI K
student
ÃÃL S
.
ÃÃS T
	StudentId
ÃÃT ]
)
ÃÃ] ^
;
ÃÃ^ _
if
ÕÕ 
(
ÕÕ 
studentCourse
ÕÕ !
is
ÕÕ" $
null
ÕÕ% )
)
ÕÕ) *
{
ŒŒ 
throw
œœ 
new
œœ 
	Exception
œœ '
(
œœ' (
$str
œœ( J
)
œœJ K
;
œœK L
}
–– 
}
—— 
if
”” 
(
”” 
role
”” 
.
”” 
Contains
”” 
(
”” 
StaticUserRoles
”” -
.
””- .

Instructor
””. 8
)
””8 9
)
””9 :
{
‘‘ 
var
’’ 

instructor
’’ 
=
’’  
await
’’! &
_unitOfWork
’’' 2
.
’’2 3"
InstructorRepository
’’3 G
.
’’G H
GetAsync
’’H P
(
’’P Q
x
’’Q R
=>
’’S U
x
’’V W
.
’’W X
UserId
’’X ^
==
’’_ a
userId
’’b h
)
’’h i
;
’’i j
var
÷÷ 
course
÷÷ 
=
÷÷ 
await
÷÷ "
_unitOfWork
÷÷# .
.
÷÷. /
CourseRepository
÷÷/ ?
.
÷÷? @
GetAsync
÷÷@ H
(
÷÷H I
x
÷÷I J
=>
÷÷K M
x
÷÷N O
.
÷÷O P
Id
÷÷P R
==
÷÷S U
courseId
÷÷V ^
)
÷÷^ _
;
÷÷_ `
if
ÿÿ 
(
ÿÿ 
course
ÿÿ 
?
ÿÿ 
.
ÿÿ 
InstructorId
ÿÿ (
!=
ÿÿ) +

instructor
ÿÿ, 6
?
ÿÿ6 7
.
ÿÿ7 8
InstructorId
ÿÿ8 D
)
ÿÿD E
{
ŸŸ 
throw
⁄⁄ 
new
⁄⁄ 
	Exception
⁄⁄ '
(
⁄⁄' (
$str
⁄⁄( M
)
⁄⁄M N
;
⁄⁄N O
}
€€ 
}
‹‹ 
var
ﬁﬁ 
stream
ﬁﬁ 
=
ﬁﬁ 
new
ﬁﬁ 
MemoryStream
ﬁﬁ )
(
ﬁﬁ) *
)
ﬁﬁ* +
;
ﬁﬁ+ ,
var
ﬂﬂ 
contentType
ﬂﬂ 
=
ﬂﬂ 
$str
ﬂﬂ 7
;
ﬂﬂ7 8
string
‡‡ 
?
‡‡ 
filePath
‡‡ 
=
‡‡ 
null
‡‡ #
;
‡‡# $
switch
‚‚ 
(
‚‚ 
type
‚‚ 
.
‚‚ 
ToLower
‚‚  
(
‚‚  !
)
‚‚! "
)
‚‚" #
{
„„ 
case
‰‰ 
$str
‰‰ 
:
‰‰ 
{
ÂÂ 
filePath
ÊÊ 
=
ÊÊ "
sectionDetailVersion
ÊÊ 3
.
ÊÊ3 4
VideoUrl
ÊÊ4 <
;
ÊÊ< =
if
ËË 
(
ËË 
filePath
ËË  
==
ËË! #
null
ËË$ (
)
ËË( )
{
ÈÈ 
throw
ÍÍ 
new
ÍÍ !
	Exception
ÍÍ" +
(
ÍÍ+ ,
$str
ÍÍ, C
)
ÍÍC D
;
ÍÍD E
}
ÎÎ 
stream
ÌÌ 
=
ÌÌ 
await
ÌÌ "
_firebaseService
ÌÌ# 3
.
ÌÌ3 4

GetContent
ÌÌ4 >
(
ÌÌ> ?
filePath
ÌÌ? G
)
ÌÌG H
;
ÌÌH I
if
ÔÔ 
(
ÔÔ 
filePath
ÔÔ  
.
ÔÔ  !
EndsWith
ÔÔ! )
(
ÔÔ) *
$str
ÔÔ* 0
)
ÔÔ0 1
)
ÔÔ1 2
{
 
contentType
ÒÒ #
=
ÒÒ$ %"
StaticFileExtensions
ÒÒ& :
.
ÒÒ: ;
Mp4
ÒÒ; >
;
ÒÒ> ?
}
ÚÚ 
if
ÙÙ 
(
ÙÙ 
filePath
ÙÙ  
.
ÙÙ  !
EndsWith
ÙÙ! )
(
ÙÙ) *
$str
ÙÙ* 0
)
ÙÙ0 1
)
ÙÙ1 2
{
ıı 
contentType
ˆˆ #
=
ˆˆ$ %"
StaticFileExtensions
ˆˆ& :
.
ˆˆ: ;
Mov
ˆˆ; >
;
ˆˆ> ?
}
˜˜ 
break
˘˘ 
;
˘˘ 
}
˙˙ 
case
˚˚ 
$str
˚˚ 
:
˚˚ 
{
¸¸ 
filePath
˝˝ 
=
˝˝ "
sectionDetailVersion
˝˝ 3
.
˝˝3 4
SlideUrl
˝˝4 <
;
˝˝< =
if
ˇˇ 
(
ˇˇ 
filePath
ˇˇ  
==
ˇˇ! #
null
ˇˇ$ (
)
ˇˇ( )
{
ÄÄ 
throw
ÅÅ 
new
ÅÅ !
	Exception
ÅÅ" +
(
ÅÅ+ ,
$str
ÅÅ, C
)
ÅÅC D
;
ÅÅD E
}
ÇÇ 
stream
ÑÑ 
=
ÑÑ 
await
ÑÑ "
_firebaseService
ÑÑ# 3
.
ÑÑ3 4

GetContent
ÑÑ4 >
(
ÑÑ> ?
filePath
ÑÑ? G
)
ÑÑG H
;
ÑÑH I
contentType
ÖÖ 
=
ÖÖ  !"
StaticFileExtensions
ÖÖ" 6
.
ÖÖ6 7
Pdf
ÖÖ7 :
;
ÖÖ: ;
break
ÜÜ 
;
ÜÜ 
}
áá 
case
àà 
$str
àà 
:
àà 
{
ââ 
filePath
ää 
=
ää "
sectionDetailVersion
ää 3
.
ää3 4
DocsUrl
ää4 ;
;
ää; <
if
åå 
(
åå 
filePath
åå  
==
åå! #
null
åå$ (
)
åå( )
{
çç 
throw
éé 
new
éé !
	Exception
éé" +
(
éé+ ,
$str
éé, C
)
ééC D
;
ééD E
}
èè 
stream
ëë 
=
ëë 
await
ëë "
_firebaseService
ëë# 3
.
ëë3 4

GetContent
ëë4 >
(
ëë> ?
filePath
ëë? G
)
ëëG H
;
ëëH I
contentType
íí 
=
íí  !"
StaticFileExtensions
íí" 6
.
íí6 7
Doc
íí7 :
;
íí: ;
break
îî 
;
îî 
}
ïï 
}
ññ 
if
òò 
(
òò 
stream
òò 
is
òò 
null
òò 
)
òò 
{
ôô 
throw
öö 
new
öö 
	Exception
öö #
(
öö# $
$str
öö$ F
)
ööF G
;
ööG H
}
õõ 
return
ûû 
new
ûû  
ContentResponseDTO
ûû )
(
ûû) *
)
ûû* +
{
üü 
Message
†† 
=
†† 
$str
†† 1
,
††1 2
Stream
°° 
=
°° 
stream
°° 
,
°°  
ContentType
¢¢ 
=
¢¢ 
contentType
¢¢ )
,
¢¢) *
FileName
££ 
=
££ 
Path
££ 
.
££  
GetFileName
££  +
(
££+ ,
filePath
££, 4
)
££4 5
}
§§ 
;
§§ 
}
•• 	
catch
¶¶ 
(
¶¶ 
	Exception
¶¶ 
e
¶¶ 
)
¶¶ 
{
ßß 	
return
®® 
new
®®  
ContentResponseDTO
®® )
(
®®) *
)
®®* +
{
©© 
ContentType
™™ 
=
™™ 
null
™™ "
,
™™" #
Message
´´ 
=
´´ 
e
´´ 
.
´´ 
Message
´´ #
,
´´# $
Stream
¨¨ 
=
¨¨ 
null
¨¨ 
}
≠≠ 
;
≠≠ 
}
ÆÆ 	
}
ØØ 
}∞∞ ´
eD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\RedisService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
RedisService 
: 
IRedisService )
{ 
private 
readonly "
IConnectionMultiplexer +
_redis, 2
;2 3
public

 

RedisService

 
(

 "
IConnectionMultiplexer

 .
redis

/ 4
)

4 5
{ 
_redis 
= 
redis 
; 
} 
public 

async 
Task 
< 
bool 
> 
StoreString '
(' (
string( .
key/ 2
,2 3
string4 :
value; @
)@ A
{ 
var 
cache 
= 
_redis 
. 
GetDatabase &
(& '
)' (
;( )
var 
result 
= 
await 
cache  
.  !
StringSetAsync! /
(/ 0
key0 3
,3 4
value5 :
): ;
;; <
return 
result 
; 
} 
public!! 

async!! 
Task!! 
<!! 
string!! 
>!! 
RetrieveString!! ,
(!!, -
string!!- 3
key!!4 7
)!!7 8
{"" 
var## 
cache## 
=## 
_redis## 
.## 
GetDatabase## &
(##& '
)##' (
;##( )
var$$ 
result$$ 
=$$ 
await$$ 
cache$$  
.$$  !
StringGetAsync$$! /
($$/ 0
key$$0 3
)$$3 4
;$$4 5
return%% 
result%% 
;%% 
}&& 
public-- 

async-- 
Task-- 
<-- 
bool-- 
>-- 
DeleteString-- (
(--( )
string--) /
key--0 3
)--3 4
{.. 
var// 
cache// 
=// 
_redis// 
.// 
GetDatabase// &
(//& '
)//' (
;//( )
var00 
result00 
=00 
await00 
cache00  
.00  !
KeyDeleteAsync00! /
(00/ 0
key000 3
)003 4
;004 5
return11 
result11 
;11 
}22 
}33 ÌU
gD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\PrivacyService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public		 
class		 
PrivacyService		 
:		 
IPrivacyService		 -
{

 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
IMapper 
_mapper $
;$ %
public 

PrivacyService 
( 
IUnitOfWork %

unitOfWork& 0
,0 1
IMapper2 9
mapper: @
)@ A
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; 
} 
public 

async 
Task 
< 
ResponseDTO !
>! "
GetPrivacies# /
(/ 0
)0 1
{ 
try 
{ 	
var 
	privacies 
= 
await !
_unitOfWork" -
.- .
PrivacyRepository. ?
.? @
GetAllAsync@ K
(K L
)L M
;M N
return 
new 
ResponseDTO "
{ 
	IsSuccess 
= 
true  
,  !
Message 
= 
$str 6
,6 7

StatusCode 
= 
$num  
,  !
Result 
= 
	privacies "
} 
; 
}   	
catch!! 
(!! 
	Exception!! 
ex!! 
)!! 
{"" 	
return## 
new## 
ResponseDTO## "
{$$ 
	IsSuccess%% 
=%% 
false%% !
,%%! "
Message&& 
=&& 
ex&& 
.&& 
Message&& $
,&&$ %

StatusCode'' 
='' 
$num''  
}(( 
;(( 
})) 	
}** 
public,, 

async,, 
Task,, 
<,, 
ResponseDTO,, !
>,,! "

GetPrivacy,,# -
(,,- .
Guid,,. 2
id,,3 5
),,5 6
{-- 
try.. 
{// 	
var00 
privacy00 
=00 
await00 
_unitOfWork00  +
.00+ ,
PrivacyRepository00, =
.00= >
GetAsync00> F
(00F G
p00G H
=>00I K
p00L M
.00M N
Id00N P
==00Q S
id00T V
)00V W
;00W X
if11 
(11 
privacy11 
==11 
null11 
)11  
{22 
return33 
new33 
ResponseDTO33 &
{44 
	IsSuccess55 
=55 
false55  %
,55% &
Message66 
=66 
$str66 8
,668 9

StatusCode77 
=77  
$num77! $
}88 
;88 
}99 
return:: 
new:: 
ResponseDTO:: "
{;; 
	IsSuccess<< 
=<< 
true<<  
,<<  !
Message== 
=== 
$str== ;
,==; <

StatusCode>> 
=>> 
$num>>  
,>>  !
Result?? 
=?? 
privacy??  
}@@ 
;@@ 
}AA 	
catchBB 
(BB 
	ExceptionBB 
exBB 
)BB 
{CC 	
returnDD 
newDD 
ResponseDTODD "
{EE 
	IsSuccessFF 
=FF 
falseFF !
,FF! "
MessageGG 
=GG 
exGG 
.GG 
MessageGG $
,GG$ %

StatusCodeHH 
=HH 
$numHH  
}II 
;II 
}JJ 	
}KK 
publicMM 

asyncMM 
TaskMM 
<MM 
ResponseDTOMM !
>MM! "
CreatePrivacyMM# 0
(MM0 1
CreatePrivacyDTOMM1 A

privacyDtoMMB L
)MML M
{NN 
tryOO 
{PP 	
varQQ 
privacyQQ 
=QQ 
_mapperQQ !
.QQ! "
MapQQ" %
<QQ% &
PrivacyQQ& -
>QQ- .
(QQ. /

privacyDtoQQ/ 9
)QQ9 :
;QQ: ;
privacyRR 
.RR 
IdRR 
=RR 
GuidRR 
.RR 
NewGuidRR %
(RR% &
)RR& '
;RR' (
privacySS 
.SS 
LastUpdatedSS 
=SS  !
DateTimeSS" *
.SS* +
NowSS+ .
;SS. /
awaitUU 
_unitOfWorkUU 
.UU 
PrivacyRepositoryUU /
.UU/ 0
AddAsyncUU0 8
(UU8 9
privacyUU9 @
)UU@ A
;UUA B
awaitVV 
_unitOfWorkVV 
.VV 
	SaveAsyncVV '
(VV' (
)VV( )
;VV) *
returnXX 
newXX 
ResponseDTOXX "
{YY 
	IsSuccessZZ 
=ZZ 
trueZZ  
,ZZ  !
Message[[ 
=[[ 
$str[[ ?
,[[? @

StatusCode\\ 
=\\ 
$num\\  
,\\  !
Result]] 
=]] 
privacy]]  
}^^ 
;^^ 
}__ 	
catch`` 
(`` 
	Exception`` 
ex`` 
)`` 
{aa 	
returnbb 
newbb 
ResponseDTObb "
{cc 
	IsSuccessdd 
=dd 
falsedd !
,dd! "
Messageee 
=ee 
exee 
.ee 
Messageee $
,ee$ %

StatusCodeff 
=ff 
$numff  
}gg 
;gg 
}hh 	
}ii 
publickk 

asynckk 
Taskkk 
<kk 
ResponseDTOkk !
>kk! "
UpdatePrivacykk# 0
(kk0 1
UpdatePrivacyDTOkk1 A

privacyDtokkB L
)kkL M
{ll 
trymm 
{nn 	
varoo 
privacyoo 
=oo 
awaitoo 
_unitOfWorkoo  +
.oo+ ,
PrivacyRepositoryoo, =
.oo= >
GetAsyncoo> F
(ooF G
pooG H
=>ooI K
pooL M
.ooM N
IdooN P
==ooQ S

privacyDtoooT ^
.oo^ _
Idoo_ a
)ooa b
;oob c
ifpp 
(pp 
privacypp 
==pp 
nullpp 
)pp  
{qq 
returnrr 
newrr 
ResponseDTOrr &
{ss 
	IsSuccesstt 
=tt 
falsett  %
,tt% &
Messageuu 
=uu 
$struu 8
,uu8 9

StatusCodevv 
=vv  
$numvv! $
}ww 
;ww 
}xx 
_mapperzz 
.zz 
Mapzz 
(zz 

privacyDtozz "
,zz" #
privacyzz$ +
)zz+ ,
;zz, -
privacy{{ 
.{{ 
LastUpdated{{ 
={{  !
DateTime{{" *
.{{* +
Now{{+ .
;{{. /
_unitOfWork}} 
.}} 
PrivacyRepository}} )
.}}) *
Update}}* 0
(}}0 1
privacy}}1 8
)}}8 9
;}}9 :
await~~ 
_unitOfWork~~ 
.~~ 
	SaveAsync~~ '
(~~' (
)~~( )
;~~) *
return
ÄÄ 
new
ÄÄ 
ResponseDTO
ÄÄ "
{
ÅÅ 
	IsSuccess
ÇÇ 
=
ÇÇ 
true
ÇÇ  
,
ÇÇ  !
Message
ÉÉ 
=
ÉÉ 
$str
ÉÉ ?
,
ÉÉ? @

StatusCode
ÑÑ 
=
ÑÑ 
$num
ÑÑ  
}
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
catch
áá 
(
áá 
	Exception
áá 
ex
áá 
)
áá 
{
àà 	
return
ââ 
new
ââ 
ResponseDTO
ââ "
{
ää 
	IsSuccess
ãã 
=
ãã 
false
ãã !
,
ãã! "
Message
åå 
=
åå 
ex
åå 
.
åå 
Message
åå $
,
åå$ %

StatusCode
çç 
=
çç 
$num
çç  
}
éé 
;
éé 
}
èè 	
}
êê 
public
íí 

async
íí 
Task
íí 
<
íí 
ResponseDTO
íí !
>
íí! "
DeletePrivacy
íí# 0
(
íí0 1
Guid
íí1 5
id
íí6 8
)
íí8 9
{
ìì 
try
îî 
{
ïï 	
var
ññ 
privacy
ññ 
=
ññ 
await
ññ 
_unitOfWork
ññ  +
.
ññ+ ,
PrivacyRepository
ññ, =
.
ññ= >
GetAsync
ññ> F
(
ññF G
p
ññG H
=>
ññI K
p
ññL M
.
ññM N
Id
ññN P
==
ññQ S
id
ññT V
)
ññV W
;
ññW X
if
óó 
(
óó 
privacy
óó 
==
óó 
null
óó 
)
óó  
{
òò 
return
ôô 
new
ôô 
ResponseDTO
ôô &
{
öö 
	IsSuccess
õõ 
=
õõ 
false
õõ  %
,
õõ% &
Message
úú 
=
úú 
$str
úú 8
,
úú8 9

StatusCode
ùù 
=
ùù  
$num
ùù! $
}
ûû 
;
ûû 
}
üü 
privacy
°° 
.
°° 
IsActive
°° 
=
°° 
false
°° $
;
°°$ %
await
¢¢ 
_unitOfWork
¢¢ 
.
¢¢ 
	SaveAsync
¢¢ '
(
¢¢' (
)
¢¢( )
;
¢¢) *
return
§§ 
new
§§ 
ResponseDTO
§§ "
{
•• 
	IsSuccess
¶¶ 
=
¶¶ 
true
¶¶  
,
¶¶  !
Message
ßß 
=
ßß 
$str
ßß ?
,
ßß? @

StatusCode
®® 
=
®® 
$num
®®  
}
©© 
;
©© 
}
™™ 	
catch
´´ 
(
´´ 
	Exception
´´ 
ex
´´ 
)
´´ 
{
¨¨ 	
return
≠≠ 
new
≠≠ 
ResponseDTO
≠≠ "
{
ÆÆ 
	IsSuccess
ØØ 
=
ØØ 
false
ØØ !
,
ØØ! "
Message
∞∞ 
=
∞∞ 
ex
∞∞ 
.
∞∞ 
Message
∞∞ $
,
∞∞$ %

StatusCode
±± 
=
±± 
$num
±±  
}
≤≤ 
;
≤≤ 
}
≥≥ 	
}
¥¥ 
}µµ ìô
gD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\PaymentService.cs
	namespace		 	
Cursus		
 
.		 
LMS		 
.		 
Service		 
.		 
Service		 $
;		$ %
public 
class 
PaymentService 
: 
IPaymentService -
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
IBalanceService $
_balanceService% 4
;4 5
private 
readonly 
ITransactionService (
_transactionService) <
;< =
private 
readonly 
IStripeService #
_stripeService$ 2
;2 3
public 

PaymentService 
( 
IUnitOfWork 

unitOfWork 
, 
IBalanceService 
balanceService &
,& '
ITransactionService 
transactionService .
,. /
IStripeService 
stripeService $
) 
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_balanceService 
= 
balanceService (
;( )
_transactionService 
= 
transactionService 0
;0 1
_stripeService 
= 
stripeService &
;& '
} 
public   

async   
Task   
<   
ResponseDTO   !
>  ! "+
UpdateAvailableBalanceByOrderId  # B
(  B C
Guid  C G
orderHeaderId  H U
)  U V
{!! 
try"" 
{## 	
var$$ 
ordersDetails$$ 
=$$ 
await%% 
_unitOfWork%% !
.%%! ""
OrderDetailsRepository%%" 8
.%%8 9
GetAllAsync%%9 D
(%%D E
x%%E F
=>%%G I
x%%J K
.%%K L
OrderHeaderId%%L Y
==%%Z \
orderHeaderId%%] j
)%%j k
;%%k l
foreach'' 
('' 
var'' 
orderDetails'' %
in''& (
ordersDetails'') 6
)''6 7
{(( 
var)) 
course)) 
=)) 
await)) "
_unitOfWork))# .
.)). /
CourseRepository))/ ?
.))? @
GetAsync))@ H
(** 
x++ 
=>++ 
x++ 
.++ 
Id++ 
==++  
orderDetails++! -
.++- .
CourseId++. 6
),, 
;,, 
var.. 

instructor.. 
=..  
await..! &
_unitOfWork..' 2
...2 3 
InstructorRepository..3 G
...G H
GetAsync..H P
(// 
x00 
=>00 
x00 
.00 
InstructorId00 '
==00( *
course00+ 1
.001 2
InstructorId002 >
)11 
;11 
await33 
_balanceService33 %
.33% &
UpsertBalance33& 3
(333 4
new44 
UpsertBalanceDTO44 (
(44( )
)44) *
{55 
Currency66  
=66! "
$str66# (
,66( )
AvailableBalance77 (
=77) *
orderDetails77+ 7
.777 8
CoursePrice778 C
,77C D
PayoutBalance88 %
=88& '
$num88( )
,88) *
UserId99 
=99  

instructor99! +
.99+ ,
UserId99, 2
}:: 
);; 
;;; 
await== 
_transactionService== )
.==) *
CreateTransaction==* ;
(>> 
new??  
CreateTransactionDTO?? ,
(??, -
)??- .
{@@ 
UserIdAA 
=AA  

instructorAA! +
.AA+ ,
UserIdAA, 2
,AA2 3
AmountBB 
=BB  
orderDetailsBB! -
.BB- .
CoursePriceBB. 9
,BB9 :
TypeCC 
=CC 

StaticEnumCC )
.CC) *
TransactionTypeCC* 9
.CC9 :
IncomeCC: @
,CC@ A
}DD 
)EE 
;EE 
}FF 
returnHH 
newHH 
ResponseDTOHH "
(HH" #
)HH# $
{II 
MessageJJ 
=JJ 
$strJJ 7
,JJ7 8
	IsSuccessKK 
=KK 
trueKK  
,KK  !

StatusCodeLL 
=LL 
$numLL  
,LL  !
ResultMM 
=MM 
nullMM 
}NN 
;NN 
}OO 	
catchPP 
(PP 
	ExceptionPP 
ePP 
)PP 
{QQ 	
returnRR 
newRR 
ResponseDTORR "
(RR" #
)RR# $
{SS 
MessageTT 
=TT 
eTT 
.TT 
MessageTT #
,TT# $
	IsSuccessUU 
=UU 
falseUU !
,UU! "

StatusCodeVV 
=VV 
$numVV  
,VV  !
ResultWW 
=WW 
nullWW 
}XX 
;XX 
}YY 	
}ZZ 
public\\ 

async\\ 
Task\\ 
<\\ 
ResponseDTO\\ !
>\\! "(
CreateStripeConnectedAccount\\# ?
(]] 
ClaimsPrincipal^^ 
User^^ 
,^^ +
CreateStripeConnectedAccountDTO__ '+
createStripeConnectedAccountDto__( G
)`` 
{aa 
trybb 
{cc 	
vardd 
userIddd 
=dd 
Userdd 
.dd 
Claimsdd $
.dd$ %
FirstOrDefaultdd% 3
(dd3 4
xdd4 5
=>dd6 8
xdd9 :
.dd: ;
Typedd; ?
==dd@ B

ClaimTypesddC M
.ddM N
NameIdentifierddN \
)dd\ ]
?dd] ^
.dd^ _
Valuedd_ d
;ddd e
varee 
useree 
=ee 
awaitee 
_unitOfWorkee (
.ee( )!
UserManagerRepositoryee) >
.ee> ?
FindByIdAsyncee? L
(eeL M
userIdeeM S
)eeS T
;eeT U
vargg 

instructorgg 
=gg 
awaitgg "
_unitOfWorkgg# .
.gg. / 
InstructorRepositorygg/ C
.ggC D
GetAsyncggD L
(ggL M
xggM N
=>ggO Q
xggR S
.ggS T
UserIdggT Z
==gg[ ]
usergg^ b
.ggb c
Idggc e
)gge f
;ggf g
ifii 
(ii 

instructorii 
isii 
nullii "
)ii" #
{jj 
returnkk 
newkk 
ResponseDTOkk &
(kk& '
)kk' (
{ll 
Messagemm 
=mm 
$strmm 8
,mm8 9
	IsSuccessnn 
=nn 
falsenn  %
,nn% &

StatusCodeoo 
=oo  
$numoo! $
,oo$ %
Resultpp 
=pp 
nullpp !
}qq 
;qq 
}rr 
iftt 
(tt 

instructortt 
.tt 

IsAcceptedtt %
istt& (
falsett) .
ortt/ 1
nulltt2 6
)tt6 7
{uu 
returnvv 
newvv 
ResponseDTOvv &
(vv& '
)vv' (
{ww 
	IsSuccessxx 
=xx 
falsexx  %
,xx% &

StatusCodeyy 
=yy  
$numyy! $
,yy$ %
Resultzz 
=zz 
nullzz !
,zz! "
Message{{ 
={{ 
$str{{ Q
}|| 
;|| 
}}} 
if 
( 
! 

instructor 
. 
StripeAccountId +
.+ ,
IsNullOrEmpty, 9
(9 :
): ;
); <
{
ÄÄ 
return
ÅÅ 
new
ÅÅ 
ResponseDTO
ÅÅ &
(
ÅÅ& '
)
ÅÅ' (
{
ÇÇ 
Message
ÉÉ 
=
ÉÉ 
$str
ÉÉ G
,
ÉÉG H
	IsSuccess
ÑÑ 
=
ÑÑ 
false
ÑÑ  %
,
ÑÑ% &

StatusCode
ÖÖ 
=
ÖÖ  
$num
ÖÖ! $
,
ÖÖ$ %
Result
ÜÜ 
=
ÜÜ 
null
ÜÜ !
}
áá 
;
áá 
}
àà -
createStripeConnectedAccountDto
ää +
.
ää+ ,
Email
ää, 1
=
ää2 3
user
ää4 8
.
ää8 9
Email
ää9 >
;
ää> ?
var
åå 
responseDto
åå 
=
åå 
await
åå #
_stripeService
åå$ 2
.
åå2 3$
CreateConnectedAccount
åå3 I
(
ååI J-
createStripeConnectedAccountDto
ååJ i
)
ååi j
;
ååj k
if
éé 
(
éé 
responseDto
éé 
.
éé 

StatusCode
éé &
==
éé' )
$num
éé* -
)
éé- .
{
èè 
return
êê 
responseDto
êê "
;
êê" #
}
ëë 
var
ìì 
result
ìì 
=
ìì 
(
ìì /
!ResponseStripeConnectedAccountDTO
ìì ;
)
ìì; <
responseDto
ìì< G
.
ììG H
Result
ììH N
!
ììN O
;
ììO P

instructor
îî 
.
îî 
StripeAccountId
îî &
=
îî' (
result
îî) /
.
îî/ 0
	AccountId
îî0 9
;
îî9 :
await
ïï 
_unitOfWork
ïï 
.
ïï 
	SaveAsync
ïï '
(
ïï' (
)
ïï( )
;
ïï) *
return
óó 
responseDto
óó 
;
óó 
}
òò 	
catch
ôô 
(
ôô 
	Exception
ôô 
e
ôô 
)
ôô 
{
öö 	
Console
õõ 
.
õõ 
	WriteLine
õõ 
(
õõ 
e
õõ 
)
õõ  
;
õõ  !
throw
úú 
;
úú 
}
ùù 	
}
ûû 
public
†† 

async
†† 
Task
†† 
<
†† 
ResponseDTO
†† !
>
††! ""
CreateStripeTransfer
††# 7
(
††7 8%
CreateStripeTransferDTO
††8 O%
createStripeTransferDto
††P g
)
††g h
{
°° 
try
¢¢ 
{
££ 	
var
§§ 

instructor
§§ 
=
§§ 
await
•• 
_unitOfWork
•• !
.
••! ""
InstructorRepository
••" 6
.
••6 7
GetAsync
••7 ?
(
••? @
x
••@ A
=>
••B D
x
••E F
.
••F G
UserId
••G M
==
••N P%
createStripeTransferDto
••Q h
.
••h i
UserId
••i o
)
••o p
;
••p q
if
ßß 
(
ßß 

instructor
ßß 
is
ßß 
null
ßß "
)
ßß" #
{
®® 
return
©© 
new
©© 
ResponseDTO
©© &
(
©©& '
)
©©' (
{
™™ 
Message
´´ 
=
´´ 
$str
´´ 8
,
´´8 9
	IsSuccess
¨¨ 
=
¨¨ 
false
¨¨  %
,
¨¨% &

StatusCode
≠≠ 
=
≠≠  
$num
≠≠! $
,
≠≠$ %
Result
ÆÆ 
=
ÆÆ %
createStripeTransferDto
ÆÆ 4
}
ØØ 
;
ØØ 
}
∞∞ %
createStripeTransferDto
≤≤ #
.
≤≤# $ 
ConnectedAccountId
≤≤$ 6
=
≤≤7 8

instructor
≤≤9 C
?
≤≤C D
.
≤≤D E
StripeAccountId
≤≤E T
;
≤≤T U
var
¥¥ 
responseDto
¥¥ 
=
¥¥ 
await
¥¥ #
_stripeService
¥¥$ 2
.
¥¥2 3
CreateTransfer
¥¥3 A
(
¥¥A B%
createStripeTransferDto
¥¥B Y
)
¥¥Y Z
;
¥¥Z [
if
∂∂ 
(
∂∂ 
responseDto
∂∂ 
.
∂∂ 

StatusCode
∂∂ &
!=
∂∂' )
$num
∂∂* -
)
∂∂- .
return
∂∂/ 5
responseDto
∂∂6 A
;
∂∂A B
await
∏∏ 
_balanceService
∏∏ !
.
∏∏! "
UpsertBalance
∏∏" /
(
∏∏/ 0
new
∏∏0 3
UpsertBalanceDTO
∏∏4 D
(
∏∏D E
)
∏∏E F
{
ππ 
Currency
∫∫ 
=
∫∫ 
$str
∫∫ $
,
∫∫$ %
AvailableBalance
ªª $
=
ªª% &%
createStripeTransferDto
ªª' >
.
ªª> ?
Amount
ªª? E
,
ªªE F
PayoutBalance
ºº !
=
ºº" #
$num
ºº$ %
,
ºº% &
UserId
ΩΩ 
=
ΩΩ %
createStripeTransferDto
ΩΩ 4
.
ΩΩ4 5
UserId
ΩΩ5 ;
}
ææ 
)
øø 
;
øø 
await
¡¡ !
_transactionService
¡¡ %
.
¡¡% &
CreateTransaction
¡¡& 7
(
¬¬ 
new
√√ "
CreateTransactionDTO
√√ (
(
√√( )
)
√√) *
{
ƒƒ 
UserId
≈≈ 
=
≈≈ %
createStripeTransferDto
≈≈ 4
.
≈≈4 5
UserId
≈≈5 ;
,
≈≈; <
Amount
∆∆ 
=
∆∆ %
createStripeTransferDto
∆∆ 4
.
∆∆4 5
Amount
∆∆5 ;
,
∆∆; <
Type
«« 
=
«« 

StaticEnum
«« %
.
««% &
TransactionType
««& 5
.
««5 6
Income
««6 <
}
»» 
)
…… 
;
…… 
return
ÀÀ 
responseDto
ÀÀ 
;
ÀÀ 
}
ÃÃ 	
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ 
e
ÕÕ 
)
ÕÕ 
{
ŒŒ 	
Console
œœ 
.
œœ 
	WriteLine
œœ 
(
œœ 
e
œœ 
)
œœ  
;
œœ  !
throw
–– 
;
–– 
}
—— 	
}
““ 
public
‘‘ 

async
‘‘ 
Task
‘‘ 
<
‘‘ 
ResponseDTO
‘‘ !
>
‘‘! "
AddStripeCard
‘‘# 0
(
‘‘0 1
AddStripeCardDTO
‘‘1 A
addStripeCardDto
‘‘B R
)
‘‘R S
{
’’ 
return
÷÷ 
await
÷÷ 
_stripeService
÷÷ #
.
÷÷# $
AddCard
÷÷$ +
(
÷÷+ ,
addStripeCardDto
÷÷, <
)
÷÷< =
;
÷÷= >
}
◊◊ 
public
ŸŸ 

async
ŸŸ 
Task
ŸŸ 
<
ŸŸ 
ResponseDTO
ŸŸ !
>
ŸŸ! " 
CreateStripePayout
ŸŸ# 5
(
⁄⁄ 
ClaimsPrincipal
€€ 
User
€€ 
,
€€ #
CreateStripePayoutDTO
‹‹ #
createStripePayoutDto
‹‹ 3
)
›› 
{
ﬁﬁ 
try
ﬂﬂ 
{
‡‡ 	
var
·· 
userId
·· 
=
·· 
User
·· 
.
·· 
Claims
·· $
.
··$ %
FirstOrDefault
··% 3
(
··3 4
x
··4 5
=>
··6 8
x
··9 :
.
··: ;
Type
··; ?
==
··@ B

ClaimTypes
··C M
.
··M N
NameIdentifier
··N \
)
··\ ]
?
··] ^
.
··^ _
Value
··_ d
;
··d e
if
„„ 
(
„„ 
userId
„„ 
is
„„ 
null
„„ 
)
„„ 
{
‰‰ 
return
ÂÂ 
new
ÂÂ 
ResponseDTO
ÂÂ &
(
ÂÂ& '
)
ÂÂ' (
{
ÊÊ 
Message
ÁÁ 
=
ÁÁ 
$str
ÁÁ 2
,
ÁÁ2 3
	IsSuccess
ËË 
=
ËË 
false
ËË  %
,
ËË% &

StatusCode
ÈÈ 
=
ÈÈ  
$num
ÈÈ! $
,
ÈÈ$ %
Result
ÍÍ 
=
ÍÍ #
createStripePayoutDto
ÍÍ 2
}
ÎÎ 
;
ÎÎ 
}
ÏÏ 
var
ÓÓ 

instructor
ÓÓ 
=
ÓÓ 
await
ÓÓ "
_unitOfWork
ÓÓ# .
.
ÓÓ. /"
InstructorRepository
ÓÓ/ C
.
ÓÓC D
GetAsync
ÓÓD L
(
ÓÓL M
x
ÓÓM N
=>
ÓÓO Q
x
ÓÓR S
.
ÓÓS T
UserId
ÓÓT Z
==
ÓÓ[ ]
userId
ÓÓ^ d
)
ÓÓd e
;
ÓÓe f
if
 
(
 

instructor
 
is
 
null
 "
)
" #
{
ÒÒ 
return
ÚÚ 
new
ÚÚ 
ResponseDTO
ÚÚ &
(
ÚÚ& '
)
ÚÚ' (
{
ÛÛ 
Message
ÙÙ 
=
ÙÙ 
$str
ÙÙ 8
,
ÙÙ8 9
	IsSuccess
ıı 
=
ıı 
false
ıı  %
,
ıı% &

StatusCode
ˆˆ 
=
ˆˆ  
$num
ˆˆ! $
,
ˆˆ$ %
Result
˜˜ 
=
˜˜ #
createStripePayoutDto
˜˜ 2
}
¯¯ 
;
¯¯ 
}
˘˘ #
createStripePayoutDto
˚˚ !
.
˚˚! " 
ConnectedAccountId
˚˚" 4
=
˚˚5 6

instructor
˚˚7 A
?
˚˚A B
.
˚˚B C
StripeAccountId
˚˚C R
;
˚˚R S
var
˛˛ 
responseDto
˛˛ 
=
˛˛ 
await
˛˛ #
_stripeService
˛˛$ 2
.
˛˛2 3
CreatePayout
˛˛3 ?
(
˛˛? @#
createStripePayoutDto
˛˛@ U
)
˛˛U V
;
˛˛V W
var
ÄÄ 
payout
ÄÄ 
=
ÄÄ 
(
ÄÄ 
Payout
ÄÄ  
)
ÄÄ  !
responseDto
ÄÄ! ,
.
ÄÄ, -
Result
ÄÄ- 3
!
ÄÄ3 4
;
ÄÄ4 5
if
ÇÇ 
(
ÇÇ 
payout
ÇÇ 
.
ÇÇ 
Status
ÇÇ 
!=
ÇÇ  
$str
ÇÇ! *
)
ÇÇ* +
{
ÉÉ 
return
ÑÑ 
responseDto
ÑÑ "
;
ÑÑ" #
}
ÖÖ 
await
áá !
_transactionService
áá %
.
áá% &
CreateTransaction
áá& 7
(
àà 
new
ââ "
CreateTransactionDTO
ââ (
(
ââ( )
)
ââ) *
{
ää 
Amount
ãã 
=
ãã #
createStripePayoutDto
ãã 2
.
ãã2 3
Amount
ãã3 9
,
ãã9 :
Type
åå 
=
åå 

StaticEnum
åå %
.
åå% &
TransactionType
åå& 5
.
åå5 6
Payout
åå6 <
,
åå< =
UserId
çç 
=
çç 
userId
çç #
}
éé 
)
èè 
;
èè 
await
ëë 
_balanceService
ëë !
.
ëë! "
UpsertBalance
ëë" /
(
íí 
new
ìì 
UpsertBalanceDTO
ìì $
(
ìì$ %
)
ìì% &
{
îî 
Currency
ïï 
=
ïï 
$str
ïï $
,
ïï$ %
AvailableBalance
ññ $
=
ññ% &
-
ññ' (#
createStripePayoutDto
ññ( =
.
ññ= >
Amount
ññ> D
,
ññD E
PayoutBalance
óó !
=
óó" ##
createStripePayoutDto
óó$ 9
.
óó9 :
Amount
óó: @
,
óó@ A
UserId
òò 
=
òò 
userId
òò #
}
ôô 
)
öö 
;
öö 
return
õõ 
responseDto
õõ 
;
õõ 
}
úú 	
catch
ùù 
(
ùù 
	Exception
ùù 
e
ùù 
)
ùù 
{
ûû 	
Console
üü 
.
üü 
	WriteLine
üü 
(
üü 
e
üü 
)
üü  
;
üü  !
throw
†† 
;
†† 
}
°° 	
}
¢¢ 
public
§§ 

async
§§ 
Task
§§ 
<
§§ 
ResponseDTO
§§ !
>
§§! "'
GetTopInstructorsByPayout
§§# <
(
•• 
int
¶¶ 
topN
¶¶ 
=
¶¶ 
$num
¶¶ 
,
¶¶ 
int
ßß 
?
ßß 

filterYear
ßß 
=
ßß 
null
ßß 
,
ßß 
int
®® 
?
®® 
filterMonth
®® 
=
®® 
null
®® 
,
®®  
int
©© 
?
©© 
filterQuarter
©© 
=
©© 
null
©© !
)
™™ 
{
´´ 
try
¨¨ 
{
≠≠ 	
if
ØØ 
(
ØØ 
topN
ØØ 
<=
ØØ 
$num
ØØ 
)
ØØ 
{
∞∞ 
throw
±± 
new
±± 
ArgumentException
±± +
(
±±+ ,
$str
±±, f
)
±±f g
;
±±g h
}
≤≤ 
var
¥¥ 
currentYear
¥¥ 
=
¥¥ 
DateTime
¥¥ &
.
¥¥& '
UtcNow
¥¥' -
.
¥¥- .
Year
¥¥. 2
;
¥¥2 3
var
µµ 
	startDate
µµ 
=
µµ 
DateTime
µµ $
.
µµ$ %
UtcNow
µµ% +
;
µµ+ ,
var
∂∂ 
endDate
∂∂ 
=
∂∂ 
DateTime
∂∂ "
.
∂∂" #
UtcNow
∂∂# )
;
∂∂) *
if
ππ 
(
ππ 

filterYear
ππ 
.
ππ 
HasValue
ππ #
)
ππ# $
{
∫∫ 
	startDate
ªª 
=
ªª 
new
ªª 
DateTime
ªª  (
(
ªª( )

filterYear
ªª) 3
.
ªª3 4
Value
ªª4 9
,
ªª9 :
$num
ªª; <
,
ªª< =
$num
ªª> ?
)
ªª? @
;
ªª@ A
endDate
ºº 
=
ºº 
new
ºº 
DateTime
ºº &
(
ºº& '

filterYear
ºº' 1
.
ºº1 2
Value
ºº2 7
,
ºº7 8
$num
ºº9 ;
,
ºº; <
$num
ºº= ?
,
ºº? @
$num
ººA C
,
ººC D
$num
ººE G
,
ººG H
$num
ººI K
)
ººK L
;
ººL M
}
ΩΩ 
else
ææ 
{
øø 
	startDate
¿¿ 
=
¿¿ 
new
¿¿ 
DateTime
¿¿  (
(
¿¿( )
currentYear
¿¿) 4
,
¿¿4 5
$num
¿¿6 7
,
¿¿7 8
$num
¿¿9 :
)
¿¿: ;
;
¿¿; <
endDate
¡¡ 
=
¡¡ 
new
¡¡ 
DateTime
¡¡ &
(
¡¡& '
currentYear
¡¡' 2
,
¡¡2 3
$num
¡¡4 6
,
¡¡6 7
$num
¡¡8 :
,
¡¡: ;
$num
¡¡< >
,
¡¡> ?
$num
¡¡@ B
,
¡¡B C
$num
¡¡D F
)
¡¡F G
;
¡¡G H
}
¬¬ 
if
ƒƒ 
(
ƒƒ 
filterMonth
ƒƒ 
.
ƒƒ 
HasValue
ƒƒ $
)
ƒƒ$ %
{
≈≈ 
	startDate
∆∆ 
=
∆∆ 
new
∆∆ 
DateTime
∆∆  (
(
∆∆( )
	startDate
∆∆) 2
.
∆∆2 3
Year
∆∆3 7
,
∆∆7 8
filterMonth
∆∆9 D
.
∆∆D E
Value
∆∆E J
,
∆∆J K
$num
∆∆L M
)
∆∆M N
;
∆∆N O
endDate
«« 
=
«« 
	startDate
«« #
.
««# $
	AddMonths
««$ -
(
««- .
$num
««. /
)
««/ 0
.
««0 1

AddSeconds
««1 ;
(
««; <
-
««< =
$num
««= >
)
««> ?
;
««? @
}
»» 
if
   
(
   
filterQuarter
   
.
   
HasValue
   &
)
  & '
{
ÀÀ 
int
ÃÃ 

startMonth
ÃÃ 
=
ÃÃ  
(
ÃÃ! "
filterQuarter
ÃÃ" /
.
ÃÃ/ 0
Value
ÃÃ0 5
-
ÃÃ6 7
$num
ÃÃ8 9
)
ÃÃ9 :
*
ÃÃ; <
$num
ÃÃ= >
+
ÃÃ? @
$num
ÃÃA B
;
ÃÃB C
	startDate
ÕÕ 
=
ÕÕ 
new
ÕÕ 
DateTime
ÕÕ  (
(
ÕÕ( )
	startDate
ÕÕ) 2
.
ÕÕ2 3
Year
ÕÕ3 7
,
ÕÕ7 8

startMonth
ÕÕ9 C
,
ÕÕC D
$num
ÕÕE F
)
ÕÕF G
;
ÕÕG H
endDate
ŒŒ 
=
ŒŒ 
	startDate
ŒŒ #
.
ŒŒ# $
	AddMonths
ŒŒ$ -
(
ŒŒ- .
$num
ŒŒ. /
)
ŒŒ/ 0
.
ŒŒ0 1

AddSeconds
ŒŒ1 ;
(
ŒŒ; <
-
ŒŒ< =
$num
ŒŒ= >
)
ŒŒ> ?
;
ŒŒ? @
}
œœ 
var
—— 
transactions
—— 
=
—— 
await
—— $
_unitOfWork
——% 0
.
——0 1#
TransactionRepository
——1 F
.
““ 
GetAllAsync
““ 
(
““ 
filter
”” 
:
”” 
x
”” 
=>
””  
x
””! "
.
””" #
Type
””# '
==
””( *

StaticEnum
””+ 5
.
””5 6
TransactionType
””6 E
.
””E F
Payout
””F L
&&
””M O
x
‘‘! "
.
‘‘" #
CreatedTime
‘‘# .
>=
‘‘/ 1
	startDate
‘‘2 ;
&&
‘‘< >
x
‘‘? @
.
‘‘@ A
CreatedTime
‘‘A L
<=
‘‘M O
endDate
‘‘P W
,
‘‘W X
includeProperties
’’ %
:
’’% &
$str
’’' 8
)
÷÷ 
;
÷÷ 
var
ÿÿ 
instructorPayouts
ÿÿ !
=
ÿÿ" #
transactions
ÿÿ$ 0
.
ŸŸ 
GroupBy
ŸŸ 
(
ŸŸ 
x
ŸŸ 
=>
ŸŸ 
x
ŸŸ 
.
ŸŸ  
UserId
ŸŸ  &
)
ŸŸ& '
.
⁄⁄ 
Select
⁄⁄ 
(
⁄⁄ 
group
⁄⁄ 
=>
⁄⁄  
new
⁄⁄! $
{
€€ 
InstructorId
‹‹  
=
‹‹! "
group
‹‹# (
.
‹‹( )
First
‹‹) .
(
‹‹. /
)
‹‹/ 0
.
‹‹0 1
ApplicationUser
‹‹1 @
.
‹‹@ A
Id
‹‹A C
,
‹‹C D
FullName
›› 
=
›› 
group
›› $
.
››$ %
First
››% *
(
››* +
)
››+ ,
.
››, -
ApplicationUser
››- <
.
››< =
FullName
››= E
,
››E F
TotalPayout
ﬁﬁ 
=
ﬁﬁ  !
group
ﬁﬁ" '
.
ﬁﬁ' (
Sum
ﬁﬁ( +
(
ﬁﬁ+ ,
x
ﬁﬁ, -
=>
ﬁﬁ. 0
x
ﬁﬁ1 2
.
ﬁﬁ2 3
Amount
ﬁﬁ3 9
)
ﬁﬁ9 :
}
ﬂﬂ 
)
ﬂﬂ 
.
‡‡ 
OrderByDescending
‡‡ "
(
‡‡" #
x
‡‡# $
=>
‡‡% '
x
‡‡( )
.
‡‡) *
TotalPayout
‡‡* 5
)
‡‡5 6
.
·· 
Take
·· 
(
·· 
topN
·· 
)
·· 
.
‚‚ 
ToList
‚‚ 
(
‚‚ 
)
‚‚ 
;
‚‚ 
return
‰‰ 
new
‰‰ 
ResponseDTO
‰‰ "
(
‰‰" #
)
‰‰# $
{
ÂÂ 
Result
ÊÊ 
=
ÊÊ 
instructorPayouts
ÊÊ *
,
ÊÊ* +
Message
ÁÁ 
=
ÁÁ 
$str
ÁÁ F
,
ÁÁF G
	IsSuccess
ËË 
=
ËË 
true
ËË  
,
ËË  !

StatusCode
ÈÈ 
=
ÈÈ 
$num
ÈÈ  
}
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
catch
ÏÏ 
(
ÏÏ 
	Exception
ÏÏ 
e
ÏÏ 
)
ÏÏ 
{
ÌÌ 	
return
ÓÓ 
new
ÓÓ 
ResponseDTO
ÓÓ "
(
ÓÓ" #
)
ÓÓ# $
{
ÔÔ 
Message
 
=
 
e
 
.
 
Message
 #
,
# $

StatusCode
ÒÒ 
=
ÒÒ 
$num
ÒÒ  
,
ÒÒ  !
Result
ÚÚ 
=
ÚÚ 
null
ÚÚ 
,
ÚÚ 
	IsSuccess
ÛÛ 
=
ÛÛ 
false
ÛÛ !
}
ÙÙ 
;
ÙÙ 
}
ıı 	
}
ˆˆ 
public
¯¯ 

async
¯¯ 
Task
¯¯ 
<
¯¯ 
ResponseDTO
¯¯ !
>
¯¯! ")
GetLeastInstructorsByPayout
¯¯# >
(
¯¯> ?
int
˘˘ 
topN
˘˘ 
=
˘˘ 
$num
˘˘ 
,
˘˘ 
int
˙˙ 
?
˙˙ 

filterYear
˙˙ 
=
˙˙ 
null
˙˙ 
,
˙˙ 
int
˚˚ 
?
˚˚ 
filterMonth
˚˚ 
=
˚˚ 
null
˚˚ 
,
˚˚  
int
¸¸ 
?
¸¸ 
filterQuarter
¸¸ 
=
¸¸ 
null
¸¸ !
)
˝˝ 
{
˛˛ 
try
ˇˇ 
{
ÄÄ 	
if
ÇÇ 
(
ÇÇ 
topN
ÇÇ 
<=
ÇÇ 
$num
ÇÇ 
)
ÇÇ 
{
ÉÉ 
throw
ÑÑ 
new
ÑÑ 
ArgumentException
ÑÑ +
(
ÑÑ+ ,
$str
ÑÑ, h
)
ÑÑh i
;
ÑÑi j
}
ÖÖ 
var
áá 
currentYear
áá 
=
áá 
DateTime
áá &
.
áá& '
UtcNow
áá' -
.
áá- .
Year
áá. 2
;
áá2 3
var
àà 
	startDate
àà 
=
àà 
DateTime
àà $
.
àà$ %
UtcNow
àà% +
;
àà+ ,
var
ââ 
endDate
ââ 
=
ââ 
DateTime
ââ "
.
ââ" #
UtcNow
ââ# )
;
ââ) *
if
åå 
(
åå 

filterYear
åå 
.
åå 
HasValue
åå #
)
åå# $
{
çç 
	startDate
éé 
=
éé 
new
éé 
DateTime
éé  (
(
éé( )

filterYear
éé) 3
.
éé3 4
Value
éé4 9
,
éé9 :
$num
éé; <
,
éé< =
$num
éé> ?
)
éé? @
;
éé@ A
endDate
èè 
=
èè 
new
èè 
DateTime
èè &
(
èè& '

filterYear
èè' 1
.
èè1 2
Value
èè2 7
,
èè7 8
$num
èè9 ;
,
èè; <
$num
èè= ?
,
èè? @
$num
èèA C
,
èèC D
$num
èèE G
,
èèG H
$num
èèI K
)
èèK L
;
èèL M
}
êê 
else
ëë 
{
íí 
	startDate
ìì 
=
ìì 
new
ìì 
DateTime
ìì  (
(
ìì( )
currentYear
ìì) 4
,
ìì4 5
$num
ìì6 7
,
ìì7 8
$num
ìì9 :
)
ìì: ;
;
ìì; <
endDate
îî 
=
îî 
new
îî 
DateTime
îî &
(
îî& '
currentYear
îî' 2
,
îî2 3
$num
îî4 6
,
îî6 7
$num
îî8 :
,
îî: ;
$num
îî< >
,
îî> ?
$num
îî@ B
,
îîB C
$num
îîD F
)
îîF G
;
îîG H
}
ïï 
if
óó 
(
óó 
filterMonth
óó 
.
óó 
HasValue
óó $
)
óó$ %
{
òò 
	startDate
ôô 
=
ôô 
new
ôô 
DateTime
ôô  (
(
ôô( )
	startDate
ôô) 2
.
ôô2 3
Year
ôô3 7
,
ôô7 8
filterMonth
ôô9 D
.
ôôD E
Value
ôôE J
,
ôôJ K
$num
ôôL M
)
ôôM N
;
ôôN O
endDate
öö 
=
öö 
	startDate
öö #
.
öö# $
	AddMonths
öö$ -
(
öö- .
$num
öö. /
)
öö/ 0
.
öö0 1

AddSeconds
öö1 ;
(
öö; <
-
öö< =
$num
öö= >
)
öö> ?
;
öö? @
}
õõ 
if
ùù 
(
ùù 
filterQuarter
ùù 
.
ùù 
HasValue
ùù &
)
ùù& '
{
ûû 
int
üü 

startMonth
üü 
=
üü  
(
üü! "
filterQuarter
üü" /
.
üü/ 0
Value
üü0 5
-
üü6 7
$num
üü8 9
)
üü9 :
*
üü; <
$num
üü= >
+
üü? @
$num
üüA B
;
üüB C
	startDate
†† 
=
†† 
new
†† 
DateTime
††  (
(
††( )
	startDate
††) 2
.
††2 3
Year
††3 7
,
††7 8

startMonth
††9 C
,
††C D
$num
††E F
)
††F G
;
††G H
endDate
°° 
=
°° 
	startDate
°° #
.
°°# $
	AddMonths
°°$ -
(
°°- .
$num
°°. /
)
°°/ 0
.
°°0 1

AddSeconds
°°1 ;
(
°°; <
-
°°< =
$num
°°= >
)
°°> ?
;
°°? @
}
¢¢ 
var
§§ 
transactions
§§ 
=
§§ 
await
§§ $
_unitOfWork
§§% 0
.
§§0 1#
TransactionRepository
§§1 F
.
•• 
GetAllAsync
•• 
(
•• 
filter
¶¶ 
:
¶¶ 
x
¶¶ 
=>
¶¶  
x
¶¶! "
.
¶¶" #
Type
¶¶# '
==
¶¶( *

StaticEnum
¶¶+ 5
.
¶¶5 6
TransactionType
¶¶6 E
.
¶¶E F
Payout
¶¶F L
&&
¶¶M O
x
ßß! "
.
ßß" #
CreatedTime
ßß# .
>=
ßß/ 1
	startDate
ßß2 ;
&&
ßß< >
x
ßß? @
.
ßß@ A
CreatedTime
ßßA L
<=
ßßM O
endDate
ßßP W
,
ßßW X
includeProperties
®® %
:
®®% &
$str
®®' 8
)
©© 
;
©© 
var
´´ 
instructorPayouts
´´ !
=
´´" #
transactions
´´$ 0
.
¨¨ 
GroupBy
¨¨ 
(
¨¨ 
x
¨¨ 
=>
¨¨ 
x
¨¨ 
.
¨¨  
UserId
¨¨  &
)
¨¨& '
.
≠≠ 
Select
≠≠ 
(
≠≠ 
group
≠≠ 
=>
≠≠  
new
≠≠! $
{
ÆÆ 
InstructorId
ØØ  
=
ØØ! "
group
ØØ# (
.
ØØ( )
First
ØØ) .
(
ØØ. /
)
ØØ/ 0
.
ØØ0 1
ApplicationUser
ØØ1 @
.
ØØ@ A
Id
ØØA C
,
ØØC D
FullName
∞∞ 
=
∞∞ 
group
∞∞ $
.
∞∞$ %
First
∞∞% *
(
∞∞* +
)
∞∞+ ,
.
∞∞, -
ApplicationUser
∞∞- <
.
∞∞< =
FullName
∞∞= E
,
∞∞E F
TotalPayout
±± 
=
±±  !
group
±±" '
.
±±' (
Sum
±±( +
(
±±+ ,
x
±±, -
=>
±±. 0
x
±±1 2
.
±±2 3
Amount
±±3 9
)
±±9 :
}
≤≤ 
)
≤≤ 
.
≥≥ 
OrderBy
≥≥ 
(
≥≥ 
x
≥≥ 
=>
≥≥ 
x
≥≥ 
.
≥≥  
TotalPayout
≥≥  +
)
≥≥+ ,
.
¥¥ 
Take
¥¥ 
(
¥¥ 
topN
¥¥ 
)
¥¥ 
.
µµ 
ToList
µµ 
(
µµ 
)
µµ 
;
µµ 
return
∑∑ 
new
∑∑ 
ResponseDTO
∑∑ "
(
∑∑" #
)
∑∑# $
{
∏∏ 
Result
ππ 
=
ππ 
instructorPayouts
ππ *
,
ππ* +
Message
∫∫ 
=
∫∫ 
$str
∫∫ H
,
∫∫H I
	IsSuccess
ªª 
=
ªª 
true
ªª  
,
ªª  !

StatusCode
ºº 
=
ºº 
$num
ºº  
}
ΩΩ 
;
ΩΩ 
}
ææ 	
catch
øø 
(
øø 
	Exception
øø 
e
øø 
)
øø 
{
¿¿ 	
return
¡¡ 
new
¡¡ 
ResponseDTO
¡¡ "
(
¡¡" #
)
¡¡# $
{
¬¬ 
Message
√√ 
=
√√ 
e
√√ 
.
√√ 
Message
√√ #
,
√√# $

StatusCode
ƒƒ 
=
ƒƒ 
$num
ƒƒ  
,
ƒƒ  !
Result
≈≈ 
=
≈≈ 
null
≈≈ 
,
≈≈ 
	IsSuccess
∆∆ 
=
∆∆ 
false
∆∆ !
}
«« 
;
«« 
}
»» 	
}
…… 
}   √ 
kD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\OrderStatusService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public		 
class		 
OrderStatusService		 
:		  !
IOrderStatusService		" 5
{

 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
public 

OrderStatusService 
( 
IUnitOfWork )

unitOfWork* 4
)4 5
{ 
_unitOfWork 
= 

unitOfWork  
;  !
} 
public 

Task 
< 
ResponseDTO 
> 
GetOrdersStatus ,
(, -
Guid- 1
orderHeaderId2 ?
)? @
{ 
throw 
new #
NotImplementedException )
() *
)* +
;+ ,
} 
public 

Task 
< 
ResponseDTO 
> 
GetOrderStatus +
(+ ,
Guid, 0
orderStatusId1 >
)> ?
{ 
throw 
new #
NotImplementedException )
() *
)* +
;+ ,
} 
public 

async 
Task 
< 
ResponseDTO !
>! "
CreateOrderStatus# 4
(4 5
ClaimsPrincipal5 D
UserE I
,I J 
CreateOrderStatusDTOK _ 
createOrderStatusDto` t
)t u
{ 
try 
{ 	
var   
orderStatus   
=   
new   !
OrderStatus  " -
(  - .
)  . /
{!! 
Id"" 
="" 
new"" 
Guid"" 
("" 
)"" 
,""  
	CreatedBy## 
=## 
User##  
.##  !
Claims##! '
.##' (
FirstOrDefault##( 6
(##6 7
x##7 8
=>##9 ;
x##< =
.##= >
Type##> B
==##C E

ClaimTypes##F P
.##P Q
Name##Q U
)##U V
?##V W
.##W X
Value##X ]
,##] ^
CreatedTime$$ 
=$$ 
DateTime$$ &
.$$& '
UtcNow$$' -
,$$- .
Status%% 
=%%  
createOrderStatusDto%% -
.%%- .
Status%%. 4
,%%4 5
OrderHeaderId&& 
=&&  
createOrderStatusDto&&  4
.&&4 5
OrderHeaderId&&5 B
}'' 
;'' 
await)) 
_unitOfWork)) 
.)) !
OrderStatusRepository)) 3
.))3 4
AddAsync))4 <
())< =
orderStatus))= H
)))H I
;))I J
await** 
_unitOfWork** 
.** 
	SaveAsync** '
(**' (
)**( )
;**) *
return,, 
new,, 
ResponseDTO,, "
(,," #
),,# $
{-- 
Message.. 
=.. 
$str.. <
,..< =
Result// 
=// 
orderStatus// $
.//$ %
Id//% '
,//' (
	IsSuccess00 
=00 
true00  
,00  !

StatusCode11 
=11 
$num11  
}22 
;22 
}33 	
catch44 
(44 
	Exception44 
e44 
)44 
{55 	
return66 
new66 
ResponseDTO66 "
(66" #
)66# $
{77 
Message88 
=88 
e88 
.88 
Message88 #
,88# $
Result99 
=99 
null99 
,99 
	IsSuccess:: 
=:: 
true::  
,::  !

StatusCode;; 
=;; 
$num;;  
}<< 
;<< 
}== 	
}>> 
}?? Ê¢
eD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\OrderService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
OrderService 
: 
IOrderService )
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
IOrderStatusService (
_orderStatusService) <
;< =
private 
readonly 
IMapper 
_mapper $
;$ %
private 
readonly 
IStripeService #
_stripeService$ 2
;2 3
private 
readonly !
IStudentCourseService *!
_studentCourseService+ @
;@ A
private 
readonly 
ITransactionService (
_transactionService) <
;< =
private 
readonly 
ICourseService #
_courseService$ 2
;2 3
public 

OrderService 
( 
IUnitOfWork 

unitOfWork 
, 
IMapper 
mapper 
, 
IOrderStatusService 
orderStatusService .
,. /
IStripeService 
stripeService $
,$ %!
IStudentCourseService  
studentCourseService 2
,2 3
ITransactionService   
transactionService   .
,  . /
ICourseService  0 >
courseService  ? L
)  L M
{!! 
_unitOfWork"" 
="" 

unitOfWork""  
;""  !
_mapper## 
=## 
mapper## 
;## 
_orderStatusService$$ 
=$$ 
orderStatusService$$ 0
;$$0 1
_stripeService%% 
=%% 
stripeService%% &
;%%& '!
_studentCourseService&& 
=&&  
studentCourseService&&  4
;&&4 5
_transactionService'' 
='' 
transactionService'' 0
;''0 1
_courseService(( 
=(( 
courseService(( &
;((& '
})) 
public++ 

async++ 
Task++ 
<++ 
ResponseDTO++ !
>++! "
CreateOrder++# .
(,, 
ClaimsPrincipal-- 
User-- 
).. 
{// 
try00 
{11 	
var22 
userId22 
=22 
User22 
.22 
Claims22 $
.22$ %
FirstOrDefault22% 3
(223 4
x224 5
=>226 8
x229 :
.22: ;
Type22; ?
==22@ B

ClaimTypes22C M
.22M N
NameIdentifier22N \
)22\ ]
?22] ^
.22^ _
Value22_ d
;22d e
var33 
student33 
=33 
await33 
_unitOfWork33  +
.33+ ,
StudentRepository33, =
.33= >
GetAsync33> F
(44 
filter55 
:55 
x55 
=>55 
x55 
.55 
UserId55 %
==55& (
userId55) /
,55/ 0
includeProperties66 !
:66! "
$str66# 4
)77 
;77 
if88 
(88 
student88 
is88 
null88 
)88  
{99 
return:: 
new:: 
ResponseDTO:: &
(::& '
)::' (
{;; 
Message<< 
=<< 
$str<< 5
,<<5 6
Result== 
=== 
null== !
,==! "
	IsSuccess>> 
=>> 
false>>  %
,>>% &

StatusCode?? 
=??  
$num??! $
}@@ 
;@@ 
}AA 
varCC 

cartHeaderCC 
=CC 
awaitCC "
_unitOfWorkCC# .
.CC. / 
CartHeaderRepositoryCC/ C
.CCC D
GetAsyncCCD L
(CCL M
xCCM N
=>CCO Q
xCCR S
.CCS T
	StudentIdCCT ]
==CC^ `
studentCCa h
.CCh i
	StudentIdCCi r
)CCr s
;CCs t
ifDD 
(DD 

cartHeaderDD 
isDD 
nullDD "
)DD" #
{EE 

cartHeaderFF 
=FF 
newFF  

CartHeaderFF! +
(FF+ ,
)FF, -
{GG 
	StudentIdHH 
=HH 
studentHH  '
.HH' (
	StudentIdHH( 1
,HH1 2
IdII 
=II 
GuidII 
.II 
NewGuidII %
(II% &
)II& '
,II' (

TotalPriceJJ 
=JJ  
$numJJ! "
}KK 
;KK 
awaitLL 
_unitOfWorkLL !
.LL! " 
CartHeaderRepositoryLL" 6
.LL6 7
AddAsyncLL7 ?
(LL? @

cartHeaderLL@ J
)LLJ K
;LLK L
awaitMM 
_unitOfWorkMM !
.MM! "
	SaveAsyncMM" +
(MM+ ,
)MM, -
;MM- .
returnOO 
newOO 
ResponseDTOOO &
(OO& '
)OO' (
{PP 
MessageQQ 
=QQ 
$strQQ 2
,QQ2 3
ResultRR 
=RR 
nullRR !
,RR! "
	IsSuccessSS 
=SS 
falseSS  %
,SS% &

StatusCodeTT 
=TT  
$numTT! $
}UU 
;UU 
}VV 
varXX 
cartDetailsXX 
=XX 
awaitXX #
_unitOfWorkXX$ /
.XX/ 0!
CartDetailsRepositoryXX0 E
.XXE F
GetAllAsyncXXF Q
(XXQ R
xXXR S
=>XXT V
xXXW X
.XXX Y
CartHeaderIdXXY e
==XXf h

cartHeaderXXi s
.XXs t
IdXXt v
)XXv w
;XXw x
ifYY 
(YY 
cartDetailsYY 
.YY 
IsNullOrEmptyYY )
(YY) *
)YY* +
)YY+ ,
{ZZ 
return[[ 
new[[ 
ResponseDTO[[ &
([[& '
)[[' (
{\\ 
Message]] 
=]] 
$str]] -
,]]- .
Result^^ 
=^^ 
null^^ !
,^^! "
	IsSuccess__ 
=__ 
false__  %
,__% &

StatusCode`` 
=``  
$num``! $
}aa 
;aa 
}bb 
vardd 
orderHeaderdd 
=dd 
newdd !
OrderHeaderdd" -
(dd- .
)dd. /
{ee 
Idff 
=ff 
Guidff 
.ff 
NewGuidff !
(ff! "
)ff" #
,ff# $
	StudentIdgg 
=gg 
studentgg #
.gg# $
	StudentIdgg$ -
,gg- .
Statushh 
=hh 
StaticStatushh %
.hh% &
Orderhh& +
.hh+ ,
Pendinghh, 3
,hh3 4
	CreatedByii 
=ii 
studentii #
.ii# $
ApplicationUserii$ 3
.ii3 4
Emailii4 9
,ii9 :
CreatedTimejj 
=jj 
DateTimejj &
.jj& '
UtcNowjj' -
,jj- .

OrderPricekk 
=kk 

cartHeaderkk '
.kk' (

TotalPricekk( 2
}ll 
;ll 
varnn 
orderDetailsnn 
=nn 
newnn "
Listnn# '
<nn' (
OrderDetailsnn( 4
>nn4 5
(nn5 6
)nn6 7
;nn7 8
foreachoo 
(oo 
varoo 

cartDetailoo #
inoo$ &
cartDetailsoo' 2
)oo2 3
{pp 
varqq 
orderDetailqq 
=qq  !
newqq" %
OrderDetailsqq& 2
(qq2 3
)qq3 4
{rr 
Idss 
=ss 
Guidss 
.ss 
NewGuidss %
(ss% &
)ss& '
,ss' (
CourseIdtt 
=tt 

cartDetailtt )
.tt) *
CourseIdtt* 2
,tt2 3
OrderHeaderIduu !
=uu" #
orderHeaderuu$ /
.uu/ 0
Iduu0 2
,uu2 3
CoursePricevv 
=vv  !

cartDetailvv" ,
.vv, -
CoursePricevv- 8
,vv8 9
CourseTitleww 
=ww  !

cartDetailww" ,
.ww, -
CourseTitleww- 8
}xx 
;xx 
orderDetailsyy 
.yy 
Addyy  
(yy  !
orderDetailyy! ,
)yy, -
;yy- .
}zz 
await|| 
_unitOfWork|| 
.|| !
OrderHeaderRepository|| 3
.||3 4
AddAsync||4 <
(||< =
orderHeader||= H
)||H I
;||I J
await}} 
_unitOfWork}} 
.}} "
OrderDetailsRepository}} 4
.}}4 5
AddRangeAsync}}5 B
(}}B C
orderDetails}}C O
)}}O P
;}}P Q
_unitOfWork 
. !
CartDetailsRepository -
.- .
RemoveRange. 9
(9 :
cartDetails: E
)E F
;F G

cartHeader
ÄÄ 
.
ÄÄ 

TotalPrice
ÄÄ !
=
ÄÄ" #
$num
ÄÄ$ %
;
ÄÄ% &
_unitOfWork
ÅÅ 
.
ÅÅ "
CartHeaderRepository
ÅÅ ,
.
ÅÅ, -
Update
ÅÅ- 3
(
ÅÅ3 4

cartHeader
ÅÅ4 >
)
ÅÅ> ?
;
ÅÅ? @
await
ÉÉ 
_unitOfWork
ÉÉ 
.
ÉÉ 
	SaveAsync
ÉÉ '
(
ÉÉ' (
)
ÉÉ( )
;
ÉÉ) *
var
ÖÖ 
orderHeaderDto
ÖÖ 
=
ÖÖ  
_mapper
ÖÖ! (
.
ÖÖ( )
Map
ÖÖ) ,
<
ÖÖ, -
GetOrderHeaderDTO
ÖÖ- >
>
ÖÖ> ?
(
ÖÖ? @
orderHeader
ÖÖ@ K
)
ÖÖK L
;
ÖÖL M
await
áá !
_orderStatusService
áá %
.
áá% &
CreateOrderStatus
áá& 7
(
àà 
User
ââ 
,
ââ 
new
ää "
CreateOrderStatusDTO
ää (
(
ää( )
)
ää) *
{
ãã 
Status
åå 
=
åå 
StaticStatus
åå )
.
åå) *
Order
åå* /
.
åå/ 0
Pending
åå0 7
,
åå7 8
OrderHeaderId
çç !
=
çç" #
orderHeader
çç$ /
.
çç/ 0
Id
çç0 2
}
éé 
)
èè 
;
èè 
return
ëë 
new
ëë 
ResponseDTO
ëë "
(
ëë" #
)
ëë# $
{
íí 
Message
ìì 
=
ìì 
$str
ìì 5
,
ìì5 6
Result
îî 
=
îî 
orderHeaderDto
îî '
,
îî' (
	IsSuccess
ïï 
=
ïï 
true
ïï  
,
ïï  !

StatusCode
ññ 
=
ññ 
$num
ññ  
}
óó 
;
óó 
}
òò 	
catch
ôô 
(
ôô 
	Exception
ôô 
e
ôô 
)
ôô 
{
öö 	
return
õõ 
new
õõ 
ResponseDTO
õõ "
(
õõ" #
)
õõ# $
{
úú 
Message
ùù 
=
ùù 
e
ùù 
.
ùù 
Message
ùù #
,
ùù# $
Result
ûû 
=
ûû 
null
ûû 
,
ûû 
	IsSuccess
üü 
=
üü 
false
üü !
,
üü! "

StatusCode
†† 
=
†† 
$num
††  
}
°° 
;
°° 
}
¢¢ 	
}
££ 
public
•• 

async
•• 
Task
•• 
<
•• 
ResponseDTO
•• !
>
••! "
	GetOrders
••# ,
(
¶¶ 
ClaimsPrincipal
ßß 
User
ßß 
,
ßß 
Guid
®® 
?
®® 
	studentId
®® 
,
®® 
string
©© 
?
©© 
filterOn
©© 
,
©© 
string
™™ 
?
™™ 
filterQuery
™™ 
,
™™ 
string
´´ 
?
´´ 
sortBy
´´ 
,
´´ 
bool
¨¨ 
?
¨¨ 
isAscending
¨¨ 
,
¨¨ 
int
≠≠ 

pageNumber
≠≠ 
=
≠≠ 
$num
≠≠ 
,
≠≠ 
int
ÆÆ 
pageSize
ÆÆ 
=
ÆÆ 
$num
ÆÆ 
)
ØØ 
{
∞∞ 
try
±± 
{
≤≤ 	
var
≥≥ 
orders
≥≥ 
=
≥≥ 
await
≥≥ 
_unitOfWork
≥≥ *
.
≥≥* +#
OrderHeaderRepository
≥≥+ @
.
≥≥@ A
GetAllAsync
≥≥A L
(
≥≥L M
)
≥≥M N
;
≥≥N O
var
¥¥ 
userId
¥¥ 
=
¥¥ 
User
¥¥ 
.
¥¥ 
Claims
¥¥ $
.
¥¥$ %
FirstOrDefault
¥¥% 3
(
¥¥3 4
x
¥¥4 5
=>
¥¥6 8
x
¥¥9 :
.
¥¥: ;
Type
¥¥; ?
==
¥¥@ B

ClaimTypes
¥¥C M
.
¥¥M N
NameIdentifier
¥¥N \
)
¥¥\ ]
?
¥¥] ^
.
¥¥^ _
Value
¥¥_ d
;
¥¥d e
if
∂∂ 
(
∂∂ 
	studentId
∂∂ 
is
∂∂ 
not
∂∂  
null
∂∂! %
)
∂∂% &
{
∑∑ 
orders
∏∏ 
=
∏∏ 
orders
∏∏ 
.
∏∏  
Where
∏∏  %
(
∏∏% &
x
∏∏& '
=>
∏∏( *
x
∏∏+ ,
.
∏∏, -
	StudentId
∏∏- 6
==
∏∏7 9
	studentId
∏∏: C
)
∏∏C D
;
∏∏D E
}
ππ 
return
ºº 
new
ºº 
ResponseDTO
ºº "
(
ºº" #
)
ºº# $
{
ΩΩ 
Message
ææ 
=
ææ 
$str
ææ 3
,
ææ3 4
	IsSuccess
øø 
=
øø 
true
øø  
,
øø  !

StatusCode
¿¿ 
=
¿¿ 
$num
¿¿  
,
¿¿  !
Result
¡¡ 
=
¡¡ 
orders
¡¡ 
}
¬¬ 
;
¬¬ 
}
√√ 	
catch
ƒƒ 
(
ƒƒ 
	Exception
ƒƒ 
e
ƒƒ 
)
ƒƒ 
{
≈≈ 	
return
∆∆ 
new
∆∆ 
ResponseDTO
∆∆ "
(
∆∆" #
)
∆∆# $
{
«« 
Message
»» 
=
»» 
e
»» 
.
»» 
Message
»» #
,
»»# $
	IsSuccess
…… 
=
…… 
false
…… !
,
……! "

StatusCode
   
=
   
$num
    
,
    !
Result
ÀÀ 
=
ÀÀ 
null
ÀÀ 
}
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
}
ŒŒ 
public
–– 

async
–– 
Task
–– 
<
–– 
ResponseDTO
–– !
>
––! "
GetOrder
––# +
(
—— 
ClaimsPrincipal
““ 
User
““ 
,
““ 
Guid
”” 
orderHeaderId
”” 
)
‘‘ 
{
’’ 
try
÷÷ 
{
◊◊ 	
var
ÿÿ 
userId
ÿÿ 
=
ÿÿ 
User
ÿÿ 
.
ÿÿ 
Claims
ÿÿ $
.
ÿÿ$ %
FirstOrDefault
ÿÿ% 3
(
ÿÿ3 4
x
ÿÿ4 5
=>
ÿÿ6 8
x
ÿÿ9 :
.
ÿÿ: ;
Type
ÿÿ; ?
==
ÿÿ@ B

ClaimTypes
ÿÿC M
.
ÿÿM N
NameIdentifier
ÿÿN \
)
ÿÿ\ ]
?
ÿÿ] ^
.
ÿÿ^ _
Value
ÿÿ_ d
;
ÿÿd e
var
⁄⁄ 
student
⁄⁄ 
=
⁄⁄ 
await
⁄⁄ 
_unitOfWork
⁄⁄  +
.
⁄⁄+ ,
StudentRepository
⁄⁄, =
.
⁄⁄= >
GetAsync
⁄⁄> F
(
⁄⁄F G
x
⁄⁄G H
=>
⁄⁄I K
x
⁄⁄L M
.
⁄⁄M N
UserId
⁄⁄N T
==
⁄⁄U W
userId
⁄⁄X ^
)
⁄⁄^ _
;
⁄⁄_ `
if
€€ 
(
€€ 
student
€€ 
is
€€ 
null
€€ 
)
€€  
{
‹‹ 
return
›› 
new
›› 
ResponseDTO
›› &
(
››& '
)
››' (
{
ﬁﬁ 
Message
ﬂﬂ 
=
ﬂﬂ 
$str
ﬂﬂ 5
,
ﬂﬂ5 6
Result
‡‡ 
=
‡‡ 
null
‡‡ !
,
‡‡! "
	IsSuccess
·· 
=
·· 
false
··  %
,
··% &

StatusCode
‚‚ 
=
‚‚  
$num
‚‚! $
}
„„ 
;
„„ 
}
‰‰ 
var
ÊÊ 
orderHeader
ÊÊ 
=
ÊÊ 
await
ÊÊ #
_unitOfWork
ÊÊ$ /
.
ÊÊ/ 0#
OrderHeaderRepository
ÊÊ0 E
.
ÊÊE F
GetAsync
ÊÊF N
(
ÊÊN O
x
ÊÊO P
=>
ÊÊQ S
x
ÊÊT U
.
ÊÊU V
Id
ÊÊV X
==
ÊÊY [
orderHeaderId
ÊÊ\ i
)
ÊÊi j
;
ÊÊj k
var
ÁÁ 
orderDetails
ÁÁ 
=
ÁÁ 
await
ËË 
_unitOfWork
ËË !
.
ËË! "$
OrderDetailsRepository
ËË" 8
.
ËË8 9
GetAllAsync
ËË9 D
(
ËËD E
x
ËËE F
=>
ËËG I
x
ËËJ K
.
ËËK L
OrderHeaderId
ËËL Y
==
ËËZ \
orderHeaderId
ËË] j
)
ËËj k
;
ËËk l
var
ÍÍ 
getOrderHeaderDto
ÍÍ !
=
ÍÍ" #
_mapper
ÍÍ$ +
.
ÍÍ+ ,
Map
ÍÍ, /
<
ÍÍ/ 0
GetOrderHeaderDTO
ÍÍ0 A
>
ÍÍA B
(
ÍÍB C
orderHeader
ÍÍC N
)
ÍÍN O
;
ÍÍO P
getOrderHeaderDto
ÎÎ 
.
ÎÎ 
GetOrderDetails
ÎÎ -
=
ÎÎ. /
_mapper
ÎÎ0 7
.
ÎÎ7 8
Map
ÎÎ8 ;
<
ÎÎ; <
List
ÎÎ< @
<
ÎÎ@ A 
GetOrderDetailsDTO
ÎÎA S
>
ÎÎS T
>
ÎÎT U
(
ÎÎU V
orderDetails
ÎÎV b
)
ÎÎb c
;
ÎÎc d
return
ÌÌ 
new
ÌÌ 
ResponseDTO
ÌÌ "
(
ÌÌ" #
)
ÌÌ# $
{
ÓÓ 
Message
ÔÔ 
=
ÔÔ 
$str
ÔÔ 2
,
ÔÔ2 3
	IsSuccess
 
=
 
true
  
,
  !

StatusCode
ÒÒ 
=
ÒÒ 
$num
ÒÒ  
,
ÒÒ  !
Result
ÚÚ 
=
ÚÚ 
getOrderHeaderDto
ÚÚ *
}
ÛÛ 
;
ÛÛ 
}
ÙÙ 	
catch
ıı 
(
ıı 
	Exception
ıı 
e
ıı 
)
ıı 
{
ˆˆ 	
return
˜˜ 
new
˜˜ 
ResponseDTO
˜˜ "
(
˜˜" #
)
˜˜# $
{
¯¯ 
}
˘˘ 
;
˘˘ 
}
˙˙ 	
}
˚˚ 
public
˝˝ 

async
˝˝ 
Task
˝˝ 
<
˝˝ 
ResponseDTO
˝˝ !
>
˝˝! "
PayWithStripe
˝˝# 0
(
˛˛ 
ClaimsPrincipal
ˇˇ 
User
ˇˇ 
,
ˇˇ 
PayWithStripeDTO
ÄÄ 
payWithStripeDto
ÄÄ )
)
ÅÅ 
{
ÇÇ 
try
ÉÉ 
{
ÑÑ 	
var
ÖÖ 
orderHeader
ÖÖ 
=
ÖÖ 
await
ÖÖ #
_unitOfWork
ÖÖ$ /
.
ÖÖ/ 0#
OrderHeaderRepository
ÖÖ0 E
.
ÖÖE F
GetAsync
ÖÖF N
(
ÜÜ 
filter
áá 
:
áá 
x
áá 
=>
áá 
x
áá 
.
áá 
Id
áá !
==
áá" $
payWithStripeDto
áá% 5
.
áá5 6
OrderHeaderId
áá6 C
)
àà 
;
àà 
if
ââ 
(
ââ 
orderHeader
ââ 
is
ââ 
null
ââ #
)
ââ# $
{
ää 
return
ãã 
new
ãã 
ResponseDTO
ãã &
(
ãã& '
)
ãã' (
{
åå 
Message
çç 
=
çç 
$str
çç 3
,
çç3 4
	IsSuccess
éé 
=
éé 
false
éé  %
,
éé% &

StatusCode
èè 
=
èè  
$num
èè! $
,
èè$ %
Result
êê 
=
êê 
null
êê !
}
ëë 
;
ëë 
}
íí 
if
îî 
(
îî 
orderHeader
îî 
.
îî 
Status
îî "
!=
îî# %
$num
îî& '
)
îî' (
{
ïï 
return
ññ 
new
ññ 
ResponseDTO
ññ &
(
ññ& '
)
ññ' (
{
óó 
Message
òò 
=
òò 
$str
òò .
,
òò. /
	IsSuccess
ôô 
=
ôô 
false
ôô  %
,
ôô% &

StatusCode
öö 
=
öö  
$num
öö! $
,
öö$ %
Result
õõ 
=
õõ 
null
õõ !
}
úú 
;
úú 
}
ùù 
var
üü 
orderDetails
üü 
=
üü 
await
üü $
_unitOfWork
üü% 0
.
üü0 1$
OrderDetailsRepository
üü1 G
.
üüG H
GetAllAsync
üüH S
(
†† 
filter
°° 
:
°° 
x
°° 
=>
°° 
x
°° 
.
°° 
OrderHeaderId
°° ,
==
°°- /
orderHeader
°°0 ;
.
°°; <
Id
°°< >
)
¢¢ 
;
¢¢ 
if
££ 
(
££ 
orderDetails
££ 
.
££ 
IsNullOrEmpty
££ *
(
££* +
)
££+ ,
)
££, -
{
§§ 
return
•• 
new
•• 
ResponseDTO
•• &
(
••& '
)
••' (
{
¶¶ 
Message
ßß 
=
ßß 
$str
ßß /
,
ßß/ 0
	IsSuccess
®® 
=
®® 
false
®®  %
,
®®% &

StatusCode
©© 
=
©©  
$num
©©! $
,
©©$ %
Result
™™ 
=
™™ 
null
™™ !
}
´´ 
;
´´ 
}
¨¨ 
var
ÆÆ 
responseDto
ÆÆ 
=
ÆÆ 
await
ÆÆ #
_stripeService
ÆÆ$ 2
.
ÆÆ2 3"
CreatePaymentSession
ÆÆ3 G
(
ØØ 
new
∞∞ $
CreateStripeSessionDTO
∞∞ *
(
∞∞* +
)
∞∞+ ,
{
±± 
ApprovedUrl
≤≤ 
=
≤≤  !
payWithStripeDto
≤≤" 2
.
≤≤2 3
ApprovedUrl
≤≤3 >
,
≤≤> ?
	CancelUrl
≥≥ 
=
≥≥ 
payWithStripeDto
≥≥  0
.
≥≥0 1
	CancelUrl
≥≥1 :
,
≥≥: ;
OrdersDetails
¥¥ !
=
¥¥" #
orderDetails
¥¥$ 0
}
µµ 
)
∂∂ 
;
∂∂ 
var
∑∑ 
result
∑∑ 
=
∑∑ 
(
∑∑ &
ResponseStripeSessionDTO
∑∑ 2
)
∑∑2 3
responseDto
∑∑3 >
.
∑∑> ?
Result
∑∑? E
!
∑∑E F
;
∑∑F G
_unitOfWork
ππ 
.
ππ #
OrderHeaderRepository
ππ -
.
ππ- .
Update
ππ. 4
(
ππ4 5
orderHeader
ππ5 @
)
ππ@ A
;
ππA B
await
∫∫ 
_unitOfWork
∫∫ 
.
∫∫ 
	SaveAsync
∫∫ '
(
∫∫' (
)
∫∫( )
;
∫∫) *
return
ºº 
new
ºº 
ResponseDTO
ºº "
(
ºº" #
)
ºº# $
{
ΩΩ 
Message
ææ 
=
ææ 
$str
ææ C
,
ææC D
Result
øø 
=
øø 
result
øø 
,
øø  

StatusCode
¿¿ 
=
¿¿ 
$num
¿¿  
,
¿¿  !
	IsSuccess
¡¡ 
=
¡¡ 
true
¡¡  
}
¬¬ 
;
¬¬ 
}
√√ 	
catch
ƒƒ 
(
ƒƒ 
	Exception
ƒƒ 
e
ƒƒ 
)
ƒƒ 
{
≈≈ 	
return
∆∆ 
new
∆∆ 
ResponseDTO
∆∆ "
(
∆∆" #
)
∆∆# $
{
«« 
Message
»» 
=
»» 
e
»» 
.
»» 
Message
»» #
,
»»# $
Result
…… 
=
…… 
null
…… 
,
…… 

StatusCode
   
=
   
$num
    
,
    !
	IsSuccess
ÀÀ 
=
ÀÀ 
false
ÀÀ !
}
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
}
ŒŒ 
public
–– 

async
–– 
Task
–– 
<
–– 
ResponseDTO
–– !
>
––! " 
ValidateWithStripe
––# 5
(
—— 
ClaimsPrincipal
““ 
User
““ 
,
““ #
ValidateWithStripeDTO
”” #
validateWithStripeDto
”” 3
)
‘‘ 
{
’’ 
try
÷÷ 
{
◊◊ 	
var
ÿÿ 
orderHeader
ÿÿ 
=
ÿÿ 
await
ÿÿ #
_unitOfWork
ÿÿ$ /
.
ÿÿ/ 0#
OrderHeaderRepository
ÿÿ0 E
.
ÿÿE F
GetAsync
ÿÿF N
(
ŸŸ 
filter
⁄⁄ 
:
⁄⁄ 
x
⁄⁄ 
=>
⁄⁄ 
x
⁄⁄ 
.
⁄⁄ 
Id
⁄⁄ !
==
⁄⁄" $#
validateWithStripeDto
⁄⁄% :
.
⁄⁄: ;
OrderHeaderId
⁄⁄; H
)
€€ 
;
€€ 
if
›› 
(
›› 
orderHeader
›› 
is
›› 
null
›› #
)
››# $
{
ﬁﬁ 
return
ﬂﬂ 
new
ﬂﬂ 
ResponseDTO
ﬂﬂ &
(
ﬂﬂ& '
)
ﬂﬂ' (
{
‡‡ 
Message
·· 
=
·· 
$str
·· 3
,
··3 4
	IsSuccess
‚‚ 
=
‚‚ 
false
‚‚  %
,
‚‚% &

StatusCode
„„ 
=
„„  
$num
„„! $
,
„„$ %
Result
‰‰ 
=
‰‰ 
null
‰‰ !
}
ÂÂ 
;
ÂÂ 
}
ÊÊ 
var
ËË 
student
ËË 
=
ËË 
await
ËË 
_unitOfWork
ËË  +
.
ËË+ ,
StudentRepository
ËË, =
.
ËË= >
GetAsync
ËË> F
(
ËËF G
x
ËËG H
=>
ËËI K
x
ËËL M
.
ËËM N
	StudentId
ËËN W
==
ËËX Z
orderHeader
ËË[ f
.
ËËf g
	StudentId
ËËg p
)
ËËp q
;
ËËq r
if
ÍÍ 
(
ÍÍ 
student
ÍÍ 
is
ÍÍ 
null
ÍÍ 
)
ÍÍ  
{
ÎÎ 
return
ÏÏ 
new
ÏÏ 
ResponseDTO
ÏÏ &
(
ÏÏ& '
)
ÏÏ' (
{
ÌÌ 
Message
ÓÓ 
=
ÓÓ 
$str
ÓÓ 5
,
ÓÓ5 6
	IsSuccess
ÔÔ 
=
ÔÔ 
false
ÔÔ  %
,
ÔÔ% &

StatusCode
 
=
  
$num
! $
,
$ %
Result
ÒÒ 
=
ÒÒ 
null
ÒÒ !
}
ÚÚ 
;
ÚÚ 
}
ÛÛ 
var
ıı 
responseDto
ıı 
=
ıı 
await
ıı #
_stripeService
ıı$ 2
.
ıı2 3$
ValidatePaymentSession
ıı3 I
(
ˆˆ 
new
˜˜ &
ValidateStripeSessionDTO
˜˜ ,
(
˜˜, -
)
˜˜- .
{
¯¯ 
StripeSessionId
˘˘ #
=
˘˘$ %
orderHeader
˘˘& 1
.
˘˘1 2
StripeSessionId
˘˘2 A
}
˙˙ 
)
˚˚ 
;
˚˚ 
var
¸¸ 
result
¸¸ 
=
¸¸ 
(
¸¸ &
ValidateStripeSessionDTO
¸¸ 2
)
¸¸2 3
responseDto
¸¸3 >
.
¸¸> ?
Result
¸¸? E
!
¸¸E F
;
¸¸F G
if
ˇˇ 
(
ˇˇ 
result
ˇˇ 
.
ˇˇ 
Status
ˇˇ 
!=
ˇˇ  
$str
ˇˇ! ,
)
ˇˇ, -
{
ÄÄ 
return
ÅÅ 
new
ÅÅ 
ResponseDTO
ÅÅ &
(
ÅÅ& '
)
ÅÅ' (
{
ÇÇ 
Message
ÉÉ 
=
ÉÉ 
$str
ÉÉ 6
,
ÉÉ6 7
	IsSuccess
ÑÑ 
=
ÑÑ 
false
ÑÑ  %
,
ÑÑ% &

StatusCode
ÖÖ 
=
ÖÖ  
$num
ÖÖ! $
,
ÖÖ$ %
Result
ÜÜ 
=
ÜÜ 
null
ÜÜ !
}
áá 
;
áá 
}
àà 
orderHeader
ää 
.
ää 
PaymentIntentId
ää '
=
ää( )
result
ää* 0
.
ää0 1
PaymentIntentId
ää1 @
;
ää@ A
orderHeader
ãã 
.
ãã 
Status
ãã 
=
ãã  
StaticStatus
ãã! -
.
ãã- .
Order
ãã. 3
.
ãã3 4
Paid
ãã4 8
;
ãã8 9
await
åå !
_orderStatusService
åå %
.
åå% &
CreateOrderStatus
åå& 7
(
çç 
User
éé 
,
éé 
new
èè "
CreateOrderStatusDTO
èè (
(
èè( )
)
èè) *
{
êê 
Status
ëë 
=
ëë 
StaticStatus
ëë )
.
ëë) *
Order
ëë* /
.
ëë/ 0
Paid
ëë0 4
,
ëë4 5
OrderHeaderId
íí !
=
íí" #
orderHeader
íí$ /
.
íí/ 0
Id
íí0 2
}
ìì 
)
îî 
;
îî 
await
óó !
_transactionService
óó %
.
óó% &
CreateTransaction
óó& 7
(
òò 
new
ôô "
CreateTransactionDTO
ôô (
(
ôô( )
)
ôô) *
{
öö 
UserId
õõ 
=
õõ 
student
õõ $
.
õõ$ %
UserId
õõ% +
,
õõ+ ,
Amount
úú 
=
úú 
orderHeader
úú (
.
úú( )

OrderPrice
úú) 3
,
úú3 4
Type
ùù 
=
ùù 

StaticEnum
ùù %
.
ùù% &
TransactionType
ùù& 5
.
ùù5 6
Purchase
ùù6 >
}
ûû 
)
üü 
;
üü 
return
°° 
new
°° 
ResponseDTO
°° "
(
°°" #
)
°°# $
{
¢¢ 
Message
££ 
=
££ 
$str
££ E
,
££E F
Result
§§ 
=
§§ 
null
§§ 
,
§§ 

StatusCode
•• 
=
•• 
$num
••  
,
••  !
	IsSuccess
¶¶ 
=
¶¶ 
true
¶¶  
}
ßß 
;
ßß 
}
®® 	
catch
©© 
(
©© 
	Exception
©© 
e
©© 
)
©© 
{
™™ 	
return
´´ 
new
´´ 
ResponseDTO
´´ "
(
´´" #
)
´´# $
{
¨¨ 
Message
≠≠ 
=
≠≠ 
e
≠≠ 
.
≠≠ 
Message
≠≠ #
,
≠≠# $
Result
ÆÆ 
=
ÆÆ 
null
ÆÆ 
,
ÆÆ 

StatusCode
ØØ 
=
ØØ 
$num
ØØ  
,
ØØ  !
	IsSuccess
∞∞ 
=
∞∞ 
false
∞∞ !
}
±± 
;
±± 
}
≤≤ 	
}
≥≥ 
public
µµ 

async
µµ 
Task
µµ 
<
µµ 
ResponseDTO
µµ !
>
µµ! "
ConfirmOrder
µµ# /
(
∂∂ 
ClaimsPrincipal
∑∑ 
User
∑∑ 
,
∑∑ 
Guid
∏∏ 
orderHeaderId
∏∏ 
)
ππ 
{
∫∫ 
try
ªª 
{
ºº 	
var
ΩΩ 
orderHeader
ΩΩ 
=
ΩΩ 
await
ΩΩ #
_unitOfWork
ΩΩ$ /
.
ΩΩ/ 0#
OrderHeaderRepository
ΩΩ0 E
.
ΩΩE F
GetAsync
ΩΩF N
(
ΩΩN O
x
ΩΩO P
=>
ΩΩQ S
x
ΩΩT U
.
ΩΩU V
Id
ΩΩV X
==
ΩΩY [
orderHeaderId
ΩΩ\ i
)
ΩΩi j
;
ΩΩj k
if
ææ 
(
ææ 
orderHeader
ææ 
is
ææ 
null
ææ #
)
ææ# $
{
øø 
return
¿¿ 
new
¿¿ 
ResponseDTO
¿¿ &
(
¿¿& '
)
¿¿' (
{
¡¡ 
Message
¬¬ 
=
¬¬ 
$str
¬¬ 3
,
¬¬3 4
	IsSuccess
√√ 
=
√√ 
false
√√  %
,
√√% &

StatusCode
ƒƒ 
=
ƒƒ  
$num
ƒƒ! $
,
ƒƒ$ %
Result
≈≈ 
=
≈≈ 
null
≈≈ !
}
∆∆ 
;
∆∆ 
}
«« 
if
…… 
(
…… 
orderHeader
…… 
.
…… 
Status
…… "
!=
……# %
StaticStatus
……& 2
.
……2 3
Order
……3 8
.
……8 9
Paid
……9 =
)
……= >
{
   
return
ÀÀ 
new
ÀÀ 
ResponseDTO
ÀÀ &
(
ÀÀ& '
)
ÀÀ' (
{
ÃÃ 
Message
ÕÕ 
=
ÕÕ 
$str
ÕÕ 2
,
ÕÕ2 3
	IsSuccess
ŒŒ 
=
ŒŒ 
false
ŒŒ  %
,
ŒŒ% &

StatusCode
œœ 
=
œœ  
$num
œœ! $
,
œœ$ %
Result
–– 
=
–– 
null
–– !
}
—— 
;
—— 
}
““ 
orderHeader
‘‘ 
.
‘‘ 
Status
‘‘ 
=
‘‘  
StaticStatus
‘‘! -
.
‘‘- .
Order
‘‘. 3
.
‘‘3 4
Pending
‘‘4 ;
;
‘‘; <
_unitOfWork
’’ 
.
’’ #
OrderHeaderRepository
’’ -
.
’’- .
Update
’’. 4
(
’’4 5
orderHeader
’’5 @
)
’’@ A
;
’’A B
await
÷÷ 
_unitOfWork
÷÷ 
.
÷÷ 
	SaveAsync
÷÷ '
(
÷÷' (
)
÷÷( )
;
÷÷) *
await
ÿÿ !
_orderStatusService
ÿÿ %
.
ÿÿ% &
CreateOrderStatus
ÿÿ& 7
(
ŸŸ 
User
⁄⁄ 
,
⁄⁄ 
new
€€ "
CreateOrderStatusDTO
€€ (
(
€€( )
)
€€) *
{
‹‹ 
Status
›› 
=
›› 
StaticStatus
›› )
.
››) *
Order
››* /
.
››/ 0
Pending
››0 7
,
››7 8
OrderHeaderId
ﬁﬁ !
=
ﬁﬁ" #
orderHeader
ﬁﬁ$ /
.
ﬁﬁ/ 0
Id
ﬁﬁ0 2
,
ﬁﬁ2 3
}
ﬂﬂ 
)
‡‡ 
;
‡‡ 
var
‚‚ 
ordersDetails
‚‚ 
=
‚‚ 
await
„„ 
_unitOfWork
„„ !
.
„„! "$
OrderDetailsRepository
„„" 8
.
„„8 9
GetAllAsync
„„9 D
(
„„D E
x
„„E F
=>
„„G I
x
„„J K
.
„„K L
OrderHeaderId
„„L Y
==
„„Z \
orderHeader
„„] h
.
„„h i
Id
„„i k
)
„„k l
;
„„l m
foreach
ÂÂ 
(
ÂÂ 
var
ÂÂ 
orderDetails
ÂÂ %
in
ÂÂ& (
ordersDetails
ÂÂ) 6
)
ÂÂ6 7
{
ÊÊ 
await
ÁÁ #
_studentCourseService
ÁÁ +
.
ÁÁ+ ,!
CreateStudentCourse
ÁÁ, ?
(
ËË 
User
ÈÈ 
,
ÈÈ 
new
ÍÍ 
EnrollCourseDTO
ÍÍ '
(
ÍÍ' (
)
ÍÍ( )
{
ÎÎ 
courseId
ÏÏ  
=
ÏÏ! "
orderDetails
ÏÏ# /
.
ÏÏ/ 0
CourseId
ÏÏ0 8
,
ÏÏ8 9
	studentId
ÌÌ !
=
ÌÌ" #
orderHeader
ÌÌ$ /
.
ÌÌ/ 0
	StudentId
ÌÌ0 9
}
ÓÓ 
)
ÔÔ 
;
ÔÔ 
await
ÒÒ 
_courseService
ÒÒ $
.
ÒÒ$ %
UpsertCourseTotal
ÒÒ% 6
(
ÚÚ 
new
ÛÛ "
UpsertCourseTotalDTO
ÛÛ ,
(
ÛÛ, -
)
ÛÛ- .
{
ÙÙ 
CourseId
ıı  
=
ıı! "
orderDetails
ıı# /
.
ıı/ 0
CourseId
ıı0 8
,
ıı8 9
TotalEarned
ˆˆ #
=
ˆˆ$ %
orderDetails
ˆˆ& 2
.
ˆˆ2 3
CoursePrice
ˆˆ3 >
}
˜˜ 
)
¯¯ 
;
¯¯ 
}
˘˘ 
return
˚˚ 
new
˚˚ 
ResponseDTO
˚˚ "
(
˚˚" #
)
˚˚# $
{
¸¸ 
Message
˝˝ 
=
˝˝ 
$str
˝˝ 6
,
˝˝6 7
	IsSuccess
˛˛ 
=
˛˛ 
true
˛˛  
,
˛˛  !

StatusCode
ˇˇ 
=
ˇˇ 
$num
ˇˇ  
,
ˇˇ  !
Result
ÄÄ 
=
ÄÄ 
null
ÄÄ 
}
ÅÅ 
;
ÅÅ 
}
ÇÇ 	
catch
ÉÉ 
(
ÉÉ 
	Exception
ÉÉ 
e
ÉÉ 
)
ÉÉ 
{
ÑÑ 	
return
ÖÖ 
new
ÖÖ 
ResponseDTO
ÖÖ "
(
ÖÖ" #
)
ÖÖ# $
{
ÜÜ 
Message
áá 
=
áá 
e
áá 
.
áá 
Message
áá #
,
áá# $
Result
àà 
=
àà 
null
àà 
,
àà 
	IsSuccess
ââ 
=
ââ 
false
ââ !
,
ââ! "

StatusCode
ää 
=
ää 
$num
ää  
}
ãã 
;
ãã 
}
åå 	
}
çç 
}éé ü
lD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\NotificationService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
NotificationService  
:! " 
INotificationService# 7
{ 
} »∞
eD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\LevelService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
LevelService 
: 
ILevelService )
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
IMapper 
_mapper 
; 
public 

LevelService 
( 
IUnitOfWork #

unitOfWork$ .
,. /
IMapper0 7
mapper8 >
)> ?
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; 
} 
public 

async 
Task 
< 
ResponseDTO !
>! "
	GetLevels# ,
( 
ClaimsPrincipal 
User 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
= 
$num 
, 
int   
pageSize   
=   
$num   
)!! 
{"" 
try## 
{$$ 	
var&& 
userRole&& 
=&& 
User&& 
.&&  
Claims&&  &
.&&& '
FirstOrDefault&&' 5
(&&5 6
x&&6 7
=>&&8 :
x&&; <
.&&< =
Type&&= A
==&&B D

ClaimTypes&&E O
.&&O P
Role&&P T
)&&T U
?&&U V
.&&V W
Value&&W \
;&&\ ]
IEnumerable(( 
<(( 
Level(( 
>(( 
levels(( %
;((% &
if** 
(** 
userRole** 
==** 
StaticUserRoles** +
.**+ ,
Admin**, 1
)**1 2
{++ 
levels-- 
=-- 
await-- 
_unitOfWork-- *
.--* +
LevelRepository--+ :
.--: ;
GetAllAsync--; F
(--F G
)--G H
;--H I
}.. 
else// 
{00 
levels22 
=22 
await22 
_unitOfWork22 *
.22* +
LevelRepository22+ :
.22: ;
GetAllAsync22; F
(22F G
x22G H
=>22I K
x22L M
.22M N
Status22N T
<=22U W
$num22X Y
)22Y Z
;22Z [
}33 
if66 
(66 
!66 
levels66 
.66 
Any66 
(66 
)66 
)66 
{77 
return88 
new88 
ResponseDTO88 &
(88& '
)88' (
{99 
Message:: 
=:: 
$str:: 3
,::3 4
	IsSuccess;; 
=;; 
true;;  $
,;;$ %

StatusCode<< 
=<<  
$num<<! $
,<<$ %
Result== 
=== 
null== !
}>> 
;>> 
}?? 
varAA 

listLevelsAA 
=AA 
levelsAA #
.AA# $
ToListAA$ *
(AA* +
)AA+ ,
;AA, -
ifDD 
(DD 
!DD 
stringDD 
.DD 
IsNullOrEmptyDD %
(DD% &
filterOnDD& .
)DD. /
&&DD0 2
!DD3 4
stringDD4 :
.DD: ;
IsNullOrEmptyDD; H
(DDH I
filterQueryDDI T
)DDT U
)DDU V
{EE 
switchFF 
(FF 
filterOnFF  
.FF  !
TrimFF! %
(FF% &
)FF& '
.FF' (
ToLowerFF( /
(FF/ 0
)FF0 1
)FF1 2
{GG 
caseHH 
$strHH 
:HH  

listLevelsII "
=II# $

listLevelsII% /
.II/ 0
WhereII0 5
(II5 6
xII6 7
=>II8 :
xJJ 
.JJ 
NameJJ "
.JJ" #
ContainsJJ# +
(JJ+ ,
filterQueryJJ, 7
,JJ7 8
StringComparisonJJ9 I
.JJI J$
CurrentCultureIgnoreCaseJJJ b
)JJb c
)JJc d
.JJd e
ToListJJe k
(JJk l
)JJl m
;JJm n
breakKK 
;KK 
defaultLL 
:LL 
breakMM 
;MM 
}NN 
}OO 
ifRR 
(RR 
!RR 
stringRR 
.RR 
IsNullOrEmptyRR %
(RR% &
sortByRR& ,
)RR, -
)RR- .
{SS 
switchTT 
(TT 
sortByTT 
.TT 
TrimTT #
(TT# $
)TT$ %
.TT% &
ToLowerTT& -
(TT- .
)TT. /
)TT/ 0
{UU 
caseVV 
$strVV 
:VV  

listLevelsWW "
=WW# $

listLevelsWW% /
.WW/ 0
OrderByWW0 7
(WW7 8
xWW8 9
=>WW: <
xWW= >
.WW> ?
NameWW? C
)WWC D
.WWD E
ToListWWE K
(WWK L
)WWL M
;WWM N
breakXX 
;XX 
defaultYY 
:YY 
breakZZ 
;ZZ 
}[[ 
}\\ 
else]] 
{^^ 

listLevels`` 
=`` 

listLevels`` '
.``' (
OrderByDescending``( 9
(``9 :
x``: ;
=>``< >
x``? @
.``@ A
CreatedTime``A L
)``L M
.``M N
ToList``N T
(``T U
)``U V
;``V W
}aa 
ifdd 
(dd 

pageNumberdd 
>dd 
$numdd 
&&dd !
pageSizedd" *
>dd+ ,
$numdd- .
)dd. /
{ee 
varff 

skipResultff 
=ff  
(ff! "

pageNumberff" ,
-ff- .
$numff/ 0
)ff0 1
*ff2 3
pageSizeff4 <
;ff< =

listLevelsgg 
=gg 

listLevelsgg '
.gg' (
Skipgg( ,
(gg, -

skipResultgg- 7
)gg7 8
.gg8 9
Takegg9 =
(gg= >
pageSizegg> F
)ggF G
.ggG H
ToListggH N
(ggN O
)ggO P
;ggP Q
}hh 
varkk 
	levelsDtokk 
=kk 

listLevelskk &
.kk& '
Selectkk' -
(kk- .
levelkk. 3
=>kk4 6
newkk7 :
GetLevelDTOkk; F
(kkF G
)kkG H
{ll 
Idmm 
=mm 
levelmm 
.mm 
Idmm 
,mm 
Namenn 
=nn 
levelnn 
.nn 
Namenn !
,nn! "

CreateTimeoo 
=oo 
leveloo "
.oo" #
CreatedTimeoo# .
,oo. /
CreateBypp 
=pp 
levelpp  
.pp  !
	CreatedBypp! *
,pp* +

UpdateTimeqq 
=qq 
levelqq "
.qq" #
UpdatedTimeqq# .
,qq. /
UpdateByrr 
=rr 
levelrr  
.rr  !
	UpdatedByrr! *
,rr* +
Statusss 
=ss 
levelss 
.ss 
Statusss %
}tt 
)tt 
.tt 
ToListtt 
(tt 
)tt 
;tt 
returnvv 
newvv 
ResponseDTOvv "
(vv" #
)vv# $
{ww 
Messagexx 
=xx 
$strxx 3
,xx3 4
	IsSuccessyy 
=yy 
trueyy  
,yy  !

StatusCodezz 
=zz 
$numzz  
,zz  !
Result{{ 
={{ 
	levelsDto{{ "
}|| 
;|| 
}}} 	
catch~~ 
(~~ 
	Exception~~ 
e~~ 
)~~ 
{ 	
return
ÄÄ 
new
ÄÄ 
ResponseDTO
ÄÄ "
(
ÄÄ" #
)
ÄÄ# $
{
ÅÅ 
Message
ÇÇ 
=
ÇÇ 
e
ÇÇ 
.
ÇÇ 
Message
ÇÇ #
,
ÇÇ# $
Result
ÉÉ 
=
ÉÉ 
null
ÉÉ 
,
ÉÉ 
	IsSuccess
ÑÑ 
=
ÑÑ 
false
ÑÑ !
,
ÑÑ! "

StatusCode
ÖÖ 
=
ÖÖ 
$num
ÖÖ  
}
ÜÜ 
;
ÜÜ 
}
áá 	
}
àà 
public
ää 

async
ää 
Task
ää 
<
ää 
ResponseDTO
ää !
>
ää! "
GetLevel
ää# +
(
ää+ ,
ClaimsPrincipal
ää, ;
User
ää< @
,
ää@ A
Guid
ääB F
levelId
ääG N
)
ääN O
{
ãã 
try
åå 
{
çç 	
var
éé 
LevelID
éé 
=
éé 
await
èè 
_unitOfWork
èè !
.
èè! "
LevelRepository
èè" 1
.
èè1 2
GetLevelById
èè2 >
(
èè> ?
levelId
èè? F
)
èèF G
;
èèG H
if
ëë 
(
ëë 
LevelID
ëë 
is
ëë 
null
ëë 
)
ëë  
{
íí 
return
ìì 
new
ìì 
ResponseDTO
ìì &
(
ìì& '
)
ìì' (
{
îî 
Result
ïï 
=
ïï 
$str
ïï 
,
ïï  
Message
ññ 
=
ññ 
$str
ññ 3
,
ññ3 4
	IsSuccess
óó 
=
óó 
true
óó  $
,
óó$ %

StatusCode
òò 
=
òò  
$num
òò! $
}
ôô 
;
ôô 
}
öö 
GetLevelDTO
úú 
levelDto
úú  
;
úú  !
try
ùù 
{
ûû 
levelDto
üü 
=
üü 
_mapper
üü "
.
üü" #
Map
üü# &
<
üü& '
GetLevelDTO
üü' 2
>
üü2 3
(
üü3 4
LevelID
üü4 ;
)
üü; <
;
üü< =
}
†† 
catch
°° 
(
°° (
AutoMapperMappingException
°° -
e
°°. /
)
°°/ 0
{
¢¢ 
return
•• 
new
•• 
ResponseDTO
•• &
(
••& '
)
••' (
{
¶¶ 
Result
ßß 
=
ßß 
null
ßß !
,
ßß! "
Message
®® 
=
®® 
$str
®® B
,
®®B C
	IsSuccess
©© 
=
©© 
false
©©  %
,
©©% &

StatusCode
™™ 
=
™™  
$num
™™! $
}
´´ 
;
´´ 
}
¨¨ 
return
ÆÆ 
new
ÆÆ 
ResponseDTO
ÆÆ "
(
ÆÆ" #
)
ÆÆ# $
{
ØØ 
Result
∞∞ 
=
∞∞ 
levelDto
∞∞ !
,
∞∞! "
Message
±± 
=
±± 
$str
±± 2
,
±±2 3
	IsSuccess
≤≤ 
=
≤≤ 
true
≤≤  
,
≤≤  !

StatusCode
≥≥ 
=
≥≥ 
$num
≥≥  
}
¥¥ 
;
¥¥ 
}
µµ 	
catch
∂∂ 
(
∂∂ 
	Exception
∂∂ 
e
∂∂ 
)
∂∂ 
{
∑∑ 	
return
∏∏ 
new
∏∏ 
ResponseDTO
∏∏ "
(
∏∏" #
)
∏∏# $
{
ππ 
Result
∫∫ 
=
∫∫ 
null
∫∫ 
,
∫∫ 
Message
ªª 
=
ªª 
e
ªª 
.
ªª 
Message
ªª #
,
ªª# $
	IsSuccess
ºº 
=
ºº 
true
ºº  
,
ºº  !

StatusCode
ΩΩ 
=
ΩΩ 
$num
ΩΩ  
}
ææ 
;
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

async
¬¬ 
Task
¬¬ 
<
¬¬ 
ResponseDTO
¬¬ !
>
¬¬! "
CreateLevel
¬¬# .
(
¬¬. /
ClaimsPrincipal
¬¬/ >
User
¬¬? C
,
¬¬C D
CreateLevelDTO
¬¬E S
createLevelDto
¬¬T b
)
¬¬b c
{
√√ 
try
ƒƒ 
{
≈≈ 	
var
∆∆ 
userId
∆∆ 
=
∆∆ 
User
∆∆ 
.
∆∆ 
Claims
∆∆ $
.
∆∆$ %
FirstOrDefault
∆∆% 3
(
∆∆3 4
x
∆∆4 5
=>
∆∆6 8
x
∆∆9 :
.
∆∆: ;
Type
∆∆; ?
==
∆∆@ B

ClaimTypes
∆∆C M
.
∆∆M N
NameIdentifier
∆∆N \
)
∆∆\ ]
?
∆∆] ^
.
∆∆^ _
Value
∆∆_ d
;
∆∆d e
var
«« 
admin
«« 
=
«« 
await
«« 
_unitOfWork
«« )
.
««) *#
UserManagerRepository
««* ?
.
««? @
FindByIdAsync
««@ M
(
««M N
userId
««N T
)
««T U
;
««U V
Level
   
levels
   
=
   
new
   
Level
   $
(
  $ %
)
  % &
{
ÀÀ 
Name
ÃÃ 
=
ÃÃ 
createLevelDto
ÃÃ %
.
ÃÃ% &
Name
ÃÃ& *
,
ÃÃ* +
	CreatedBy
ÕÕ 
=
ÕÕ 
admin
ÕÕ !
.
ÕÕ! "
Email
ÕÕ" '
,
ÕÕ' (
CreatedTime
ŒŒ 
=
ŒŒ 
DateTime
ŒŒ &
.
ŒŒ& '
Now
ŒŒ' *
,
ŒŒ* +
UpdatedTime
œœ 
=
œœ 
null
œœ "
,
œœ" #
	UpdatedBy
–– 
=
–– 
$str
–– 
,
–– 
Status
—— 
=
—— 
$num
—— 
}
““ 
;
““ 
await
’’ 
_unitOfWork
’’ 
.
’’ 
LevelRepository
’’ -
.
’’- .
AddAsync
’’. 6
(
’’6 7
levels
’’7 =
)
’’= >
;
’’> ?
await
÷÷ 
_unitOfWork
÷÷ 
.
÷÷ 
	SaveAsync
÷÷ '
(
÷÷' (
)
÷÷( )
;
÷÷) *
return
ÿÿ 
new
ÿÿ 
ResponseDTO
ÿÿ "
(
ÿÿ" #
)
ÿÿ# $
{
ŸŸ 
Message
⁄⁄ 
=
⁄⁄ 
$str
⁄⁄ 6
,
⁄⁄6 7
Result
€€ 
=
€€ 
levels
€€ 
,
€€  
	IsSuccess
‹‹ 
=
‹‹ 
true
‹‹  
,
‹‹  !

StatusCode
›› 
=
›› 
$num
››  
,
››  !
}
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 	
catch
‡‡ 
(
‡‡ 
	Exception
‡‡ 
e
‡‡ 
)
‡‡ 
{
·· 	
return
‚‚ 
new
‚‚ 
ResponseDTO
‚‚ "
{
„„ 
Message
‰‰ 
=
‰‰ 
e
‰‰ 
.
‰‰ 
Message
‰‰ #
,
‰‰# $
Result
ÂÂ 
=
ÂÂ 
null
ÂÂ 
,
ÂÂ 
	IsSuccess
ÊÊ 
=
ÊÊ 
false
ÊÊ !
,
ÊÊ! "

StatusCode
ÁÁ 
=
ÁÁ 
$num
ÁÁ  
}
ËË 
;
ËË 
}
ÈÈ 	
}
ÍÍ 
public
ÏÏ 

async
ÏÏ 
Task
ÏÏ 
<
ÏÏ 
ResponseDTO
ÏÏ !
>
ÏÏ! "
UpdateLevel
ÏÏ# .
(
ÏÏ. /
ClaimsPrincipal
ÏÏ/ >
User
ÏÏ? C
,
ÏÏC D
UpdateLevelDTO
ÏÏE S
updateLevelDto
ÏÏT b
)
ÏÏb c
{
ÌÌ 
try
ÓÓ 
{
ÔÔ 	
var
ÒÒ 
levelID
ÒÒ 
=
ÒÒ 
await
ÒÒ 
_unitOfWork
ÒÒ  +
.
ÒÒ+ ,
LevelRepository
ÒÒ, ;
.
ÒÒ; <
GetAsync
ÒÒ< D
(
ÒÒD E
c
ÒÒE F
=>
ÒÒG I
c
ÒÒJ K
.
ÒÒK L
Id
ÒÒL N
==
ÒÒO Q
updateLevelDto
ÒÒR `
.
ÒÒ` a
LevelId
ÒÒa h
)
ÒÒh i
;
ÒÒi j
if
ÙÙ 
(
ÙÙ 
levelID
ÙÙ 
==
ÙÙ 
null
ÙÙ 
)
ÙÙ  
{
ıı 
return
ˆˆ 
new
ˆˆ 
ResponseDTO
ˆˆ &
{
˜˜ 
Message
¯¯ 
=
¯¯ 
$str
¯¯ /
,
¯¯/ 0
Result
˘˘ 
=
˘˘ 
null
˘˘ !
,
˘˘! "
	IsSuccess
˙˙ 
=
˙˙ 
false
˙˙  %
,
˙˙% &

StatusCode
˚˚ 
=
˚˚  
$num
˚˚! $
}
¸¸ 
;
¸¸ 
}
˝˝ 
levelID
ÄÄ 
.
ÄÄ 
Name
ÄÄ 
=
ÄÄ 
updateLevelDto
ÄÄ )
.
ÄÄ) *
Name
ÄÄ* .
;
ÄÄ. /
levelID
ÅÅ 
.
ÅÅ 
UpdatedTime
ÅÅ 
=
ÅÅ  !
DateTime
ÅÅ" *
.
ÅÅ* +
Now
ÅÅ+ .
;
ÅÅ. /
levelID
ÇÇ 
.
ÇÇ 
	UpdatedBy
ÇÇ 
=
ÇÇ 
User
ÇÇ  $
.
ÇÇ$ %
Identity
ÇÇ% -
.
ÇÇ- .
Name
ÇÇ. 2
;
ÇÇ2 3
levelID
ÉÉ 
.
ÉÉ 
Status
ÉÉ 
=
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
_unitOfWork
áá 
.
áá 
LevelRepository
áá '
.
áá' (
Update
áá( .
(
áá. /
levelID
áá/ 6
)
áá6 7
;
áá7 8
var
ää 
save
ää 
=
ää 
await
ää 
_unitOfWork
ää (
.
ää( )
	SaveAsync
ää) 2
(
ää2 3
)
ää3 4
;
ää4 5
if
ãã 
(
ãã 
save
ãã 
<=
ãã 
$num
ãã 
)
ãã 
{
åå 
return
çç 
new
çç 
ResponseDTO
çç &
{
éé 
Message
èè 
=
èè 
$str
èè 6
,
èè6 7
Result
êê 
=
êê 
null
êê !
,
êê! "
	IsSuccess
ëë 
=
ëë 
false
ëë  %
,
ëë% &

StatusCode
íí 
=
íí  
$num
íí! $
}
ìì 
;
ìì 
}
îî 
return
ññ 
new
ññ 
ResponseDTO
ññ "
{
óó 
Message
òò 
=
òò 
$str
òò 6
,
òò6 7
Result
ôô 
=
ôô 
levelID
ôô  
,
ôô  !
	IsSuccess
öö 
=
öö 
true
öö  
,
öö  !

StatusCode
õõ 
=
õõ 
$num
õõ  
}
úú 
;
úú 
}
ùù 	
catch
ûû 
(
ûû 
	Exception
ûû 
e
ûû 
)
ûû 
{
üü 	
return
†† 
new
†† 
ResponseDTO
†† "
{
°° 
Message
¢¢ 
=
¢¢ 
e
¢¢ 
.
¢¢ 
Message
¢¢ #
,
¢¢# $
Result
££ 
=
££ 
null
££ 
,
££ 
	IsSuccess
§§ 
=
§§ 
false
§§ !
,
§§! "

StatusCode
•• 
=
•• 
$num
••  
}
¶¶ 
;
¶¶ 
}
ßß 	
}
®® 
public
´´ 

async
´´ 
Task
´´ 
<
´´ 
ResponseDTO
´´ !
>
´´! "
DeleteLevel
´´# .
(
´´. /
ClaimsPrincipal
´´/ >
User
´´? C
,
´´C D
Guid
´´E I
levelId
´´J Q
)
´´Q R
{
¨¨ 
try
≠≠ 
{
ÆÆ 	
var
∞∞ 
levelID
∞∞ 
=
∞∞ 
await
∞∞ 
_unitOfWork
∞∞  +
.
∞∞+ ,
LevelRepository
∞∞, ;
.
∞∞; <
GetAsync
∞∞< D
(
∞∞D E
c
∞∞E F
=>
∞∞G I
c
∞∞J K
.
∞∞K L
Id
∞∞L N
==
∞∞O Q
levelId
∞∞R Y
)
∞∞Y Z
;
∞∞Z [
if
≤≤ 
(
≤≤ 
levelID
≤≤ 
==
≤≤ 
null
≤≤ 
)
≤≤  
{
≥≥ 
return
¥¥ 
new
¥¥ 
ResponseDTO
¥¥ &
{
µµ 
Message
∂∂ 
=
∂∂ 
$str
∂∂ 9
,
∂∂9 :
Result
∑∑ 
=
∑∑ 
null
∑∑ !
,
∑∑! "
	IsSuccess
∏∏ 
=
∏∏ 
false
∏∏  %
,
∏∏% &

StatusCode
ππ 
=
ππ  
$num
ππ! $
}
∫∫ 
;
∫∫ 
}
ªª 
levelID
ΩΩ 
.
ΩΩ 
Status
ΩΩ 
=
ΩΩ 
$num
ΩΩ 
;
ΩΩ 
levelID
ææ 
.
ææ 
	UpdatedBy
ææ 
=
ææ 
User
ææ  $
.
ææ$ %
Identity
ææ% -
.
ææ- .
Name
ææ. 2
;
ææ2 3
levelID
øø 
.
øø 
UpdatedTime
øø 
=
øø  !
DateTime
øø" *
.
øø* +
Now
øø+ .
;
øø. /
_unitOfWork
¡¡ 
.
¡¡ 
LevelRepository
¡¡ '
.
¡¡' (
Update
¡¡( .
(
¡¡. /
levelID
¡¡/ 6
)
¡¡6 7
;
¡¡7 8
await
¬¬ 
_unitOfWork
¬¬ 
.
¬¬ 
	SaveAsync
¬¬ '
(
¬¬' (
)
¬¬( )
;
¬¬) *
return
ƒƒ 
new
ƒƒ 
ResponseDTO
ƒƒ "
{
≈≈ 
Message
∆∆ 
=
∆∆ 
$str
∆∆ 6
,
∆∆6 7
Result
«« 
=
«« 
levelID
««  
,
««  !
	IsSuccess
»» 
=
»» 
true
»»  
,
»»  !

StatusCode
…… 
=
…… 
$num
……  
}
   
;
   
}
ÀÀ 	
catch
ÃÃ 
(
ÃÃ 
	Exception
ÃÃ 
e
ÃÃ 
)
ÃÃ 
{
ÕÕ 	
return
ŒŒ 
new
ŒŒ 
ResponseDTO
ŒŒ "
{
œœ 
Message
–– 
=
–– 
e
–– 
.
–– 
Message
–– #
,
––# $
Result
—— 
=
—— 
null
—— 
,
—— 
	IsSuccess
““ 
=
““ 
false
““ !
,
““! "

StatusCode
”” 
=
”” 
$num
””  
}
‘‘ 
;
‘‘ 
}
’’ 	
}
÷÷ 
}◊◊ Ÿÿ
jD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\InstructorService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
InstructorService 
:  
IInstructorService! 3
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
IMapper 
_mapper $
;$ %
private 
readonly 
IClosedXMLService &
_closedXmlService' 8
;8 9
private 
readonly 
IWebHostEnvironment (
_env) -
;- .
private 
readonly 
IConfiguration #
_config$ +
;+ ,
private 
readonly 
IHubContext  
<  !
NotificationHub! 0
>0 1
_notificationHub2 B
;B C
public 

InstructorService 
( 
IUnitOfWork (

unitOfWork) 3
,3 4
IMapper5 <
mapper= C
,C D
IClosedXMLServiceE V
closedXmlServiceW g
,g h
IWebHostEnvironment 
env 
,  
IConfiguration! /
config0 6
,6 7
IHubContext8 C
<C D
NotificationHubD S
>S T
notificationHubU d
)d e
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; 
_closedXmlService 
= 
closedXmlService ,
;, -
_env 
= 
env 
; 
_config   
=   
config   
;   
_notificationHub!! 
=!! 
notificationHub!! *
;!!* +
}"" 
public%% 

async%% 
Task%% 
<%% 
ResponseDTO%% !
>%%! "
GetAll%%# )
(&& 
ClaimsPrincipal'' 
User'' 
,'' 
string(( 
?(( 
filterOn(( 
,(( 
string)) 
?)) 
filterQuery)) 
,)) 
string** 
?** 
sortBy** 
,** 
bool++ 
?++ 
isAscending++ 
,++ 
int,, 

pageNumber,, 
,,, 
int-- 
pageSize-- 
).. 
{// 
try22 
{33 	
List44 
<44 

Instructor44 
>44 
instructors44 (
=44) *
new44+ .
List44/ 3
<443 4

Instructor444 >
>44> ?
(44? @
)44@ A
;44A B
if77 
(77 
!77 
string77 
.77 
IsNullOrEmpty77 %
(77% &
filterOn77& .
)77. /
&&770 2
!773 4
string774 :
.77: ;
IsNullOrEmpty77; H
(77H I
filterQuery77I T
)77T U
)77U V
{88 
switch99 
(99 
filterOn99  
.99  !
Trim99! %
(99% &
)99& '
.99' (
ToLower99( /
(99/ 0
)990 1
)991 2
{:: 
case;; 
$str;; 
:;;  
{<< 
instructors== #
===$ %
_unitOfWork==& 1
.==1 2 
InstructorRepository==2 F
.==F G
GetAllAsync==G R
(==R S
includeProperties==S d
:==d e
$str==f w
)==w x
.>> 

GetAwaiter>> '
(>>' (
)>>( )
.>>) *
	GetResult>>* 3
(>>3 4
)>>4 5
.>>5 6
Where>>6 ;
(>>; <
x>>< =
=>>>> @
x??  !
.??! "
ApplicationUser??" 1
.??1 2
FullName??2 :
.??: ;
Contains??; C
(??C D
filterQuery??D O
,??O P
StringComparison@@$ 4
.@@4 5$
CurrentCultureIgnoreCase@@5 M
)@@M N
)@@N O
.@@O P
ToList@@P V
(@@V W
)@@W X
;@@X Y
breakAA 
;AA 
}BB 
caseCC 
$strCC  
:CC  !
{DD 
instructorsEE #
=EE$ %
_unitOfWorkEE& 1
.EE1 2 
InstructorRepositoryEE2 F
.EEF G
GetAllAsyncEEG R
(EER S
includePropertiesEES d
:EEd e
$strEEf w
)EEw x
.FF 

GetAwaiterFF '
(FF' (
)FF( )
.FF) *
	GetResultFF* 3
(FF3 4
)FF4 5
.FF5 6
WhereFF6 ;
(FF; <
xFF< =
=>FF> @
xGG  !
.GG! "
ApplicationUserGG" 1
.GG1 2
EmailGG2 7
.GG7 8
ContainsGG8 @
(GG@ A
filterQueryGGA L
,GGL M
StringComparisonHH$ 4
.HH4 5$
CurrentCultureIgnoreCaseHH5 M
)HHM N
)HHN O
.HHO P
ToListHHP V
(HHV W
)HHW X
;HHX Y
breakII 
;II 
}JJ 
defaultKK 
:KK 
{LL 
instructorsMM #
=MM$ %
_unitOfWorkMM& 1
.MM1 2 
InstructorRepositoryMM2 F
.MMF G
GetAllAsyncMMG R
(MMR S
includePropertiesMMS d
:MMd e
$strMMf w
)MMw x
.NN 

GetAwaiterNN '
(NN' (
)NN( )
.NN) *
	GetResultNN* 3
(NN3 4
)NN4 5
.NN5 6
ToListNN6 <
(NN< =
)NN= >
;NN> ?
breakOO 
;OO 
}PP 
}QQ 
}RR 
elseSS 
{TT 
instructorsUU 
=UU 
_unitOfWorkUU )
.UU) * 
InstructorRepositoryUU* >
.UU> ?
GetAllAsyncUU? J
(UUJ K
includePropertiesUUK \
:UU\ ]
$strUU^ o
)UUo p
.VV 

GetAwaiterVV 
(VV  
)VV  !
.VV! "
	GetResultVV" +
(VV+ ,
)VV, -
.VV- .
ToListVV. 4
(VV4 5
)VV5 6
;VV6 7
}WW 
ifZZ 
(ZZ 
!ZZ 
stringZZ 
.ZZ 
IsNullOrEmptyZZ %
(ZZ% &
sortByZZ& ,
)ZZ, -
)ZZ- .
{[[ 
switch\\ 
(\\ 
sortBy\\ 
.\\ 
Trim\\ #
(\\# $
)\\$ %
.\\% &
ToLower\\& -
(\\- .
)\\. /
)\\/ 0
{]] 
case^^ 
$str^^ 
:^^  
{__ 
instructors`` #
=``$ %
isAscending``& 1
==``2 4
true``5 9
?aa 
[aa 
..aa !
instructorsaa" -
.aa- .
OrderByaa. 5
(aa5 6
xaa6 7
=>aa8 :
xaa; <
.aa< =
ApplicationUseraa= L
.aaL M
FullNameaaM U
)aaU V
]aaV W
:bb 
[bb 
..bb !
instructorsbb" -
.bb- .
OrderByDescendingbb. ?
(bb? @
xbb@ A
=>bbB D
xbbE F
.bbF G
ApplicationUserbbG V
.bbV W
FullNamebbW _
)bb_ `
]bb` a
;bba b
breakcc 
;cc 
}dd 
caseee 
$stree  
:ee  !
{ff 
instructorsgg #
=gg$ %
isAscendinggg& 1
==gg2 4
truegg5 9
?hh 
[hh 
..hh !
instructorshh" -
.hh- .
OrderByhh. 5
(hh5 6
xhh6 7
=>hh8 :
xhh; <
.hh< =
ApplicationUserhh= L
.hhL M
EmailhhM R
)hhR S
]hhS T
:ii 
[ii 
..ii !
instructorsii" -
.ii- .
OrderByDescendingii. ?
(ii? @
xii@ A
=>iiB D
xiiE F
.iiF G
ApplicationUseriiG V
.iiV W
EmailiiW \
)ii\ ]
]ii] ^
;ii^ _
breakjj 
;jj 
}kk 
defaultll 
:ll 
{mm 
breaknn 
;nn 
}oo 
}pp 
}qq 
iftt 
(tt 

pageNumbertt 
>tt 
$numtt 
&&tt !
pageSizett" *
>tt+ ,
$numtt- .
)tt. /
{uu 
varvv 

skipResultvv 
=vv  
(vv! "

pageNumbervv" ,
-vv- .
$numvv/ 0
)vv0 1
*vv2 3
pageSizevv4 <
;vv< =
instructorsww 
=ww 
instructorsww )
.ww) *
Skipww* .
(ww. /

skipResultww/ 9
)ww9 :
.ww: ;
Takeww; ?
(ww? @
pageSizeww@ H
)wwH I
.wwI J
ToListwwJ P
(wwP Q
)wwQ R
;wwR S
}xx 
if|| 
(|| 
instructors|| 
.|| 
IsNullOrEmpty|| )
(||) *
)||* +
)||+ ,
{}} 
return~~ 
new~~ 
ResponseDTO~~ &
(~~& '
)~~' (
{ 
Message
ÄÄ 
=
ÄÄ 
$str
ÄÄ 8
,
ÄÄ8 9
Result
ÅÅ 
=
ÅÅ 
null
ÅÅ !
,
ÅÅ! "
	IsSuccess
ÇÇ 
=
ÇÇ 
false
ÇÇ  %
,
ÇÇ% &

StatusCode
ÉÉ 
=
ÉÉ  
$num
ÉÉ! $
}
ÑÑ 
;
ÑÑ 
}
ÖÖ 
var
áá #
instructorInfoLiteDto
áá %
=
áá& '
_mapper
áá( /
.
áá/ 0
Map
áá0 3
<
áá3 4
List
áá4 8
<
áá8 9#
InstructorInfoLiteDTO
áá9 N
>
ááN O
>
ááO P
(
ááP Q
instructors
ááQ \
)
áá\ ]
;
áá] ^
return
ââ 
new
ââ 
ResponseDTO
ââ "
(
ââ" #
)
ââ# $
{
ää 
Message
ãã 
=
ãã 
$str
ãã 9
,
ãã9 :
Result
åå 
=
åå #
instructorInfoLiteDto
åå .
,
åå. /
	IsSuccess
çç 
=
çç 
true
çç  
,
çç  !

StatusCode
éé 
=
éé 
$num
éé  
}
èè 
;
èè 
}
êê 	
catch
ëë 
(
ëë 
	Exception
ëë 
e
ëë 
)
ëë 
{
íí 	
return
ìì 
new
ìì 
ResponseDTO
ìì "
(
ìì" #
)
ìì# $
{
îî 
Message
ïï 
=
ïï 
e
ïï 
.
ïï 
Message
ïï #
,
ïï# $
Result
ññ 
=
ññ 
null
ññ 
,
ññ 
	IsSuccess
óó 
=
óó 
false
óó !
,
óó! "

StatusCode
òò 
=
òò 
$num
òò  
}
ôô 
;
ôô 
}
öö 	
}
õõ 
public
ùù 

async
ùù 
Task
ùù 
<
ùù 
ResponseDTO
ùù !
>
ùù! "
GetById
ùù# *
(
ùù* +
Guid
ùù+ /
id
ùù0 2
)
ùù2 3
{
ûû 
try
üü 
{
†† 	
var
°° 

instructor
°° 
=
°° 
await
°° "
_unitOfWork
°°# .
.
°°. /"
InstructorRepository
°°/ C
.
°°C D
GetById
°°D K
(
°°K L
id
°°L N
)
°°N O
;
°°O P
if
¢¢ 
(
¢¢ 

instructor
¢¢ 
is
¢¢ 
null
¢¢ "
)
¢¢" #
{
££ 
return
§§ 
new
§§ 
ResponseDTO
§§ &
(
§§& '
)
§§' (
{
•• 
Message
¶¶ 
=
¶¶ 
$str
¶¶ 8
,
¶¶8 9
	IsSuccess
ßß 
=
ßß 
false
ßß  %
,
ßß% &

StatusCode
®® 
=
®®  
$num
®®! $
,
®®$ %
Result
©© 
=
©© 
null
©© !
}
™™ 
;
™™ 
}
´´ 
InstructorInfoDTO
≠≠ 
instructorInfoDto
≠≠ /
=
≠≠0 1
new
≠≠2 5
InstructorInfoDTO
≠≠6 G
(
≠≠G H
)
≠≠H I
{
ÆÆ 
InstructorId
ØØ 
=
ØØ 

instructor
ØØ )
.
ØØ) *
InstructorId
ØØ* 6
,
ØØ6 7
UserId
∞∞ 
=
∞∞ 

instructor
∞∞ #
.
∞∞# $
UserId
∞∞$ *
,
∞∞* +
	AvatarUrl
±± 
=
±± 

instructor
±± &
.
±±& '
ApplicationUser
±±' 6
.
±±6 7
	AvatarUrl
±±7 @
,
±±@ A
FullName
≤≤ 
=
≤≤ 

instructor
≤≤ %
.
≤≤% &
ApplicationUser
≤≤& 5
.
≤≤5 6
FullName
≤≤6 >
,
≤≤> ?
Email
≥≥ 
=
≥≥ 

instructor
≥≥ "
.
≥≥" #
ApplicationUser
≥≥# 2
.
≥≥2 3
Email
≥≥3 8
,
≥≥8 9
Address
¥¥ 
=
¥¥ 

instructor
¥¥ $
.
¥¥$ %
ApplicationUser
¥¥% 4
.
¥¥4 5
Address
¥¥5 <
,
¥¥< =
PhoneNumber
µµ 
=
µµ 

instructor
µµ (
.
µµ( )
ApplicationUser
µµ) 8
.
µµ8 9
PhoneNumber
µµ9 D
,
µµD E
Gender
∂∂ 
=
∂∂ 

instructor
∂∂ #
.
∂∂# $
ApplicationUser
∂∂$ 3
.
∂∂3 4
Gender
∂∂4 :
,
∂∂: ;
	BirthDate
∑∑ 
=
∑∑ 

instructor
∑∑ &
.
∑∑& '
ApplicationUser
∑∑' 6
.
∑∑6 7
	BirthDate
∑∑7 @
,
∑∑@ A
Country
∏∏ 
=
∏∏ 

instructor
∏∏ $
.
∏∏$ %
ApplicationUser
∏∏% 4
.
∏∏4 5
Country
∏∏5 <
,
∏∏< =
Degree
ππ 
=
ππ 

instructor
ππ #
.
ππ# $
Degree
ππ$ *
,
ππ* +
Industry
∫∫ 
=
∫∫ 

instructor
∫∫ %
.
∫∫% &
Industry
∫∫& .
,
∫∫. /
Introduction
ªª 
=
ªª 

instructor
ªª )
.
ªª) *
Introduction
ªª* 6
,
ªª6 7
	TaxNumber
ºº 
=
ºº 

instructor
ºº &
.
ºº& '
ApplicationUser
ºº' 6
.
ºº6 7
	TaxNumber
ºº7 @
,
ºº@ A

IsAccepted
ΩΩ 
=
ΩΩ 

instructor
ΩΩ '
.
ΩΩ' (

IsAccepted
ΩΩ( 2
}
ææ 
;
ææ 
return
¿¿ 
new
¿¿ 
ResponseDTO
¿¿ "
(
¿¿" #
)
¿¿# $
{
¡¡ 
Message
¬¬ 
=
¬¬ 
$str
¬¬ 8
,
¬¬8 9
	IsSuccess
√√ 
=
√√ 
false
√√ !
,
√√! "

StatusCode
ƒƒ 
=
ƒƒ 
$num
ƒƒ  
,
ƒƒ  !
Result
≈≈ 
=
≈≈ 
instructorInfoDto
≈≈ *
}
∆∆ 
;
∆∆ 
}
«« 	
catch
»» 
(
»» 
	Exception
»» 
e
»» 
)
»» 
{
…… 	
return
   
new
   
ResponseDTO
   "
(
  " #
)
  # $
{
ÀÀ 
Message
ÃÃ 
=
ÃÃ 
e
ÃÃ 
.
ÃÃ 
Message
ÃÃ #
,
ÃÃ# $
	IsSuccess
ÕÕ 
=
ÕÕ 
false
ÕÕ !
,
ÕÕ! "

StatusCode
ŒŒ 
=
ŒŒ 
$num
ŒŒ  
,
ŒŒ  !
Result
œœ 
=
œœ 
null
œœ 
}
–– 
;
–– 
}
—— 	
}
““ 
public
⁄⁄ 

async
⁄⁄ 
Task
⁄⁄ 
<
⁄⁄ 
ResponseDTO
⁄⁄ !
>
⁄⁄! "

UpdateById
⁄⁄# -
(
⁄⁄- .!
UpdateInstructorDTO
⁄⁄. A!
updateInstructorDto
⁄⁄B U
)
⁄⁄U V
{
€€ 
try
‹‹ 
{
›› 	
var
ﬁﬁ  
instructorToUpdate
ﬁﬁ "
=
ﬁﬁ# $
await
ﬂﬂ 
_unitOfWork
ﬂﬂ !
.
ﬂﬂ! ""
InstructorRepository
ﬂﬂ" 6
.
ﬂﬂ6 7
GetById
ﬂﬂ7 >
(
ﬂﬂ> ?!
updateInstructorDto
ﬂﬂ? R
.
ﬂﬂR S
InstructorId
ﬂﬂS _
)
ﬂﬂ_ `
;
ﬂﬂ` a
if
·· 
(
··  
instructorToUpdate
·· "
==
··# %
null
··& *
)
··* +
{
‚‚ 
return
„„ 
new
„„ 
ResponseDTO
„„ &
{
‰‰ 
Message
ÂÂ 
=
ÂÂ 
$str
ÂÂ 4
,
ÂÂ4 5
Result
ÊÊ 
=
ÊÊ 
null
ÊÊ !
,
ÊÊ! "
	IsSuccess
ÁÁ 
=
ÁÁ 
false
ÁÁ  %
,
ÁÁ% &

StatusCode
ËË 
=
ËË  
$num
ËË! $
}
ÈÈ 
;
ÈÈ 
}
ÍÍ  
instructorToUpdate
ÏÏ 
.
ÏÏ 
Degree
ÏÏ %
=
ÏÏ& '!
updateInstructorDto
ÏÏ( ;
.
ÏÏ; <
Degree
ÏÏ< B
;
ÏÏB C 
instructorToUpdate
ÌÌ 
.
ÌÌ 
Industry
ÌÌ '
=
ÌÌ( )!
updateInstructorDto
ÌÌ* =
.
ÌÌ= >
Industry
ÌÌ> F
;
ÌÌF G 
instructorToUpdate
ÓÓ 
.
ÓÓ 
Introduction
ÓÓ +
=
ÓÓ, -!
updateInstructorDto
ÓÓ. A
.
ÓÓA B
Introduction
ÓÓB N
;
ÓÓN O 
instructorToUpdate
 
.
 
ApplicationUser
 .
.
. /
Address
/ 6
=
7 8!
updateInstructorDto
9 L
?
L M
.
M N
Address
N U
;
U V 
instructorToUpdate
ÒÒ 
.
ÒÒ 
ApplicationUser
ÒÒ .
.
ÒÒ. /
	BirthDate
ÒÒ/ 8
=
ÒÒ9 :!
updateInstructorDto
ÒÒ; N
?
ÒÒN O
.
ÒÒO P
	BirthDate
ÒÒP Y
;
ÒÒY Z 
instructorToUpdate
ÚÚ 
.
ÚÚ 
ApplicationUser
ÚÚ .
.
ÚÚ. /
PhoneNumber
ÚÚ/ :
=
ÚÚ; <!
updateInstructorDto
ÚÚ= P
?
ÚÚP Q
.
ÚÚQ R
PhoneNumber
ÚÚR ]
;
ÚÚ] ^ 
instructorToUpdate
ÛÛ 
.
ÛÛ 
ApplicationUser
ÛÛ .
.
ÛÛ. /
Gender
ÛÛ/ 5
=
ÛÛ6 7!
updateInstructorDto
ÛÛ8 K
?
ÛÛK L
.
ÛÛL M
Gender
ÛÛM S
;
ÛÛS T 
instructorToUpdate
ÙÙ 
.
ÙÙ 
ApplicationUser
ÙÙ .
.
ÙÙ. /
FullName
ÙÙ/ 7
=
ÙÙ8 9!
updateInstructorDto
ÙÙ: M
?
ÙÙM N
.
ÙÙN O
FullName
ÙÙO W
;
ÙÙW X 
instructorToUpdate
ıı 
.
ıı 
ApplicationUser
ıı .
.
ıı. /
Country
ıı/ 6
=
ıı7 8!
updateInstructorDto
ıı9 L
?
ııL M
.
ııM N
Country
ııN U
;
ııU V 
instructorToUpdate
ˆˆ 
.
ˆˆ 
ApplicationUser
ˆˆ .
.
ˆˆ. /
Email
ˆˆ/ 4
=
ˆˆ5 6!
updateInstructorDto
ˆˆ7 J
?
ˆˆJ K
.
ˆˆK L
Email
ˆˆL Q
;
ˆˆQ R 
instructorToUpdate
˜˜ 
.
˜˜ 
ApplicationUser
˜˜ .
.
˜˜. /
	TaxNumber
˜˜/ 8
=
˜˜9 :!
updateInstructorDto
˜˜; N
?
˜˜N O
.
˜˜O P
	TaxNumber
˜˜P Y
;
˜˜Y Z
_unitOfWork
˙˙ 
.
˙˙ "
InstructorRepository
˙˙ ,
.
˙˙, -
Update
˙˙- 3
(
˙˙3 4 
instructorToUpdate
˙˙4 F
)
˙˙F G
;
˙˙G H
await
˚˚ 
_unitOfWork
˚˚ 
.
˚˚ 
	SaveAsync
˚˚ '
(
˚˚' (
)
˚˚( )
;
˚˚) *
return
˝˝ 
new
˝˝ 
ResponseDTO
˝˝ "
{
˛˛ 
Message
ˇˇ 
=
ˇˇ 
$str
ˇˇ ;
,
ˇˇ; <
Result
ÄÄ 
=
ÄÄ 
null
ÄÄ 
,
ÄÄ 
	IsSuccess
ÅÅ 
=
ÅÅ 
true
ÅÅ  
,
ÅÅ  !

StatusCode
ÇÇ 
=
ÇÇ 
$num
ÇÇ  
}
ÉÉ 
;
ÉÉ 
}
ÑÑ 	
catch
ÖÖ 
(
ÖÖ 
	Exception
ÖÖ 
e
ÖÖ 
)
ÖÖ 
{
ÜÜ 	
return
áá 
new
áá 
ResponseDTO
áá "
{
àà 
Message
ââ 
=
ââ 
e
ââ 
.
ââ 
Message
ââ #
,
ââ# $
Result
ää 
=
ää 
null
ää 
,
ää 
	IsSuccess
ãã 
=
ãã 
false
ãã !
,
ãã! "

StatusCode
åå 
=
åå 
$num
åå  
}
çç 
;
çç 
}
éé 	
}
èè 
public
ëë 

async
ëë 
Task
ëë 
<
ëë 
ResponseDTO
ëë !
>
ëë! "
AcceptInstructor
ëë# 3
(
ëë3 4
ClaimsPrincipal
ëë4 C
User
ëëD H
,
ëëH I
Guid
ëëJ N
instructorId
ëëO [
)
ëë[ \
{
íí 
try
ìì 
{
îî 	
var
ïï 
userId
ïï 
=
ïï 
User
ïï 
.
ïï 
Claims
ïï $
.
ïï$ %
FirstOrDefault
ïï% 3
(
ïï3 4
x
ïï4 5
=>
ïï6 8
x
ïï9 :
.
ïï: ;
Type
ïï; ?
==
ïï@ B

ClaimTypes
ïïC M
.
ïïM N
NameIdentifier
ïïN \
)
ïï\ ]
?
ïï] ^
.
ïï^ _
Value
ïï_ d
;
ïïd e
var
ññ 

instructor
ññ 
=
ññ 
await
ññ "
_unitOfWork
ññ# .
.
ññ. /"
InstructorRepository
ññ/ C
.
ññC D
GetById
ññD K
(
ññK L
instructorId
ññL X
)
ññX Y
;
ññY Z
if
óó 
(
óó 

instructor
óó 
is
óó 
null
óó "
)
óó" #
{
òò 
return
ôô 
new
ôô 
ResponseDTO
ôô &
(
ôô& '
)
ôô' (
{
öö 
Message
õõ 
=
õõ 
$str
õõ 8
,
õõ8 9
	IsSuccess
úú 
=
úú 
false
úú  %
,
úú% &

StatusCode
ùù 
=
ùù  
$num
ùù! $
,
ùù$ %
Result
ûû 
=
ûû 
null
ûû !
}
üü 
;
üü 
}
†† 

instructor
¢¢ 
.
¢¢ 

IsAccepted
¢¢ !
=
¢¢" #
true
¢¢$ (
;
¢¢( )

instructor
££ 
.
££ 

AcceptedBy
££ !
=
££" #
userId
££$ *
;
££* +

instructor
§§ 
.
§§ 
AcceptedTime
§§ #
=
§§$ %
DateTime
§§& .
.
§§. /
UtcNow
§§/ 5
;
§§5 6
await
•• 
_unitOfWork
•• 
.
•• 
	SaveAsync
•• '
(
••' (
)
••( )
;
••) *
return
ßß 
new
ßß 
ResponseDTO
ßß "
(
ßß" #
)
ßß# $
{
®® 
Message
©© 
=
©© 
$str
©© :
,
©©: ;
Result
™™ 
=
™™ 
null
™™ 
,
™™ 
	IsSuccess
´´ 
=
´´ 
true
´´  
,
´´  !

StatusCode
¨¨ 
=
¨¨ 
$num
¨¨  
}
≠≠ 
;
≠≠ 
}
ÆÆ 	
catch
ØØ 
(
ØØ 
	Exception
ØØ 
e
ØØ 
)
ØØ 
{
∞∞ 	
return
±± 
new
±± 
ResponseDTO
±± "
(
±±" #
)
±±# $
{
≤≤ 
Message
≥≥ 
=
≥≥ 
e
≥≥ 
.
≥≥ 
Message
≥≥ #
,
≥≥# $
	IsSuccess
¥¥ 
=
¥¥ 
true
¥¥  
,
¥¥  !

StatusCode
µµ 
=
µµ 
$num
µµ  
,
µµ  !
Result
∂∂ 
=
∂∂ 
null
∂∂ 
}
∑∑ 
;
∑∑ 
}
∏∏ 	
}
ππ 
public
ªª 

async
ªª 
Task
ªª 
<
ªª 
ResponseDTO
ªª !
>
ªª! "
RejectInstructor
ªª# 3
(
ªª3 4
ClaimsPrincipal
ªª4 C
User
ªªD H
,
ªªH I
Guid
ªªJ N
instructorId
ªªO [
)
ªª[ \
{
ºº 
try
ΩΩ 
{
ææ 	
var
øø 
userId
øø 
=
øø 
User
øø 
.
øø 
Claims
øø $
.
øø$ %
FirstOrDefault
øø% 3
(
øø3 4
x
øø4 5
=>
øø6 8
x
øø9 :
.
øø: ;
Type
øø; ?
==
øø@ B

ClaimTypes
øøC M
.
øøM N
NameIdentifier
øøN \
)
øø\ ]
?
øø] ^
.
øø^ _
Value
øø_ d
;
øød e
var
¡¡ 

instructor
¡¡ 
=
¡¡ 
await
¡¡ "
_unitOfWork
¡¡# .
.
¡¡. /"
InstructorRepository
¡¡/ C
.
¡¡C D
GetById
¡¡D K
(
¡¡K L
instructorId
¡¡L X
)
¡¡X Y
;
¡¡Y Z
if
¬¬ 
(
¬¬ 

instructor
¬¬ 
is
¬¬ 
null
¬¬ "
)
¬¬" #
{
√√ 
return
ƒƒ 
new
ƒƒ 
ResponseDTO
ƒƒ &
(
ƒƒ& '
)
ƒƒ' (
{
≈≈ 
Message
∆∆ 
=
∆∆ 
$str
∆∆ 8
,
∆∆8 9
	IsSuccess
«« 
=
«« 
false
««  %
,
««% &

StatusCode
»» 
=
»»  
$num
»»! $
,
»»$ %
Result
…… 
=
…… 
null
…… !
}
   
;
   
}
ÀÀ 

instructor
ÕÕ 
.
ÕÕ 

IsAccepted
ÕÕ !
=
ÕÕ" #
false
ÕÕ$ )
;
ÕÕ) *

instructor
ŒŒ 
.
ŒŒ 

RejectedBy
ŒŒ !
=
ŒŒ" #
userId
ŒŒ$ *
;
ŒŒ* +

instructor
œœ 
.
œœ 
RejectedTime
œœ #
=
œœ$ %
DateTime
œœ& .
.
œœ. /
UtcNow
œœ/ 5
;
œœ5 6
await
–– 
_unitOfWork
–– 
.
–– 
	SaveAsync
–– '
(
––' (
)
––( )
;
––) *
return
““ 
new
““ 
ResponseDTO
““ "
(
““" #
)
““# $
{
”” 
Message
‘‘ 
=
‘‘ 
$str
‘‘ :
,
‘‘: ;
Result
’’ 
=
’’ 
null
’’ 
,
’’ 
	IsSuccess
÷÷ 
=
÷÷ 
true
÷÷  
,
÷÷  !

StatusCode
◊◊ 
=
◊◊ 
$num
◊◊  
}
ÿÿ 
;
ÿÿ 
}
ŸŸ 	
catch
⁄⁄ 
(
⁄⁄ 
	Exception
⁄⁄ 
e
⁄⁄ 
)
⁄⁄ 
{
€€ 	
return
‹‹ 
new
‹‹ 
ResponseDTO
‹‹ "
(
‹‹" #
)
‹‹# $
{
›› 
Message
ﬁﬁ 
=
ﬁﬁ 
e
ﬁﬁ 
.
ﬁﬁ 
Message
ﬁﬁ #
,
ﬁﬁ# $
	IsSuccess
ﬂﬂ 
=
ﬂﬂ 
true
ﬂﬂ  
,
ﬂﬂ  !

StatusCode
‡‡ 
=
‡‡ 
$num
‡‡  
,
‡‡  !
Result
·· 
=
·· 
null
·· 
}
‚‚ 
;
‚‚ 
}
„„ 	
}
‰‰ 
public
ÊÊ 

async
ÊÊ 
Task
ÊÊ 
<
ÊÊ 
ResponseDTO
ÊÊ !
>
ÊÊ! "'
GetInstructorTotalCourses
ÊÊ# <
(
ÊÊ< =
Guid
ÊÊ= A
instructorId
ÊÊB N
)
ÊÊN O
{
ÁÁ 
try
ËË 
{
ÈÈ 	
var
ÍÍ 
id
ÍÍ 
=
ÍÍ 
await
ÍÍ 
_unitOfWork
ÍÍ &
.
ÍÍ& '"
InstructorRepository
ÍÍ' ;
.
ÍÍ; <
GetAsync
ÍÍ< D
(
ÍÍD E
i
ÍÍE F
=>
ÍÍG I
i
ÍÍJ K
.
ÍÍK L
InstructorId
ÍÍL X
==
ÍÍY [
instructorId
ÍÍ\ h
)
ÍÍh i
;
ÍÍi j
if
ÏÏ 
(
ÏÏ 
id
ÏÏ 
==
ÏÏ 
null
ÏÏ 
)
ÏÏ 
{
ÌÌ 
return
ÓÓ 
new
ÓÓ 
ResponseDTO
ÓÓ &
(
ÓÓ& '
)
ÓÓ' (
{
ÔÔ 
Message
 
=
 
$str
 4
,
4 5
Result
ÒÒ 
=
ÒÒ 
null
ÒÒ !
,
ÒÒ! "
	IsSuccess
ÚÚ 
=
ÚÚ 
false
ÚÚ  %
,
ÚÚ% &

StatusCode
ÛÛ 
=
ÛÛ  
$num
ÛÛ! $
}
ÙÙ 
;
ÙÙ 
}
ıı 
var
˜˜ 
courses
˜˜ 
=
˜˜ 
await
˜˜ 
_unitOfWork
˜˜  +
.
˜˜+ ,
CourseRepository
˜˜, <
.
˜˜< =
GetAllAsync
˜˜= H
(
˜˜H I
c
˜˜I J
=>
˜˜K M
c
˜˜N O
.
˜˜O P
InstructorId
˜˜P \
==
˜˜] _
id
˜˜` b
.
˜˜b c
InstructorId
˜˜c o
)
˜˜o p
;
˜˜p q
var
˘˘ 
totalCourses
˘˘ 
=
˘˘ 
courses
˘˘ &
.
˘˘& '
Count
˘˘' ,
(
˘˘, -
)
˘˘- .
;
˘˘. /
var
˙˙ 
pending
˙˙ 
=
˙˙ 
courses
˙˙ !
.
˙˙! "
Count
˙˙" '
(
˙˙' (
x
˙˙( )
=>
˙˙* ,
x
˙˙- .
.
˙˙. /
Status
˙˙/ 5
==
˙˙6 8
$num
˙˙9 :
)
˙˙: ;
;
˙˙; <
var
˚˚ 
	activated
˚˚ 
=
˚˚ 
courses
˚˚ #
.
˚˚# $
Count
˚˚$ )
(
˚˚) *
x
˚˚* +
=>
˚˚, .
x
˚˚/ 0
.
˚˚0 1
Status
˚˚1 7
==
˚˚8 :
$num
˚˚; <
)
˚˚< =
;
˚˚= >
var
¸¸ 
rejected
¸¸ 
=
¸¸ 
courses
¸¸ "
.
¸¸" #
Count
¸¸# (
(
¸¸( )
x
¸¸) *
=>
¸¸+ -
x
¸¸. /
.
¸¸/ 0
Status
¸¸0 6
==
¸¸7 9
$num
¸¸: ;
)
¸¸; <
;
¸¸< =
var
˝˝ 
deleted
˝˝ 
=
˝˝ 
courses
˝˝ !
.
˝˝! "
Count
˝˝" '
(
˝˝' (
x
˝˝( )
=>
˝˝* ,
x
˝˝- .
.
˝˝. /
Status
˝˝/ 5
==
˝˝6 8
$num
˝˝9 :
)
˝˝: ;
;
˝˝; <
return
ˇˇ 
new
ˇˇ 
ResponseDTO
ˇˇ "
(
ˇˇ" #
)
ˇˇ# $
{
ÄÄ 
Message
ÅÅ 
=
ÅÅ 
$str
ÅÅ 2
,
ÅÅ2 3
	IsSuccess
ÇÇ 
=
ÇÇ 
true
ÇÇ  
,
ÇÇ  !

StatusCode
ÉÉ 
=
ÉÉ 
$num
ÉÉ  
,
ÉÉ  !
Result
ÑÑ 
=
ÑÑ 
new
ÑÑ "
InstructorTotalCount
ÑÑ 1
(
ÑÑ1 2
)
ÑÑ2 3
{
ÖÖ 
Total
ÜÜ 
=
ÜÜ 
totalCourses
ÜÜ (
,
ÜÜ( )
	Activated
áá 
=
áá 
	activated
áá  )
,
áá) *
Deleted
àà 
=
àà 
deleted
àà %
,
àà% &
Pending
ââ 
=
ââ 
pending
ââ %
,
ââ% &
Rejected
ää 
=
ää 
rejected
ää '
}
ãã 
}
åå 
;
åå 
}
çç 	
catch
éé 
(
éé 
	Exception
éé 
e
éé 
)
éé 
{
èè 	
return
êê 
new
êê 
ResponseDTO
êê "
{
ëë 
Message
íí 
=
íí 
e
íí 
.
íí 
Message
íí #
,
íí# $
Result
ìì 
=
ìì 
null
ìì 
,
ìì 
	IsSuccess
îî 
=
îî 
false
îî !
,
îî! "

StatusCode
ïï 
=
ïï 
$num
ïï  
}
ññ 
;
ññ 
}
óó 	
}
òò 
public
öö 

async
öö 
Task
öö 
<
öö 
ResponseDTO
öö !
>
öö! "&
GetInstructorTotalRating
öö# ;
(
öö; <
Guid
öö< @
instructorId
ööA M
)
ööM N
{
õõ 
try
úú 
{
ùù 	
var
üü 
instructorRatings
üü !
=
üü" #
await
†† 
_unitOfWork
†† !
.
††! "(
InstructorRatingRepository
††" <
.
††< =
GetAllAsync
††= H
(
††H I
x
††I J
=>
††K M
x
††N O
.
††O P
InstructorId
††P \
==
††] _
instructorId
††` l
)
††l m
;
††m n
if
¢¢ 
(
¢¢ 
instructorRatings
¢¢ !
==
¢¢" $
null
¢¢% )
||
¢¢* ,
!
¢¢- .
instructorRatings
¢¢. ?
.
¢¢? @
Any
¢¢@ C
(
¢¢C D
)
¢¢D E
)
¢¢E F
{
££ 
return
§§ 
new
§§ 
ResponseDTO
§§ &
{
•• 
Message
¶¶ 
=
¶¶ 
$str
¶¶ E
,
¶¶E F
	IsSuccess
ßß 
=
ßß 
false
ßß  %
,
ßß% &

StatusCode
®® 
=
®®  
$num
®®! $
}
©© 
;
©© 
}
™™ 
var
≠≠ 
one
≠≠ 
=
≠≠ 
instructorRatings
≠≠ '
.
≠≠' (
Count
≠≠( -
(
≠≠- .
x
≠≠. /
=>
≠≠0 2
x
≠≠3 4
.
≠≠4 5
Rate
≠≠5 9
==
≠≠: <
$num
≠≠= >
)
≠≠> ?
;
≠≠? @
var
ÆÆ 
two
ÆÆ 
=
ÆÆ 
instructorRatings
ÆÆ '
.
ÆÆ' (
Count
ÆÆ( -
(
ÆÆ- .
x
ÆÆ. /
=>
ÆÆ0 2
x
ÆÆ3 4
.
ÆÆ4 5
Rate
ÆÆ5 9
==
ÆÆ: <
$num
ÆÆ= >
)
ÆÆ> ?
;
ÆÆ? @
var
ØØ 
three
ØØ 
=
ØØ 
instructorRatings
ØØ )
.
ØØ) *
Count
ØØ* /
(
ØØ/ 0
x
ØØ0 1
=>
ØØ2 4
x
ØØ5 6
.
ØØ6 7
Rate
ØØ7 ;
==
ØØ< >
$num
ØØ? @
)
ØØ@ A
;
ØØA B
var
∞∞ 
four
∞∞ 
=
∞∞ 
instructorRatings
∞∞ (
.
∞∞( )
Count
∞∞) .
(
∞∞. /
x
∞∞/ 0
=>
∞∞1 3
x
∞∞4 5
.
∞∞5 6
Rate
∞∞6 :
==
∞∞; =
$num
∞∞> ?
)
∞∞? @
;
∞∞@ A
var
±± 
five
±± 
=
±± 
instructorRatings
±± (
.
±±( )
Count
±±) .
(
±±. /
x
±±/ 0
=>
±±1 3
x
±±4 5
.
±±5 6
Rate
±±6 :
==
±±; =
$num
±±> ?
)
±±? @
;
±±@ A
return
≥≥ 
new
≥≥ 
ResponseDTO
≥≥ "
{
¥¥ 
Message
µµ 
=
µµ 
$str
µµ 8
,
µµ8 9
	IsSuccess
∂∂ 
=
∂∂ 
true
∂∂  
,
∂∂  !

StatusCode
∑∑ 
=
∑∑ 
$num
∑∑  
,
∑∑  !
Result
∏∏ 
=
∏∏ 
new
∏∏  
InstructorAvgCount
∏∏ /
(
∏∏/ 0
)
∏∏0 1
{
ππ 
One
∫∫ 
=
∫∫ 
one
∫∫ 
,
∫∫ 
Two
ªª 
=
ªª 
two
ªª 
,
ªª 
Three
ºº 
=
ºº 
three
ºº !
,
ºº! "
Four
ΩΩ 
=
ΩΩ 
four
ΩΩ 
,
ΩΩ  
Five
ææ 
=
ææ 
five
ææ 
}
øø 
}
¿¿ 
;
¿¿ 
}
¡¡ 	
catch
¬¬ 
(
¬¬ 
	Exception
¬¬ 
e
¬¬ 
)
¬¬ 
{
√√ 	
return
ƒƒ 
new
ƒƒ 
ResponseDTO
ƒƒ "
{
≈≈ 
Message
∆∆ 
=
∆∆ 
e
∆∆ 
.
∆∆ 
Message
∆∆ #
,
∆∆# $
Result
«« 
=
«« 
null
«« 
,
«« 
	IsSuccess
»» 
=
»» 
false
»» !
,
»»! "

StatusCode
…… 
=
…… 
$num
……  
}
   
;
   
}
ÀÀ 	
}
ÃÃ 
public
œœ 

Task
œœ 
<
œœ 
ResponseDTO
œœ 
>
œœ &
GetInstructorEarnedMoney
œœ 5
(
œœ5 6
Guid
œœ6 :
instructorId
œœ; G
)
œœG H
{
–– 
throw
—— 
new
—— %
NotImplementedException
—— )
(
——) *
)
——* +
;
——+ ,
}
““ 
public
‘‘ 

Task
‘‘ 
<
‘‘ 
ResponseDTO
‘‘ 
>
‘‘ &
GetInstructorPayoutMoney
‘‘ 5
(
‘‘5 6
Guid
‘‘6 :
instructorId
‘‘; G
)
‘‘G H
{
’’ 
throw
÷÷ 
new
÷÷ %
NotImplementedException
÷÷ )
(
÷÷) *
)
÷÷* +
;
÷÷+ ,
}
◊◊ 
public
€€ 

async
€€ 
Task
€€ 
<
€€ 
ResponseDTO
€€ !
>
€€! "%
GetAllInstructorComment
€€# :
(
‹‹ 
Guid
›› 
instructorId
›› 
,
›› 
int
ﬁﬁ 

pageNumber
ﬁﬁ 
,
ﬁﬁ 
int
ﬂﬂ 
pageSize
ﬂﬂ 
)
‡‡ 
{
·· 
try
‚‚ 
{
„„ 	
var
‰‰ 
comments
‰‰ 
=
‰‰ 
_unitOfWork
‰‰ &
.
‰‰& ')
InstructorCommentRepository
‰‰' B
.
‰‰B C
GetAllAsync
‰‰C N
(
‰‰N O
x
ÂÂ 
=>
ÂÂ 
x
ÂÂ 
.
ÂÂ 
InstructorId
ÂÂ #
==
ÂÂ$ &
instructorId
ÂÂ' 3
&&
ÂÂ4 6
x
ÊÊ 
.
ÊÊ 
Status
ÊÊ 
!=
ÊÊ  
$num
ÊÊ! "
)
ÁÁ 
.
ÁÁ 

GetAwaiter
ÁÁ 
(
ÁÁ 
)
ÁÁ 
.
ÁÁ 
	GetResult
ÁÁ $
(
ÁÁ$ %
)
ÁÁ% &
.
ÁÁ& '
ToList
ÁÁ' -
(
ÁÁ- .
)
ÁÁ. /
;
ÁÁ/ 0
if
ËË 
(
ËË 
comments
ËË 
is
ËË 
null
ËË  
)
ËË  !
{
ÈÈ 
return
ÍÍ 
new
ÍÍ 
ResponseDTO
ÍÍ &
(
ÍÍ& '
)
ÍÍ' (
{
ÎÎ 
Message
ÏÏ 
=
ÏÏ 
$str
ÏÏ 4
,
ÏÏ4 5
	IsSuccess
ÌÌ 
=
ÌÌ 
true
ÌÌ  $
,
ÌÌ$ %

StatusCode
ÓÓ 
=
ÓÓ  
$num
ÓÓ! $
,
ÓÓ$ %
Result
ÔÔ 
=
ÔÔ 
null
ÔÔ !
}
 
;
 
}
ÒÒ 
comments
ÛÛ 
=
ÛÛ 
comments
ÛÛ 
.
ÛÛ  
OrderByDescending
ÛÛ  1
(
ÛÛ1 2
x
ÛÛ2 3
=>
ÛÛ4 6
x
ÛÛ7 8
.
ÛÛ8 9
CreatedTime
ÛÛ9 D
)
ÛÛD E
.
ÛÛE F
ToList
ÛÛF L
(
ÛÛL M
)
ÛÛM N
;
ÛÛN O
if
ˆˆ 
(
ˆˆ 

pageNumber
ˆˆ 
>
ˆˆ 
$num
ˆˆ 
&&
ˆˆ !
pageSize
ˆˆ" *
>
ˆˆ+ ,
$num
ˆˆ- .
)
ˆˆ. /
{
˜˜ 
var
¯¯ 

skipResult
¯¯ 
=
¯¯  
(
¯¯! "

pageNumber
¯¯" ,
-
¯¯- .
$num
¯¯/ 0
)
¯¯0 1
*
¯¯2 3
pageSize
¯¯4 <
;
¯¯< =
comments
˘˘ 
=
˘˘ 
comments
˘˘ #
.
˘˘# $
Skip
˘˘$ (
(
˘˘( )

skipResult
˘˘) 3
)
˘˘3 4
.
˘˘4 5
Take
˘˘5 9
(
˘˘9 :
pageSize
˘˘: B
)
˘˘B C
.
˘˘C D
ToList
˘˘D J
(
˘˘J K
)
˘˘K L
;
˘˘L M
}
˙˙ 
var
¸¸ 
commentsDto
¸¸ 
=
¸¸ 
_mapper
¸¸ %
.
¸¸% &
Map
¸¸& )
<
¸¸) *
List
¸¸* .
<
¸¸. /
GetAllCommentsDTO
¸¸/ @
>
¸¸@ A
>
¸¸A B
(
¸¸B C
comments
¸¸C K
)
¸¸K L
;
¸¸L M
return
˛˛ 
new
˛˛ 
ResponseDTO
˛˛ "
(
˛˛" #
)
˛˛# $
{
ˇˇ 
Message
ÄÄ 
=
ÄÄ 
$str
ÄÄ ?
,
ÄÄ? @
	IsSuccess
ÅÅ 
=
ÅÅ 
true
ÅÅ  
,
ÅÅ  !

StatusCode
ÇÇ 
=
ÇÇ 
$num
ÇÇ  
,
ÇÇ  !
Result
ÉÉ 
=
ÉÉ 
commentsDto
ÉÉ $
}
ÑÑ 
;
ÑÑ 
}
ÖÖ 	
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ 
e
ÜÜ 
)
ÜÜ 
{
áá 	
return
àà 
new
àà 
ResponseDTO
àà "
(
àà" #
)
àà# $
{
ââ 
Message
ää 
=
ää 
e
ää 
.
ää 
Message
ää #
,
ää# $
Result
ãã 
=
ãã 
null
ãã 
,
ãã 
	IsSuccess
åå 
=
åå 
false
åå !
,
åå! "

StatusCode
çç 
=
çç 
$num
çç  
}
éé 
;
éé 
}
èè 	
}
êê 
public
íí 

async
íí 
Task
íí 
<
íí 
ResponseDTO
íí !
>
íí! "%
CreateInstructorComment
íí# :
(
íí: ;
ClaimsPrincipal
íí; J
User
ííK O
,
ííO P(
CreateInstructorCommentDTO
ìì "%
createInstructorComment
ìì# :
)
ìì: ;
{
îî 
try
ïï 
{
ññ 	
var
òò 
instructorId
òò 
=
òò 
await
ôô 
_unitOfWork
ôô !
.
ôô! ""
InstructorRepository
ôô" 6
.
ôô6 7
GetAsync
ôô7 ?
(
ôô? @
i
ôô@ A
=>
ôôB D
i
öö 
.
öö 
InstructorId
öö "
==
öö# %%
createInstructorComment
öö& =
.
öö= >
instructorId
öö> J
)
ööJ K
;
ööK L
if
õõ 
(
õõ 
instructorId
õõ 
==
õõ 
null
õõ  $
)
õõ$ %
{
úú 
return
ùù 
new
ùù 
ResponseDTO
ùù &
(
ùù& '
)
ùù' (
{
ûû 
Message
üü 
=
üü 
$str
üü 4
,
üü4 5
Result
†† 
=
†† 
null
†† !
,
††! "
	IsSuccess
°° 
=
°° 
false
°°  %
,
°°% &

StatusCode
¢¢ 
=
¢¢  
$num
¢¢! $
}
££ 
;
££ 
}
§§ 
var
¶¶ 
userId
¶¶ 
=
¶¶ 
User
¶¶ 
.
¶¶ 
Claims
¶¶ $
.
¶¶$ %
FirstOrDefault
¶¶% 3
(
¶¶3 4
x
¶¶4 5
=>
¶¶6 8
x
¶¶9 :
.
¶¶: ;
Type
¶¶; ?
==
¶¶@ B

ClaimTypes
¶¶C M
.
¶¶M N
NameIdentifier
¶¶N \
)
¶¶\ ]
?
¶¶] ^
.
¶¶^ _
Value
¶¶_ d
;
¶¶d e
var
ßß 
admin
ßß 
=
ßß 
await
ßß 
_unitOfWork
ßß )
.
ßß) *#
UserManagerRepository
ßß* ?
.
ßß? @
FindByIdAsync
ßß@ M
(
ßßM N
userId
ßßN T
)
ßßT U
;
ßßU V
InstructorComment
™™ 
comment
™™ %
=
™™& '
new
™™( +
InstructorComment
™™, =
(
™™= >
)
™™> ?
{
´´ 
Comment
¨¨ 
=
¨¨ %
createInstructorComment
¨¨ 1
.
¨¨1 2
Comment
¨¨2 9
,
¨¨9 :
InstructorId
≠≠ 
=
≠≠ %
createInstructorComment
≠≠ 6
.
≠≠6 7
instructorId
≠≠7 C
,
≠≠C D
UpdatedTime
ÆÆ 
=
ÆÆ 
DateTime
ÆÆ &
.
ÆÆ& '
Now
ÆÆ' *
,
ÆÆ* +
CreatedTime
ØØ 
=
ØØ 
DateTime
ØØ &
.
ØØ& '
Now
ØØ' *
,
ØØ* +
	CreatedBy
∞∞ 
=
∞∞ 
admin
∞∞ !
.
∞∞! "
Email
∞∞" '
,
∞∞' (
	UpdatedBy
±± 
=
±± 
$str
±± 
,
±± 
Status
≤≤ 
=
≤≤ 
$num
≤≤ 
}
≥≥ 
;
≥≥ 
await
∂∂ 
_unitOfWork
∂∂ 
.
∂∂ )
InstructorCommentRepository
∂∂ 9
.
∂∂9 :
AddAsync
∂∂: B
(
∂∂B C
comment
∂∂C J
)
∂∂J K
;
∂∂K L
await
∑∑ 
_unitOfWork
∑∑ 
.
∑∑ 
	SaveAsync
∑∑ '
(
∑∑' (
)
∑∑( )
;
∑∑) *
return
∏∏ 
new
∏∏ 
ResponseDTO
∏∏ "
(
∏∏" #
)
∏∏# $
{
ππ 
Message
∫∫ 
=
∫∫ 
$str
∫∫ 8
,
∫∫8 9
Result
ªª 
=
ªª 
comment
ªª  
,
ªª  !
	IsSuccess
ºº 
=
ºº 
true
ºº  
,
ºº  !

StatusCode
ΩΩ 
=
ΩΩ 
$num
ΩΩ  
,
ΩΩ  !
}
ææ 
;
ææ 
}
øø 	
catch
¿¿ 
(
¿¿ 
	Exception
¿¿ 
e
¿¿ 
)
¿¿ 
{
¡¡ 	
return
¬¬ 
new
¬¬ 
ResponseDTO
¬¬ "
{
√√ 
Message
ƒƒ 
=
ƒƒ 
e
ƒƒ 
.
ƒƒ 
Message
ƒƒ #
,
ƒƒ# $
Result
≈≈ 
=
≈≈ 
null
≈≈ 
,
≈≈ 
	IsSuccess
∆∆ 
=
∆∆ 
false
∆∆ !
,
∆∆! "

StatusCode
«« 
=
«« 
$num
««  
}
»» 
;
»» 
}
…… 	
}
   
public
ÃÃ 

async
ÃÃ 
Task
ÃÃ 
<
ÃÃ 
ResponseDTO
ÃÃ !
>
ÃÃ! "%
UpdateInstructorComment
ÃÃ# :
(
ÃÃ: ;
ClaimsPrincipal
ÃÃ; J
User
ÃÃK O
,
ÃÃO P(
UpdateInstructorCommentDTO
ÕÕ "(
updateInstructorCommentDTO
ÕÕ# =
)
ÕÕ= >
{
ŒŒ 
try
œœ 
{
–– 	
var
—— 
instructorId
—— 
=
—— 
await
““ 
_unitOfWork
““ !
.
““! ")
InstructorCommentRepository
““" =
.
““= >
GetAsync
““> F
(
““F G
i
““G H
=>
““I K
i
““L M
.
““M N
Id
““N P
==
““Q S(
updateInstructorCommentDTO
““T n
.
““n o
Id
““o q
)
““q r
;
““r s
if
”” 
(
”” 
instructorId
”” 
==
”” 
null
””  $
)
””$ %
{
‘‘ 
return
’’ 
new
’’ 
ResponseDTO
’’ &
(
’’& '
)
’’' (
{
÷÷ 
Message
◊◊ 
=
◊◊ 
$str
◊◊ 4
,
◊◊4 5
Result
ÿÿ 
=
ÿÿ 
null
ÿÿ !
,
ÿÿ! "
	IsSuccess
ŸŸ 
=
ŸŸ 
false
ŸŸ  %
,
ŸŸ% &

StatusCode
⁄⁄ 
=
⁄⁄  
$num
⁄⁄! $
}
€€ 
;
€€ 
}
‹‹ 
var
ﬁﬁ 
userId
ﬁﬁ 
=
ﬁﬁ 
User
ﬁﬁ 
.
ﬁﬁ 
Claims
ﬁﬁ $
.
ﬁﬁ$ %
FirstOrDefault
ﬁﬁ% 3
(
ﬁﬁ3 4
x
ﬁﬁ4 5
=>
ﬁﬁ6 8
x
ﬁﬁ9 :
.
ﬁﬁ: ;
Type
ﬁﬁ; ?
==
ﬁﬁ@ B

ClaimTypes
ﬁﬁC M
.
ﬁﬁM N
NameIdentifier
ﬁﬁN \
)
ﬁﬁ\ ]
?
ﬁﬁ] ^
.
ﬁﬁ^ _
Value
ﬁﬁ_ d
;
ﬁﬁd e
var
ﬂﬂ 
admin
ﬂﬂ 
=
ﬂﬂ 
await
ﬂﬂ 
_unitOfWork
ﬂﬂ )
.
ﬂﬂ) *#
UserManagerRepository
ﬂﬂ* ?
.
ﬂﬂ? @
FindByIdAsync
ﬂﬂ@ M
(
ﬂﬂM N
userId
ﬂﬂN T
)
ﬂﬂT U
;
ﬂﬂU V
instructorId
‚‚ 
.
‚‚ 
UpdatedTime
‚‚ $
=
‚‚% &
DateTime
‚‚' /
.
‚‚/ 0
Now
‚‚0 3
;
‚‚3 4
instructorId
„„ 
.
„„ 
	UpdatedBy
„„ "
=
„„# $
admin
„„% *
.
„„* +
Email
„„+ 0
;
„„0 1
instructorId
‰‰ 
.
‰‰ 
Comment
‰‰  
=
‰‰! "(
updateInstructorCommentDTO
‰‰# =
.
‰‰= >
comment
‰‰> E
;
‰‰E F
instructorId
ÂÂ 
.
ÂÂ 
Status
ÂÂ 
=
ÂÂ  !
$num
ÂÂ" #
;
ÂÂ# $
_unitOfWork
ÁÁ 
.
ÁÁ )
InstructorCommentRepository
ÁÁ 3
.
ÁÁ3 4
Update
ÁÁ4 :
(
ÁÁ: ;
instructorId
ÁÁ; G
)
ÁÁG H
;
ÁÁH I
await
ÍÍ 
_unitOfWork
ÍÍ 
.
ÍÍ 
	SaveAsync
ÍÍ '
(
ÍÍ' (
)
ÍÍ( )
;
ÍÍ) *
return
ÏÏ 
new
ÏÏ 
ResponseDTO
ÏÏ "
(
ÏÏ" #
)
ÏÏ# $
{
ÌÌ 
Message
ÓÓ 
=
ÓÓ 
$str
ÓÓ 8
,
ÓÓ8 9
Result
ÔÔ 
=
ÔÔ 
null
ÔÔ 
,
ÔÔ 
	IsSuccess
 
=
 
true
  
,
  !

StatusCode
ÒÒ 
=
ÒÒ 
$num
ÒÒ  
,
ÒÒ  !
}
ÚÚ 
;
ÚÚ 
}
ÛÛ 	
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
e
ÙÙ 
)
ÙÙ 
{
ıı 	
return
ˆˆ 
new
ˆˆ 
ResponseDTO
ˆˆ "
{
˜˜ 
Message
¯¯ 
=
¯¯ 
e
¯¯ 
.
¯¯ 
Message
¯¯ #
,
¯¯# $
Result
˘˘ 
=
˘˘ 
null
˘˘ 
,
˘˘ 
	IsSuccess
˙˙ 
=
˙˙ 
false
˙˙ !
,
˙˙! "

StatusCode
˚˚ 
=
˚˚ 
$num
˚˚  
}
¸¸ 
;
¸¸ 
}
˝˝ 	
}
˛˛ 
public
ÄÄ 

async
ÄÄ 
Task
ÄÄ 
<
ÄÄ 
ResponseDTO
ÄÄ !
>
ÄÄ! "%
DeleteInstructorComment
ÄÄ# :
(
ÄÄ: ;
Guid
ÄÄ; ?
	commentId
ÄÄ@ I
)
ÄÄI J
{
ÅÅ 
try
ÇÇ 
{
ÉÉ 	
var
ÑÑ 
comment
ÑÑ 
=
ÑÑ 
await
ÖÖ 
_unitOfWork
ÖÖ !
.
ÖÖ! ")
InstructorCommentRepository
ÖÖ" =
.
ÖÖ= >
GetAsync
ÖÖ> F
(
ÖÖF G
x
ÖÖG H
=>
ÖÖI K
x
ÖÖL M
.
ÖÖM N
Id
ÖÖN P
==
ÖÖQ S
	commentId
ÖÖT ]
)
ÖÖ] ^
;
ÖÖ^ _
if
ÜÜ 
(
ÜÜ 
comment
ÜÜ 
==
ÜÜ 
null
ÜÜ 
)
ÜÜ  
{
áá 
return
àà 
new
àà 
ResponseDTO
àà &
(
àà& '
)
àà' (
{
ââ 
Message
ää 
=
ää 
$str
ää 5
,
ää5 6
	IsSuccess
ãã 
=
ãã 
false
ãã  %
,
ãã% &

StatusCode
åå 
=
åå  
$num
åå! $
,
åå$ %
Result
çç 
=
çç 
null
çç !
,
çç! "
}
éé 
;
éé 
}
èè 
comment
íí 
.
íí 
Status
íí 
=
íí 
$num
íí 
;
íí 
_unitOfWork
îî 
.
îî )
InstructorCommentRepository
îî 3
.
îî3 4
Update
îî4 :
(
îî: ;
comment
îî; B
)
îîB C
;
îîC D
await
ïï 
_unitOfWork
ïï 
.
ïï 
	SaveAsync
ïï '
(
ïï' (
)
ïï( )
;
ïï) *
return
óó 
new
óó 
ResponseDTO
óó "
(
óó" #
)
óó# $
{
òò 
Message
ôô 
=
ôô 
$str
ôô 8
,
ôô8 9
	IsSuccess
öö 
=
öö 
true
öö  
,
öö  !

StatusCode
õõ 
=
õõ 
$num
õõ  
,
õõ  !
Result
úú 
=
úú 
comment
úú  
.
úú  !
Id
úú! #
,
úú# $
}
ùù 
;
ùù 
}
ûû 	
catch
üü 
(
üü 
	Exception
üü 
e
üü 
)
üü 
{
†† 	
return
°° 
new
°° 
ResponseDTO
°° "
{
¢¢ 
Message
££ 
=
££ 
e
££ 
.
££ 
Message
££ #
,
££# $
Result
§§ 
=
§§ 
null
§§ 
,
§§ 
	IsSuccess
•• 
=
•• 
false
•• !
,
••! "

StatusCode
¶¶ 
=
¶¶ 
$num
¶¶  
}
ßß 
;
ßß 
}
®® 	
}
©© 
public
´´ 

async
´´ 
Task
´´ 
<
´´ 
ResponseDTO
´´ !
>
´´! "
ExportInstructors
´´# 4
(
´´4 5
string
´´5 ;
userId
´´< B
,
´´B C
int
´´D G
month
´´H M
,
´´M N
int
´´O R
year
´´S W
)
´´W X
{
¨¨ 
var
≠≠ 
instructors
≠≠ 
=
≠≠ 
_unitOfWork
≠≠ %
.
≠≠% &"
InstructorRepository
≠≠& :
.
≠≠: ;
GetAllAsync
≠≠; F
(
≠≠F G
includeProperties
≠≠G X
:
≠≠X Y
$str
≠≠Z k
)
≠≠k l
.
ÆÆ 

GetAwaiter
ÆÆ 
(
ÆÆ 
)
ÆÆ 
.
ÆÆ 
	GetResult
ÆÆ #
(
ÆÆ# $
)
ÆÆ$ %
.
ÆÆ% &
ToList
ÆÆ& ,
(
ÆÆ, -
)
ÆÆ- .
;
ÆÆ. /
instructors
∞∞ 
=
∞∞ 
instructors
∞∞ !
.
∞∞! "
Where
∞∞" '
(
∞∞' (
x
∞∞( )
=>
∞∞* ,
x
±± 
.
±± 
ApplicationUser
±± !
.
±±! "

CreateTime
±±" ,
.
±±, -
Value
±±- 2
.
±±2 3
Month
±±3 8
==
±±9 ;
month
±±< A
&&
±±B D
x
±±E F
.
±±F G
ApplicationUser
±±G V
.
±±V W

CreateTime
±±W a
.
±±a b
Value
±±b g
.
±±g h
Year
±±h l
==
±±m o
year
±±p t
)
±±t u
.
≤≤ 
ToList
≤≤ 
(
≤≤ 
)
≤≤ 
;
≤≤ 
var
¥¥  
instructorInfoDtos
¥¥ 
=
¥¥  
_mapper
¥¥! (
.
¥¥( )
Map
¥¥) ,
<
¥¥, -
List
¥¥- 1
<
¥¥1 2
InstructorInfoDTO
¥¥2 C
>
¥¥C D
>
¥¥D E
(
¥¥E F
instructors
¥¥F Q
)
¥¥Q R
;
¥¥R S
var
µµ 
fileName
µµ 
=
µµ 
await
µµ 
_closedXmlService
µµ .
.
µµ. /#
ExportInstructorExcel
µµ/ D
(
µµD E 
instructorInfoDtos
µµE W
)
µµW X
;
µµX Y
await
∏∏ 
_notificationHub
∏∏ 
.
∏∏ 
Clients
∏∏ &
.
∏∏& '
User
∏∏' +
(
∏∏+ ,
userId
∏∏, 2
)
∏∏2 3
.
∏∏3 4
	SendAsync
∏∏4 =
(
∏∏= >
$str
∏∏> P
,
∏∏P Q
fileName
∏∏R Z
)
∏∏Z [
;
∏∏[ \
return
∫∫ 
new
∫∫ 
ResponseDTO
∫∫ 
(
∫∫ 
)
∫∫  
{
ªª 	
Message
ºº 
=
ºº 
$str
ºº "
,
ºº" #
	IsSuccess
ΩΩ 
=
ΩΩ 
true
ΩΩ 
,
ΩΩ 

StatusCode
ææ 
=
ææ 
$num
ææ 
,
ææ 
Result
øø 
=
øø 
null
øø 
}
¿¿ 	
;
¿¿	 

}
¡¡ 
public
√√ 

async
√√ 
Task
√√ 
<
√√ "
ClosedXMLResponseDTO
√√ *
>
√√* +!
DownloadInstructors
√√, ?
(
√√? @
string
√√@ F
fileName
√√G O
)
√√O P
{
ƒƒ 
try
≈≈ 
{
∆∆ 	
string
«« 
filePath
«« 
=
«« 
Path
«« "
.
««" #
Combine
««# *
(
««* +
_env
««+ /
.
««/ 0
ContentRootPath
««0 ?
,
««? @
_config
««A H
[
««H I
$str
««I p
]
««p q
,
««q r
fileName
««s {
)
««{ |
;
««| }
if
…… 
(
…… 
!
…… 
File
…… 
.
…… 
Exists
…… 
(
…… 
filePath
…… %
)
……% &
)
……& '
{
   
return
ÀÀ 
new
ÀÀ "
ClosedXMLResponseDTO
ÀÀ /
(
ÀÀ/ 0
)
ÀÀ0 1
{
ÃÃ 
Message
ÕÕ 
=
ÕÕ 
$str
ÕÕ 2
,
ÕÕ2 3
	IsSuccess
ŒŒ 
=
ŒŒ 
false
ŒŒ  %
,
ŒŒ% &

StatusCode
œœ 
=
œœ  
$num
œœ! $
,
œœ$ %
Stream
–– 
=
–– 
null
–– !
,
––! "
ContentType
—— 
=
——  !
null
——" &
,
——& '
FileName
““ 
=
““ 
null
““ #
,
““# $
}
”” 
;
”” 
}
‘‘ 
var
◊◊ 
memory
◊◊ 
=
◊◊ 
new
◊◊ 
MemoryStream
◊◊ )
(
◊◊) *
)
◊◊* +
;
◊◊+ ,
using
ÿÿ 
(
ÿÿ 
var
ÿÿ 
stream
ÿÿ 
=
ÿÿ 
new
ÿÿ  #

FileStream
ÿÿ$ .
(
ÿÿ. /
filePath
ÿÿ/ 7
,
ÿÿ7 8
FileMode
ÿÿ9 A
.
ÿÿA B
Open
ÿÿB F
)
ÿÿF G
)
ÿÿG H
{
ŸŸ 
stream
⁄⁄ 
.
⁄⁄ 
CopyTo
⁄⁄ 
(
⁄⁄ 
memory
⁄⁄ $
)
⁄⁄$ %
;
⁄⁄% &
}
€€ 
memory
›› 
.
›› 
Position
›› 
=
›› 
$num
›› 
;
››  
var
ﬁﬁ 
contentType
ﬁﬁ 
=
ﬁﬁ 
$str
ﬁﬁ a
;
ﬁﬁa b
System
·· 
.
·· 
IO
·· 
.
·· 
File
·· 
.
·· 
Delete
·· !
(
··! "
filePath
··" *
)
··* +
;
··+ ,
return
„„ 
new
„„ "
ClosedXMLResponseDTO
„„ +
(
„„+ ,
)
„„, -
{
‰‰ 
Stream
ÂÂ 
=
ÂÂ 
memory
ÂÂ 
,
ÂÂ  
ContentType
ÊÊ 
=
ÊÊ 
contentType
ÊÊ )
,
ÊÊ) *
FileName
ÁÁ 
=
ÁÁ 
fileName
ÁÁ #
,
ÁÁ# $

StatusCode
ËË 
=
ËË 
$num
ËË  
,
ËË  !
	IsSuccess
ÈÈ 
=
ÈÈ 
true
ÈÈ  
,
ÈÈ  !
Message
ÍÍ 
=
ÍÍ 
$str
ÍÍ 6
}
ÎÎ 
;
ÎÎ 
}
ÏÏ 	
catch
ÌÌ 
(
ÌÌ 
	Exception
ÌÌ 
e
ÌÌ 
)
ÌÌ 
{
ÓÓ 	
Console
ÔÔ 
.
ÔÔ 
	WriteLine
ÔÔ 
(
ÔÔ 
e
ÔÔ 
)
ÔÔ  
;
ÔÔ  !
throw
 
;
 
}
ÒÒ 	
}
ÚÚ 
}ÛÛ ‹k
hD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\FirebaseService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
FirebaseService 
: 
IFirebaseService /
{		 
private

 
readonly

 
StorageClient

 "
_storageClient

# 1
;

1 2
private 
readonly 
string 
_bucketName '
=( )
$str* J
;J K
public 

FirebaseService 
( 
StorageClient (
storageClient) 6
)6 7
{ 
_storageClient 
= 
storageClient &
;& '
} 
public 

async 
Task 
< 
ResponseDTO !
>! "
UploadImage# .
(. /
	IFormFile/ 8
file9 =
,= >
string? E
folderF L
)L M
{ 
if 

( 
file 
is 
null 
|| 
file  
.  !
Length! '
==( *
$num+ ,
), -
{ 	
return 
new 
ResponseDTO "
(" #
)# $
{ 
	IsSuccess 
= 
false !
,! "

StatusCode 
= 
$num  
,  !
Message   
=   
$str   *
}!! 
;!! 
}"" 	
var$$ 
fileName$$ 
=$$ 
$"$$ 
{$$ 
Guid$$ 
.$$ 
NewGuid$$ &
($$& '
)$$' (
}$$( )
$str$$) *
{$$* +
file$$+ /
.$$/ 0
FileName$$0 8
}$$8 9
"$$9 :
;$$: ;
var&& 
filePath&& 
=&& 
$"&& 
{&& 
folder&&  
}&&  !
$str&&! "
{&&" #
fileName&&# +
}&&+ ,
"&&, -
;&&- .
string(( 
url(( 
;(( 
await** 
using** 
(** 
var** 
stream** 
=**  !
file**" &
.**& '
OpenReadStream**' 5
(**5 6
)**6 7
)**7 8
{++ 	
var,, 
result,, 
=,, 
await,, 
_storageClient,, -
.,,- .
UploadObjectAsync,,. ?
(,,? @
_bucketName,,@ K
,,,K L
filePath,,M U
,,,U V
null,,W [
,,,[ \
stream,,] c
),,c d
;,,d e
}-- 	
return// 
new// 
ResponseDTO// 
(// 
)//  
{00 	
	IsSuccess11 
=11 
true11 
,11 

StatusCode22 
=22 
$num22 
,22 
Result33 
=33 
filePath33 
,33 
Message44 
=44 
$str44 2
}55 	
;55	 

}66 
public>> 

async>> 
Task>> 
<>> 
ResponseDTO>> !
>>>! "
UploadVideo>># .
(>>. /
	IFormFile>>/ 8
file>>9 =
,>>= >
Guid>>? C
?>>C D
courseId>>E M
)>>M N
{?? 
if@@ 

(@@ 
file@@ 
is@@ 
null@@ 
||@@ 
file@@  
.@@  !
Length@@! '
==@@( *
$num@@+ ,
)@@, -
{AA 	
returnBB 
newBB 
ResponseDTOBB "
(BB" #
)BB# $
{CC 
	IsSuccessDD 
=DD 
falseDD !
,DD! "

StatusCodeEE 
=EE 
$numEE  
,EE  !
MessageFF 
=FF 
$strFF *
}GG 
;GG 
}HH 	
varJJ 
fileNameJJ 
=JJ 
$"JJ 
{JJ 
GuidJJ 
.JJ 
NewGuidJJ &
(JJ& '
)JJ' (
}JJ( )
$strJJ) *
{JJ* +
fileJJ+ /
.JJ/ 0
FileNameJJ0 8
}JJ8 9
"JJ9 :
;JJ: ;
varLL 
filePathLL 
=LL 
$"LL 
{LL 
$strLL "
}LL" #
$strLL# $
{LL$ %
courseIdLL% -
}LL- .
$strLL. /
{LL/ 0
$strLL0 8
}LL8 9
$strLL9 :
{LL: ;
fileNameLL; C
}LLC D
"LLD E
;LLE F
stringNN 
urlNN 
;NN 
awaitPP 
usingPP 
(PP 
varPP 
streamPP 
=PP  !
filePP" &
.PP& '
OpenReadStreamPP' 5
(PP5 6
)PP6 7
)PP7 8
{QQ 	
varRR 
resultRR 
=RR 
awaitRR 
_storageClientRR -
.RR- .
UploadObjectAsyncRR. ?
(RR? @
_bucketNameRR@ K
,RRK L
filePathRRM U
,RRU V
nullRRW [
,RR[ \
streamRR] c
)RRc d
;RRd e
}SS 	
returnUU 
newUU 
ResponseDTOUU 
(UU 
)UU  
{VV 	
	IsSuccessWW 
=WW 
trueWW 
,WW 

StatusCodeXX 
=XX 
$numXX 
,XX 
ResultYY 
=YY 
filePathYY 
,YY 
MessageZZ 
=ZZ 
$strZZ 2
}[[ 	
;[[	 

}\\ 
publicdd 

asyncdd 
Taskdd 
<dd 
ResponseDTOdd !
>dd! "
UploadSlidedd# .
(dd. /
	IFormFiledd/ 8
filedd9 =
,dd= >
Guiddd? C
?ddC D
courseIdddE M
)ddM N
{ee 
ifff 

(ff 
fileff 
isff 
nullff 
||ff 
fileff  
.ff  !
Lengthff! '
==ff( *
$numff+ ,
)ff, -
{gg 	
returnhh 
newhh 
ResponseDTOhh "
(hh" #
)hh# $
{ii 
	IsSuccessjj 
=jj 
falsejj !
,jj! "

StatusCodekk 
=kk 
$numkk  
,kk  !
Messagell 
=ll 
$strll *
}mm 
;mm 
}nn 	
varpp 
fileNamepp 
=pp 
$"pp 
{pp 
Guidpp 
.pp 
NewGuidpp &
(pp& '
)pp' (
}pp( )
$strpp) *
{pp* +
filepp+ /
.pp/ 0
FileNamepp0 8
}pp8 9
"pp9 :
;pp: ;
varrr 
filePathrr 
=rr 
$"rr 
{rr 
$strrr "
}rr" #
$strrr# $
{rr$ %
courseIdrr% -
}rr- .
$strrr. /
{rr/ 0
$strrr0 8
}rr8 9
$strrr9 :
{rr: ;
fileNamerr; C
}rrC D
"rrD E
;rrE F
stringtt 
urltt 
;tt 
awaitvv 
usingvv 
(vv 
varvv 
streamvv 
=vv  !
filevv" &
.vv& '
OpenReadStreamvv' 5
(vv5 6
)vv6 7
)vv7 8
{ww 	
varxx 
resultxx 
=xx 
awaitxx 
_storageClientxx -
.xx- .
UploadObjectAsyncxx. ?
(xx? @
_bucketNamexx@ K
,xxK L
filePathxxM U
,xxU V
nullxxW [
,xx[ \
streamxx] c
)xxc d
;xxd e
}yy 	
return{{ 
new{{ 
ResponseDTO{{ 
({{ 
){{  
{|| 	
	IsSuccess}} 
=}} 
true}} 
,}} 

StatusCode~~ 
=~~ 
$num~~ 
,~~ 
Result 
= 
filePath 
, 
Message
ÄÄ 
=
ÄÄ 
$str
ÄÄ 2
}
ÅÅ 	
;
ÅÅ	 

}
ÇÇ 
public
ää 

async
ää 
Task
ää 
<
ää 
ResponseDTO
ää !
>
ää! "
	UploadDoc
ää# ,
(
ää, -
	IFormFile
ää- 6
file
ää7 ;
,
ää; <
Guid
ää= A
?
ääA B
courseId
ääC K
)
ääK L
{
ãã 
if
åå 

(
åå 
file
åå 
is
åå 
null
åå 
||
åå 
file
åå  
.
åå  !
Length
åå! '
==
åå( *
$num
åå+ ,
)
åå, -
{
çç 	
return
éé 
new
éé 
ResponseDTO
éé "
(
éé" #
)
éé# $
{
èè 
	IsSuccess
êê 
=
êê 
false
êê !
,
êê! "

StatusCode
ëë 
=
ëë 
$num
ëë  
,
ëë  !
Message
íí 
=
íí 
$str
íí *
}
ìì 
;
ìì 
}
îî 	
var
ññ 
fileName
ññ 
=
ññ 
$"
ññ 
{
ññ 
Guid
ññ 
.
ññ 
NewGuid
ññ &
(
ññ& '
)
ññ' (
}
ññ( )
$str
ññ) *
{
ññ* +
file
ññ+ /
.
ññ/ 0
FileName
ññ0 8
}
ññ8 9
"
ññ9 :
;
ññ: ;
var
òò 
filePath
òò 
=
òò 
$"
òò 
{
òò 
$str
òò "
}
òò" #
$str
òò# $
{
òò$ %
courseId
òò% -
}
òò- .
$str
òò. /
{
òò/ 0
$str
òò0 6
}
òò6 7
$str
òò7 8
{
òò8 9
fileName
òò9 A
}
òòA B
"
òòB C
;
òòC D
string
öö 
url
öö 
;
öö 
await
úú 
using
úú 
(
úú 
var
úú 
stream
úú 
=
úú  !
file
úú" &
.
úú& '
OpenReadStream
úú' 5
(
úú5 6
)
úú6 7
)
úú7 8
{
ùù 	
var
ûû 
result
ûû 
=
ûû 
await
ûû 
_storageClient
ûû -
.
ûû- .
UploadObjectAsync
ûû. ?
(
ûû? @
_bucketName
ûû@ K
,
ûûK L
filePath
ûûM U
,
ûûU V
null
ûûW [
,
ûû[ \
stream
ûû] c
)
ûûc d
;
ûûd e
}
üü 	
return
°° 
new
°° 
ResponseDTO
°° 
(
°° 
)
°°  
{
¢¢ 	
	IsSuccess
££ 
=
££ 
true
££ 
,
££ 

StatusCode
§§ 
=
§§ 
$num
§§ 
,
§§ 
Result
•• 
=
•• 
filePath
•• 
,
•• 
Message
¶¶ 
=
¶¶ 
$str
¶¶ 0
}
ßß 	
;
ßß	 

}
®® 
public
™™ 

async
™™ 
Task
™™ 
<
™™ 
MemoryStream
™™ "
>
™™" #

GetContent
™™$ .
(
™™. /
string
™™/ 5
?
™™5 6
filePath
™™7 ?
)
™™? @
{
´´ 
try
¨¨ 
{
≠≠ 	
MemoryStream
ÆÆ 
memoryStream
ÆÆ %
=
ÆÆ& '
new
ÆÆ( +
MemoryStream
ÆÆ, 8
(
ÆÆ8 9
)
ÆÆ9 :
;
ÆÆ: ;
await
∞∞ 
_storageClient
∞∞  
.
∞∞  !!
DownloadObjectAsync
∞∞! 4
(
∞∞4 5
_bucketName
∞∞5 @
,
∞∞@ A
filePath
∞∞B J
,
∞∞J K
memoryStream
∞∞L X
)
∞∞X Y
;
∞∞Y Z
memoryStream
≤≤ 
.
≤≤ 
Seek
≤≤ 
(
≤≤ 
$num
≤≤ 
,
≤≤  

SeekOrigin
≤≤! +
.
≤≤+ ,
Begin
≤≤, 1
)
≤≤1 2
;
≤≤2 3
return
¥¥ 
memoryStream
¥¥ 
;
¥¥  
}
µµ 	
catch
∂∂ 
(
∂∂ 
	Exception
∂∂ 
e
∂∂ 
)
∂∂ 
{
∑∑ 	
return
∏∏ 
null
∏∏ 
;
∏∏ 
}
ππ 	
}
∫∫ 
public
¡¡ 

async
¡¡ 
Task
¡¡ 
<
¡¡ 
MemoryStream
¡¡ "
>
¡¡" #
GetImage
¡¡$ ,
(
¡¡, -
string
¡¡- 3
filePath
¡¡4 <
)
¡¡< =
{
¬¬ 
try
√√ 
{
ƒƒ 	
MemoryStream
≈≈ 
memoryStream
≈≈ %
=
≈≈& '
new
≈≈( +
MemoryStream
≈≈, 8
(
≈≈8 9
)
≈≈9 :
;
≈≈: ;
await
«« 
_storageClient
««  
.
««  !!
DownloadObjectAsync
««! 4
(
««4 5
_bucketName
««5 @
,
««@ A
filePath
««B J
,
««J K
memoryStream
««L X
)
««X Y
;
««Y Z
memoryStream
…… 
.
…… 
Seek
…… 
(
…… 
$num
…… 
,
……  

SeekOrigin
……! +
.
……+ ,
Begin
……, 1
)
……1 2
;
……2 3
return
ÀÀ 
memoryStream
ÀÀ 
;
ÀÀ  
}
ÃÃ 	
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ 
e
ÕÕ 
)
ÕÕ 
{
ŒŒ 	
return
œœ 
null
œœ 
;
œœ 
}
–– 	
}
—— 
}““ â4
fD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\EmailTemplate.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Models #
{ 
public 

class 
EmailTemplate 
{		 
public

 
int

 
Id

 
{

 
get

 
;

 
set

  
;

  !
}

" #
public 
string 
TemplateName "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
string 

SenderName  
{! "
get# &
;& '
set( +
;+ ,
}- .
public 
string 
SenderEmail !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
string 
Category 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
SubjectLine !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
string 
PreHeaderText #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
PersonalizationTags )
{* +
get, /
;/ 0
set1 4
;4 5
}6 7
public 
string 
BodyContent !
{" #
get$ '
;' (
set) ,
;, -
}. /
public 
string 
FooterContent #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
CallToAction "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
string 
Language 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
string 
RecipientType #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
string 
CreateBy 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
DateTime 

CreateTime "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
string 
UpdateBy 
{  
get! $
;$ %
set& )
;) *
}+ ,
public 
DateTime 

UpdateTime "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
string 
Status 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 

BuildEmail  
(  !
string! '
recipientName( 5
,5 6
string7 =
confirmationLink> N
=O P
$strQ S
,S T
stringU [
token\ a
=b c
$strd f
)f g
{ 	
string 
	emailBody 
= 
BodyContent *
;* +
if!! 
(!! 
!!! 
string!! 
.!! 
IsNullOrEmpty!! %
(!!% &
confirmationLink!!& 6
)!!6 7
)!!7 8
{"" 
	emailBody## 
=## 
	emailBody## %
.##% &
Replace##& -
(##- .
$str##. B
,##B C
confirmationLink##D T
)##T U
;##U V
}$$ 
if&& 
(&& 
!&& 
string&& 
.&& 
IsNullOrEmpty&& %
(&&% &
token&&& +
)&&+ ,
)&&, -
{'' 
	emailBody(( 
=(( 
	emailBody(( %
.((% &
Replace((& -
(((- .
$str((. 7
,((7 8
token((9 >
)((> ?
;((? @
})) 
	emailBody++ 
=++ 
	emailBody++ !
.++! "
Replace++" )
(++) *
$str++* ;
,++; <
recipientName++= J
)++J K
;++K L
string-- 
	fullEmail-- 
=-- 
$@"-- "
$str-0" 
{00 
TemplateName00 !
}00! "
$str01" 
{11 
PreHeaderText11 !
}11! "
$str12" 
{22 
	emailBody22 
}22 
$str23 
{33 
FooterContent33 !
}33! "
$str34" 
{44 
CallToAction44 )
}44) *
$str46* 
"66 
;66 
return88 
	fullEmail88 
;88 
}99 	
}:: 
public<< 

class<< #
EmailTemplateRepository<< (
{== 
private>> 
readonly>> 
string>> 
_connectionString>>  1
;>>1 2
public@@ #
EmailTemplateRepository@@ &
(@@& '
string@@' -
connectionString@@. >
)@@> ?
{AA 	
_connectionStringBB 
=BB 
connectionStringBB  0
;BB0 1
}CC 	
publicEE 
asyncEE 
TaskEE 
<EE 
EmailTemplateEE '
>EE' ('
GetEmailTemplateByNameAsyncEE) D
(EED E
stringEEE K
templateNameEEL X
)EEX Y
{FF 	
usingGG 
(GG 
varGG 

connectionGG !
=GG" #
newGG$ '
SqlConnectionGG( 5
(GG5 6
_connectionStringGG6 G
)GGG H
)GGH I
{HH 
varII 
queryII 
=II 
$strIK A
;KKA B
returnLL 
awaitLL 

connectionLL '
.LL' (%
QuerySingleOrDefaultAsyncLL( A
<LLA B
EmailTemplateLLB O
>LLO P
(LLP Q
queryLLQ V
,LLV W
newMM 
{MM 
TemplateNameMM &
=MM' (
templateNameMM) 5
}MM6 7
)MM7 8
;MM8 9
}NN 
}OO 	
}PP 
}QQ ≈’
eD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\EmailService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
EmailService 
: 
IEmailService )
{ 
private 
readonly 
UserManager  
<  !
ApplicationUser! 0
>0 1
_userManager2 >
;> ?
private 
readonly 
IConfiguration #
_configuration$ 2
;2 3
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
IMapper 
_mapper $
;$ %
public 

EmailService 
( 
IConfiguration &
configuration' 4
,4 5
IUnitOfWork6 A

unitOfWorkB L
,L M
IMapperN U
mapperV \
,\ ]
UserManager^ i
<i j
ApplicationUserj y
>y z
userManager	{ Ü
)
Ü á
{ 
_userManager 
= 
userManager "
;" #
_configuration 
= 
configuration &
;& '
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; 
} 
public 

async 
Task 
< 
ResponseDTO !
>! "
GetAll# )
() *
ClaimsPrincipal 
User 
, 
string   
?   
filterOn   
,   
string!! 
?!! 
filterQuery!! 
,!! 
string"" 
?"" 
sortBy"" 
,"" 
bool## 
?## 
isAscending## 
,## 
int$$ 

pageNumber$$ 
,$$ 
int%% 
pageSize%% 
)%% 
{&& 
try)) 
{** 	
List++ 
<++ 
EmailTemplate++ 
>++ 
emailTemplates++  .
=++/ 0
new++1 4
List++5 9
<++9 :
EmailTemplate++: G
>++G H
(++H I
)++I J
;++J K
if.. 
(.. 
!.. 
string.. 
... 
IsNullOrEmpty.. %
(..% &
filterOn..& .
)... /
&&..0 2
!..3 4
string..4 :
...: ;
IsNullOrEmpty..; H
(..H I
filterQuery..I T
)..T U
)..U V
{// 
switch00 
(00 
filterOn00  
.00  !
Trim00! %
(00% &
)00& '
.00' (
ToLower00( /
(00/ 0
)000 1
)001 2
{11 
case22 
$str22 '
:22' (
{33 
emailTemplates44 &
=44' (
_unitOfWork44) 4
.444 5#
EmailTemplateRepository445 L
.44L M
GetAllAsync44M X
(44X Y
)44Y Z
.55 

GetAwaiter55 '
(55' (
)55( )
.55) *
	GetResult55* 3
(553 4
)554 5
.555 6
Where556 ;
(55; <
x55< =
=>55> @
x55A B
.55B C
TemplateName55C O
.55O P
Contains55P X
(55X Y
filterQuery55Y d
,55d e
StringComparison55f v
.55v w%
CurrentCultureIgnoreCase	55w è
)
55è ê
)
55ê ë
.
55ë í
ToList
55í ò
(
55ò ô
)
55ô ö
;
55ö õ
break66 
;66 
}77 
default99 
:99 
{:: 
emailTemplates;; &
=;;' (
_unitOfWork;;) 4
.;;4 5#
EmailTemplateRepository;;5 L
.;;L M
GetAllAsync;;M X
(;;X Y
);;Y Z
.<< 

GetAwaiter<< '
(<<' (
)<<( )
.<<) *
	GetResult<<* 3
(<<3 4
)<<4 5
.<<5 6
ToList<<6 <
(<<< =
)<<= >
;<<> ?
break== 
;== 
}>> 
}?? 
}@@ 
elseAA 
{BB 
emailTemplatesCC 
=CC  
_unitOfWorkCC! ,
.CC, -#
EmailTemplateRepositoryCC- D
.CCD E
GetAllAsyncCCE P
(CCP Q
)CCQ R
.DD 

GetAwaiterDD 
(DD  
)DD  !
.DD! "
	GetResultDD" +
(DD+ ,
)DD, -
.DD- .
ToListDD. 4
(DD4 5
)DD5 6
;DD6 7
}EE 
ifHH 
(HH 
!HH 
stringHH 
.HH 
IsNullOrEmptyHH %
(HH% &
sortByHH& ,
)HH, -
)HH- .
{II 
switchJJ 
(JJ 
sortByJJ 
.JJ 
TrimJJ #
(JJ# $
)JJ$ %
.JJ% &
ToLowerJJ& -
(JJ- .
)JJ. /
)JJ/ 0
{KK 
caseLL 
$strLL '
:LL' (
{MM 
emailTemplatesNN &
=NN' (
isAscendingNN) 4
==NN5 7
trueNN8 <
?OO 
[OO 
..OO !
emailTemplatesOO" 0
.OO0 1
OrderByOO1 8
(OO8 9
xOO9 :
=>OO; =
xOO> ?
.OO? @
TemplateNameOO@ L
)OOL M
]OOM N
:PP 
[PP 
..PP !
emailTemplatesPP" 0
.PP0 1
OrderByDescendingPP1 B
(PPB C
xPPC D
=>PPE G
xPPH I
.PPI J
TemplateNamePPJ V
)PPV W
]PPW X
;PPX Y
breakQQ 
;QQ 
}RR 
caseSS 
$strSS %
:SS% &
{TT 
emailTemplatesUU &
=UU' (
isAscendingUU) 4
==UU5 7
trueUU8 <
?VV 
[VV 
..VV !
emailTemplatesVV" 0
.VV0 1
OrderByVV1 8
(VV8 9
xVV9 :
=>VV; =
xVV> ?
.VV? @

SenderNameVV@ J
)VVJ K
]VVK L
:WW 
[WW 
..WW !
emailTemplatesWW" 0
.WW0 1
OrderByDescendingWW1 B
(WWB C
xWWC D
=>WWE G
xWWH I
.WWI J

SenderNameWWJ T
)WWT U
]WWU V
;WWV W
breakXX 
;XX 
}YY 
caseZZ 
$strZZ &
:ZZ& '
{[[ 
emailTemplates\\ &
=\\' (
isAscending\\) 4
==\\5 7
true\\8 <
?]] 
[]] 
..]] !
emailTemplates]]" 0
.]]0 1
OrderBy]]1 8
(]]8 9
x]]9 :
=>]]; =
x]]> ?
.]]? @
SenderEmail]]@ K
)]]K L
]]]L M
:^^ 
[^^ 
..^^ !
emailTemplates^^" 0
.^^0 1
OrderByDescending^^1 B
(^^B C
x^^C D
=>^^E G
x^^H I
.^^I J
SenderEmail^^J U
)^^U V
]^^V W
;^^W X
break__ 
;__ 
}`` 
caseaa 
$straa #
:aa# $
{bb 
emailTemplatescc &
=cc' (
isAscendingcc) 4
==cc5 7
truecc8 <
?dd 
[dd 
..dd !
emailTemplatesdd" 0
.dd0 1
OrderBydd1 8
(dd8 9
xdd9 :
=>dd; =
xdd> ?
.dd? @
Categorydd@ H
)ddH I
]ddI J
:ee 
[ee 
..ee !
emailTemplatesee" 0
.ee0 1
OrderByDescendingee1 B
(eeB C
xeeC D
=>eeE G
xeeH I
.eeI J
CategoryeeJ R
)eeR S
]eeS T
;eeT U
breakff 
;ff 
}gg 
defaulthh 
:hh 
{ii 
breakjj 
;jj 
}kk 
}ll 
}mm 
ifpp 
(pp 

pageNumberpp 
>pp 
$numpp 
&&pp !
pageSizepp" *
>pp+ ,
$numpp- .
)pp. /
{qq 
varrr 

skipResultrr 
=rr  
(rr! "

pageNumberrr" ,
-rr- .
$numrr/ 0
)rr0 1
*rr2 3
pageSizerr4 <
;rr< =
emailTemplatesss 
=ss  
emailTemplatesss! /
.ss/ 0
Skipss0 4
(ss4 5

skipResultss5 ?
)ss? @
.ss@ A
TakessA E
(ssE F
pageSizessF N
)ssN O
.ssO P
ToListssP V
(ssV W
)ssW X
;ssX Y
}tt 
ifxx 
(xx 
emailTemplatesxx 
.xx 
IsNullOrEmptyxx ,
(xx, -
)xx- .
)xx. /
{yy 
returnzz 
newzz 
ResponseDTOzz &
(zz& '
)zz' (
{{{ 
Message|| 
=|| 
$str|| ;
,||; <
Result}} 
=}} 
null}} !
,}}! "
	IsSuccess~~ 
=~~ 
false~~  %
,~~% &

StatusCode 
=  
$num! $
}
ÄÄ 
;
ÄÄ 
}
ÅÅ 
var
ÉÉ #
instructorInfoLiteDto
ÉÉ %
=
ÉÉ& '
_mapper
ÉÉ( /
.
ÉÉ/ 0
Map
ÉÉ0 3
<
ÉÉ3 4
List
ÉÉ4 8
<
ÉÉ8 9
EmailTemplate
ÉÉ9 F
>
ÉÉF G
>
ÉÉG H
(
ÉÉH I
emailTemplates
ÉÉI W
)
ÉÉW X
;
ÉÉX Y
return
ÖÖ 
new
ÖÖ 
ResponseDTO
ÖÖ "
(
ÖÖ" #
)
ÖÖ# $
{
ÜÜ 
Message
áá 
=
áá 
$str
áá ?
,
áá? @
Result
àà 
=
àà #
instructorInfoLiteDto
àà .
,
àà. /
	IsSuccess
ââ 
=
ââ 
true
ââ  
,
ââ  !

StatusCode
ää 
=
ää 
$num
ää  
}
ãã 
;
ãã 
}
åå 	
catch
çç 
(
çç 
	Exception
çç 
e
çç 
)
çç 
{
éé 	
return
èè 
new
èè 
ResponseDTO
èè "
(
èè" #
)
èè# $
{
êê 
Message
ëë 
=
ëë 
e
ëë 
.
ëë 
Message
ëë #
,
ëë# $
Result
íí 
=
íí 
null
íí 
,
íí 
	IsSuccess
ìì 
=
ìì 
false
ìì !
,
ìì! "

StatusCode
îî 
=
îî 
$num
îî  
}
ïï 
;
ïï 
}
ññ 	
}
óó 
private
†† 
async
†† 
Task
†† 
<
†† 
bool
†† 
>
†† #
SendEmailFromTemplate
†† 2
(
††2 3
string
††3 9
toMail
††: @
,
††@ A
string
††B H
templateName
††I U
,
††U V
string
††W ]
replacementValue
††^ n
)
††n o
{
°° 
var
££ 
template
££ 
=
££ 
await
££ 
_unitOfWork
££ (
.
££( )%
EmailTemplateRepository
££) @
.
££@ A
GetAsync
££A I
(
££I J
t
££J K
=>
££L N
t
££O P
.
££P Q
TemplateName
££Q ]
==
££^ `
templateName
££a m
)
££m n
;
££n o
if
•• 

(
•• 
template
•• 
==
•• 
null
•• 
)
•• 
{
¶¶ 	
throw
®® 
new
®® 
	Exception
®® 
(
®®  
$str
®®  :
)
®®: ;
;
®®; <
}
©© 	
string
¨¨ 
subject
¨¨ 
=
¨¨ 
template
¨¨ !
.
¨¨! "
SubjectLine
¨¨" -
;
¨¨- .
string
≠≠ 
body
≠≠ 
=
≠≠ 
$@"
≠≠ 
$str
≠∞ 
{
∞∞ 
template
∞∞ 
.
∞∞ 
SubjectLine
∞∞ )
}
∞∞) *
$str
∞±* 
{
±± 
template
±± 
.
±± 
PreHeaderText
±± +
}
±±+ ,
$str
±≤, 
{
≤≤ 
template
≤≤ 
.
≤≤ 
BodyContent
≤≤ (
}
≤≤( )
$str
≤≥) 
{
≥≥ 
replacementValue
≥≥ -
}
≥≥- .
$str≥≥. å
{≥≥å ç
template≥≥ç ï
.≥≥ï ñ
CallToAction≥≥ñ ¢
.≥≥¢ £
Replace≥≥£ ™
(≥≥™ ´
$str≥≥´ ¥
,≥≥¥ µ 
replacementValue≥≥∂ ∆
)≥≥∆ «
}≥≥« »
$str≥¥» 
{
¥¥ 
template
¥¥ 
.
¥¥ 
FooterContent
¥¥ '
}
¥¥' (
$str
¥∂( 
"
∂∂ 
;
∂∂ 
return
∏∏ 
await
∏∏ 
SendEmailAsync
∏∏ #
(
∏∏# $
toMail
∏∏$ *
,
∏∏* +
subject
∏∏, 3
,
∏∏3 4
body
∏∏5 9
)
∏∏9 :
;
∏∏: ;
}
ππ 
private
ªª 
async
ªª 
Task
ªª 
<
ªª 
bool
ªª 
>
ªª -
SendEmailInactiveCourseTemplate
ªª <
(
ªª< =
string
ªª= C
studentEmail
ªªD P
,
ªªP Q
string
ªªR X
templateName
ªªY e
,
ªªe f
string
ªªg m
instructorEmail
ªªn }
,
ªª} ~
stringªª Ö
instructorNameªªÜ î
,ªªî ï
stringªªñ ú
courseTitleªªù ®
)ªª® ©
{
ºº 
var
ΩΩ 
template
ΩΩ 
=
ΩΩ 
await
ΩΩ 
_unitOfWork
ΩΩ (
.
ΩΩ( )%
EmailTemplateRepository
ΩΩ) @
.
ΩΩ@ A
GetAsync
ΩΩA I
(
ΩΩI J
t
ΩΩJ K
=>
ΩΩL N
t
ΩΩO P
.
ΩΩP Q
TemplateName
ΩΩQ ]
==
ΩΩ^ `
templateName
ΩΩa m
)
ΩΩm n
;
ΩΩn o
if
øø 

(
øø 
template
øø 
==
øø 
null
øø 
)
øø 
{
¿¿ 	
throw
¡¡ 
new
¡¡ 
	Exception
¡¡ 
(
¡¡  
$str
¡¡  :
)
¡¡: ;
;
¡¡; <
}
¬¬ 	
string
ƒƒ 
subject
ƒƒ 
=
ƒƒ 
template
ƒƒ !
.
ƒƒ! "
SubjectLine
ƒƒ" -
;
ƒƒ- .
string
≈≈ 
body
≈≈ 
=
≈≈ 
$@"
≈≈ 
$str
≈» 
{
»» 
template
»» 
.
»» 
SubjectLine
»» )
}
»») *
$str
»…* 
{
…… 
template
…… 
.
…… 
PreHeaderText
…… +
}
……+ ,
$str
… , 
{
   
template
   
.
   
BodyContent
   (
.
  ( )
Replace
  ) 0
(
  0 1
$str
  1 @
,
  @ A
courseTitle
  B M
)
  M N
.
  N O
Replace
  O V
(
  V W
$str
  W g
,
  g h
instructorName
  i w
)
  w x
}
  x y
$str
 Ày 
{
ÀÀ 
template
ÀÀ 
.
ÀÀ 
FooterContent
ÀÀ '
}
ÀÀ' (
$str
ÀÕ( 
"
ÕÕ 
;
ÕÕ 
return
œœ 
await
œœ *
SendEmailInactiveCourseAsync
œœ 1
(
œœ1 2
instructorEmail
œœ2 A
,
œœA B
studentEmail
œœC O
,
œœO P
subject
œœQ X
,
œœX Y
body
œœZ ^
)
œœ^ _
;
œœ_ `
}
–– 
public
““ 

async
““ 
Task
““ 
<
““ 
bool
““ 
>
““ 
SendEmailAsync
““ *
(
““* +
string
““+ 1
toEmail
““2 9
,
““9 :
string
““; A
subject
““B I
,
““I J
string
““K Q
body
““R V
)
““V W
{
”” 
try
’’ 
{
÷÷ 	
var
◊◊ 
	fromEmail
◊◊ 
=
◊◊ 
_configuration
◊◊ *
[
◊◊* +
$str
◊◊+ D
]
◊◊D E
;
◊◊E F
var
ÿÿ 
fromPassword
ÿÿ 
=
ÿÿ 
_configuration
ÿÿ -
[
ÿÿ- .
$str
ÿÿ. J
]
ÿÿJ K
;
ÿÿK L
var
ŸŸ 
smtpHost
ŸŸ 
=
ŸŸ 
_configuration
ŸŸ )
[
ŸŸ) *
$str
ŸŸ* B
]
ŸŸB C
;
ŸŸC D
var
⁄⁄ 
smtpPort
⁄⁄ 
=
⁄⁄ 
int
⁄⁄ 
.
⁄⁄ 
Parse
⁄⁄ $
(
⁄⁄$ %
_configuration
⁄⁄% 3
[
⁄⁄3 4
$str
⁄⁄4 L
]
⁄⁄L M
)
⁄⁄M N
;
⁄⁄N O
var
›› 
message
›› 
=
›› 
new
›› 
MailMessage
›› )
(
››) *
	fromEmail
››* 3
,
››3 4
toEmail
››5 <
,
››< =
subject
››> E
,
››E F
body
››G K
)
››K L
;
››L M
message
ﬁﬁ 
.
ﬁﬁ 

IsBodyHtml
ﬁﬁ 
=
ﬁﬁ  
true
ﬁﬁ! %
;
ﬁﬁ% &
using
·· 
var
·· 

smtpClient
··  
=
··! "
new
··# &

SmtpClient
··' 1
(
··1 2
smtpHost
··2 :
,
··: ;
smtpPort
··< D
)
··D E
{
‚‚ 
Credentials
„„ 
=
„„ 
new
„„ !
NetworkCredential
„„" 3
(
„„3 4
	fromEmail
„„4 =
,
„„= >
fromPassword
„„? K
)
„„K L
,
„„L M
	EnableSsl
‰‰ 
=
‰‰ 
true
‰‰  
}
ÂÂ 
;
ÂÂ 
await
ÊÊ 

smtpClient
ÊÊ 
.
ÊÊ 
SendMailAsync
ÊÊ *
(
ÊÊ* +
message
ÊÊ+ 2
)
ÊÊ2 3
;
ÊÊ3 4
return
ÁÁ 
true
ÁÁ 
;
ÁÁ 
}
ËË 	
catch
ÈÈ 
(
ÈÈ 
	Exception
ÈÈ 
e
ÈÈ 
)
ÈÈ 
{
ÍÍ 	
return
ÎÎ 
false
ÎÎ 
;
ÎÎ 
}
ÏÏ 	
}
ÌÌ 
public
ÒÒ 

async
ÒÒ 
Task
ÒÒ 
<
ÒÒ 
bool
ÒÒ 
>
ÒÒ *
SendEmailInactiveCourseAsync
ÒÒ 8
(
ÒÒ8 9
string
ÒÒ9 ?
instructorEmail
ÒÒ@ O
,
ÒÒO P
string
ÒÒQ W
studentEmail
ÒÒX d
,
ÒÒd e
string
ÒÒf l
subject
ÒÒm t
,
ÒÒt u
string
ÒÒv |
bodyÒÒ} Å
)ÒÒÅ Ç
{
ÚÚ 
try
ÛÛ 
{
ÙÙ 	
var
ıı 
fromPassword
ıı 
=
ıı 
_configuration
ıı -
[
ıı- .
$str
ıı. J
]
ııJ K
;
ııK L
var
ˆˆ 
smtpHost
ˆˆ 
=
ˆˆ 
_configuration
ˆˆ )
[
ˆˆ) *
$str
ˆˆ* B
]
ˆˆB C
;
ˆˆC D
var
˜˜ 
smtpPort
˜˜ 
=
˜˜ 
int
˜˜ 
.
˜˜ 
Parse
˜˜ $
(
˜˜$ %
_configuration
˜˜% 3
[
˜˜3 4
$str
˜˜4 L
]
˜˜L M
)
˜˜M N
;
˜˜N O
var
˘˘ 
message
˘˘ 
=
˘˘ 
new
˘˘ 
MailMessage
˘˘ )
(
˘˘) *
instructorEmail
˘˘* 9
,
˘˘9 :
studentEmail
˘˘; G
,
˘˘G H
subject
˘˘I P
,
˘˘P Q
body
˘˘R V
)
˘˘V W
;
˘˘W X
message
˙˙ 
.
˙˙ 

IsBodyHtml
˙˙ 
=
˙˙  
true
˙˙! %
;
˙˙% &
using
¸¸ 
var
¸¸ 

smtpClient
¸¸  
=
¸¸! "
new
¸¸# &

SmtpClient
¸¸' 1
(
¸¸1 2
smtpHost
¸¸2 :
,
¸¸: ;
smtpPort
¸¸< D
)
¸¸D E
{
˝˝ 
Credentials
˛˛ 
=
˛˛ 
new
˛˛ !
NetworkCredential
˛˛" 3
(
˛˛3 4
instructorEmail
˛˛4 C
,
˛˛C D
fromPassword
˛˛E Q
)
˛˛Q R
,
˛˛R S
	EnableSsl
ˇˇ 
=
ˇˇ 
true
ˇˇ  
}
ÄÄ 
;
ÄÄ 
await
ÅÅ 

smtpClient
ÅÅ 
.
ÅÅ 
SendMailAsync
ÅÅ *
(
ÅÅ* +
message
ÅÅ+ 2
)
ÅÅ2 3
;
ÅÅ3 4
return
ÇÇ 
true
ÇÇ 
;
ÇÇ 
}
ÉÉ 	
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ 
e
ÑÑ 
)
ÑÑ 
{
ÖÖ 	
return
ÜÜ 
false
ÜÜ 
;
ÜÜ 
}
áá 	
}
àà 
public
ää 

async
ää 
Task
ää 
<
ää 
bool
ää 
>
ää !
SendEmailResetAsync
ää /
(
ää/ 0
string
ää0 6
toEmail
ää7 >
,
ää> ?
string
ää@ F
subject
ääG N
,
ääN O
ApplicationUser
ääP _
user
ää` d
,
ääd e
string
ãã 
currentDate
ãã 
,
ãã 
string
ãã "
	resetLink
ãã# ,
,
ãã, -
string
åå 
operatingSystem
åå 
,
åå 
string
åå  &
browser
åå' .
,
åå. /
string
åå0 6
ip
åå7 9
,
åå9 :
string
åå; A
region
ååB H
,
ååH I
string
ååJ P
city
ååQ U
,
ååU V
string
ååW ]
country
åå^ e
)
ååe f
{
çç 
try
èè 
{
êê 	
var
ëë 
	fromEmail
ëë 
=
ëë 
_configuration
ëë *
[
ëë* +
$str
ëë+ D
]
ëëD E
;
ëëE F
var
íí 
fromPassword
íí 
=
íí 
_configuration
íí -
[
íí- .
$str
íí. J
]
ííJ K
;
ííK L
var
ìì 
smtpHost
ìì 
=
ìì 
_configuration
ìì )
[
ìì) *
$str
ìì* B
]
ììB C
;
ììC D
var
îî 
smtpPort
îî 
=
îî 
int
îî 
.
îî 
Parse
îî $
(
îî$ %
_configuration
îî% 3
[
îî3 4
$str
îî4 L
]
îîL M
)
îîM N
;
îîN O
var
ññ 
body
ññ 
=
ññ 
$@"
ññ 
$str
ñö ;
{
öö; <
currentDate
öö< G
}
ööG H
$str
ö¨H D
{
¨¨D E
user
¨¨E I
.
¨¨I J
FullName
¨¨J R
}
¨¨R S
$str¨¨S √
{¨¨√ ƒ
user¨¨ƒ »
.¨¨» …
UserName¨¨… —
}¨¨— “
$str¨Ø“ 
{
ØØ 
	resetLink
ØØ $
}
ØØ$ %
$strØ¥% ò
{¥¥ò ô
operatingSystem¥¥ô ®
}¥¥® ©
$str¥¥© Ó
{¥¥Ó Ô
browser¥¥Ô ˆ
}¥¥ˆ ˜
$str¥¥˜ ¬
{¥¥¬ √
ip¥¥√ ≈
}¥¥≈ ∆
$str¥¥∆ ä
{¥¥ä ã
region¥¥ã ë
}¥¥ë í
$str¥¥í À
{¥¥À Ã
city¥¥Ã –
}¥¥– —
$str¥¥— ä
{¥¥ä ã
country¥¥ã í
}¥¥í ì
$str¥‰ì 
"
‰‰ 
;
‰‰ 
var
ÁÁ 
message
ÁÁ 
=
ÁÁ 
new
ÁÁ 
MailMessage
ÁÁ )
(
ÁÁ) *
	fromEmail
ÁÁ* 3
,
ÁÁ3 4
toEmail
ÁÁ5 <
,
ÁÁ< =
subject
ÁÁ> E
,
ÁÁE F
body
ÁÁG K
)
ÁÁK L
;
ÁÁL M
message
ËË 
.
ËË 

IsBodyHtml
ËË 
=
ËË  
true
ËË! %
;
ËË% &
using
ÎÎ 
var
ÎÎ 

smtpClient
ÎÎ  
=
ÎÎ! "
new
ÎÎ# &

SmtpClient
ÎÎ' 1
(
ÎÎ1 2
smtpHost
ÎÎ2 :
,
ÎÎ: ;
smtpPort
ÎÎ< D
)
ÎÎD E
{
ÏÏ 
Credentials
ÌÌ 
=
ÌÌ 
new
ÌÌ !
NetworkCredential
ÌÌ" 3
(
ÌÌ3 4
	fromEmail
ÌÌ4 =
,
ÌÌ= >
fromPassword
ÌÌ? K
)
ÌÌK L
,
ÌÌL M
	EnableSsl
ÓÓ 
=
ÓÓ 
true
ÓÓ  
}
ÔÔ 
;
ÔÔ 
await
 

smtpClient
 
.
 
SendMailAsync
 *
(
* +
message
+ 2
)
2 3
;
3 4
return
ÒÒ 
true
ÒÒ 
;
ÒÒ 
}
ÚÚ 	
catch
ÛÛ 
(
ÛÛ 
	Exception
ÛÛ 
e
ÛÛ 
)
ÛÛ 
{
ÙÙ 	
return
ıı 
false
ıı 
;
ıı 
}
ˆˆ 	
}
˜˜ 
public
ˇˇ 

async
ˇˇ 
Task
ˇˇ 
<
ˇˇ 
bool
ˇˇ 
>
ˇˇ 
SendVerifyEmail
ˇˇ +
(
ˇˇ+ ,
string
ˇˇ, 2
toMail
ˇˇ3 9
,
ˇˇ9 :
string
ˇˇ; A
confirmationLink
ˇˇB R
)
ˇˇR S
{
ÄÄ 
return
ÅÅ 
await
ÅÅ #
SendEmailFromTemplate
ÅÅ *
(
ÅÅ* +
toMail
ÅÅ+ 1
,
ÅÅ1 2
$str
ÅÅ3 D
,
ÅÅD E
confirmationLink
ÅÅF V
)
ÅÅV W
;
ÅÅW X
}
ÇÇ 
public
ää 

async
ää 
Task
ää 
<
ää 
bool
ää 
>
ää ,
SendEmailForInstructorApproval
ää :
(
ää: ;
string
ää; A
toMail
ääB H
,
ääH I
string
ääJ P
token
ääQ V
)
ääV W
{
ãã 
return
åå 
await
åå #
SendEmailFromTemplate
åå *
(
åå* +
toMail
åå+ 1
,
åå1 2
$str
åå3 L
,
ååL M
token
ååN S
)
ååS T
;
ååT U
}
çç 
public
êê 

async
êê 
Task
êê 
<
êê 
bool
êê 
>
êê %
SendEmailInactiveCourse
êê 3
(
êê3 4
string
êê4 :
instructorEmail
êê; J
,
êêJ K
string
êêL R
instructorName
êêS a
,
êêa b
string
êêc i
courseTitle
êêj u
,
êêu v
List
êêw {
<
êê{ |
stringêê| Ç
>êêÇ É
studentEmailsêêÑ ë
)êêë í
{
ëë 
try
íí 
{
ìì 	
foreach
îî 
(
îî 
var
îî 
studentEmail
îî %
in
îî& (
studentEmails
îî) 6
)
îî6 7
{
ïï 
await
ññ -
SendEmailInactiveCourseTemplate
ññ 5
(
ññ5 6
studentEmail
ññ6 B
,
ññB C
$str
ññD Y
,
ññY Z
instructorEmail
ññ[ j
,
ññj k
instructorName
ññl z
,
ññz {
courseTitleññ| á
)ññá à
;ññà â
}
óó 
return
òò 
true
òò 
;
òò 
}
ôô 	
catch
öö 
(
öö 
	Exception
öö 
)
öö 
{
õõ 	
return
úú 
false
úú 
;
úú 
}
ùù 	
}
ûû 
public
ßß 

async
ßß 
Task
ßß 
<
ßß 
bool
ßß 
>
ßß -
SendEmailForAdminAboutNewCourse
ßß ;
(
ßß; <
string
ßß< B
toMail
ßßC I
)
ßßI J
{
®® 
var
©© 
template
©© 
=
©© 
await
©© 
_unitOfWork
©© (
.
©©( )%
EmailTemplateRepository
©©) @
.
©©@ A
GetAsync
©©A I
(
©©I J
t
©©J K
=>
©©L N
t
©©O P
.
©©P Q
TemplateName
©©Q ]
==
©©^ `
$str©©a Ö
)©©Ö Ü
;©©Ü á
var
™™ 
courseStatus
™™ 
=
™™ 
await
™™  
_unitOfWork
™™! ,
.
™™, -%
CourseVersionRepository
™™- D
.
™™D E
GetAsync
™™E M
(
™™M N
z
™™N O
=>
™™P R
z
™™S T
.
™™T U
CurrentStatus
™™U b
==
™™c e
$num
™™f g
)
™™g h
;
™™h i
if
´´ 

(
´´ 
template
´´ 
==
´´ 
null
´´ 
)
´´ 
{
¨¨ 	
throw
≠≠ 
new
≠≠ 
	Exception
≠≠ 
(
≠≠  
$str
≠≠  :
)
≠≠: ;
;
≠≠; <
}
ÆÆ 	
string
∞∞ 
subject
∞∞ 
=
∞∞ 
template
∞∞ !
.
∞∞! "
SubjectLine
∞∞" -
;
∞∞- .
string
±± 
body
±± 
=
±± 
$@"
±± 
$str
±¥ 
{
¥¥ 
template
¥¥ 
.
¥¥ 
SubjectLine
¥¥ )
}
¥¥) *
$str
¥µ* 
{
µµ 
template
µµ 
.
µµ 
PreHeaderText
µµ +
}
µµ+ ,
$str
µ∂, 
{
∂∂ 
template
∂∂ 
.
∂∂ 
BodyContent
∂∂ (
}
∂∂( )
$str
∂∑) *
{
∑∑* +
courseStatus
∑∑+ 7
.
∑∑7 8
CurrentStatus
∑∑8 E
}
∑∑E F
$str
∑∏F 
{
∏∏ 
template
∏∏ 
.
∏∏ 
FooterContent
∏∏ '
}
∏∏' (
$str
∏∫( 
"
∫∫ 
;
∫∫ 
return
ºº 
await
ºº 
SendEmailAsync
ºº #
(
ºº# $
toMail
ºº$ *
,
ºº* +
subject
ºº, 3
,
ºº3 4
body
ºº5 9
)
ºº9 :
;
ºº: ;
}
ΩΩ 
public
∆∆ 

async
∆∆ 
Task
∆∆ 
<
∆∆ 
bool
∆∆ 
>
∆∆ 4
&SendEmailForStudentAboutCompleteCourse
∆∆ B
(
∆∆B C
string
∆∆C I
toMail
∆∆J P
)
∆∆P Q
{
«« 
var
»» 
template
»» 
=
»» 
await
»» 
_unitOfWork
»» (
.
»»( )%
EmailTemplateRepository
»») @
.
»»@ A
GetAsync
»»A I
(
»»I J
t
»»J K
=>
»»L N
t
»»O P
.
»»P Q
TemplateName
»»Q ]
==
»»^ `
$str
»»a y
)
»»y z
;
»»z {
var
…… 
courseStatus
…… 
=
…… 
await
……  
_unitOfWork
……! ,
.
……, -%
CourseVersionRepository
……- D
.
……D E
GetAsync
……E M
(
……M N
z
……N O
=>
……P R
z
……S T
.
……T U
CurrentStatus
……U b
==
……c e
$num
……f g
)
……g h
;
……h i
if
   

(
   
template
   
==
   
null
   
)
   
{
ÀÀ 	
throw
ÃÃ 
new
ÃÃ 
	Exception
ÃÃ 
(
ÃÃ  
$str
ÃÃ  :
)
ÃÃ: ;
;
ÃÃ; <
}
ÕÕ 	
string
œœ 
subject
œœ 
=
œœ 
template
œœ !
.
œœ! "
SubjectLine
œœ" -
;
œœ- .
string
–– 
body
–– 
=
–– 
$@"
–– 
$str
–” 
{
”” 
template
”” 
.
”” 
SubjectLine
”” )
}
””) *
$str
”‘* 
{
‘‘ 
template
‘‘ 
.
‘‘ 
PreHeaderText
‘‘ +
}
‘‘+ ,
$str
‘’, 
{
’’ 
template
’’ 
.
’’ 
BodyContent
’’ (
}
’’( )
$str
’÷) *
{
÷÷* +
courseStatus
÷÷+ 7
.
÷÷7 8
CurrentStatus
÷÷8 E
}
÷÷E F
$str
÷◊F 
{
◊◊ 
template
◊◊ 
.
◊◊ 
FooterContent
◊◊ '
}
◊◊' (
$str
◊Ÿ( 
"
ŸŸ 
;
ŸŸ 
return
€€ 
await
€€ 
SendEmailAsync
€€ #
(
€€# $
toMail
€€$ *
,
€€* +
subject
€€, 3
,
€€3 4
body
€€5 9
)
€€9 :
;
€€: ;
}
‹‹ 
public
„„ 

async
„„ 
Task
„„ 
<
„„ 
bool
„„ 
>
„„ 9
+SendApproveEmailForInstructorAboutNewCourse
„„ G
(
„„G H
string
„„H N
toMail
„„O U
)
„„U V
{
‰‰ 
var
ÂÂ 
template
ÂÂ 
=
ÂÂ 
await
ÂÂ 
_unitOfWork
ÂÂ (
.
ÂÂ( )%
EmailTemplateRepository
ÂÂ) @
.
ÂÂ@ A
GetAsync
ÂÂA I
(
ÂÂI J
t
ÂÂJ K
=>
ÂÂL N
t
ÂÂO P
.
ÂÂP Q
TemplateName
ÂÂQ ]
==
ÂÂ^ `
$str
ÂÂa z
)
ÂÂz {
;
ÂÂ{ |
var
ÊÊ 
courseStatus
ÊÊ 
=
ÊÊ 
await
ÊÊ  
_unitOfWork
ÊÊ! ,
.
ÊÊ, -%
CourseVersionRepository
ÊÊ- D
.
ÊÊD E
GetAsync
ÊÊE M
(
ÊÊM N
z
ÊÊN O
=>
ÊÊP R
z
ÊÊS T
.
ÊÊT U
CurrentStatus
ÊÊU b
==
ÊÊc e
$num
ÊÊf g
)
ÊÊg h
;
ÊÊh i
if
ÁÁ 

(
ÁÁ 
template
ÁÁ 
==
ÁÁ 
null
ÁÁ 
)
ÁÁ 
{
ËË 	
throw
ÈÈ 
new
ÈÈ 
	Exception
ÈÈ 
(
ÈÈ  
$str
ÈÈ  :
)
ÈÈ: ;
;
ÈÈ; <
}
ÍÍ 	
string
ÏÏ 
subject
ÏÏ 
=
ÏÏ 
template
ÏÏ !
.
ÏÏ! "
SubjectLine
ÏÏ" -
;
ÏÏ- .
string
ÌÌ 
body
ÌÌ 
=
ÌÌ 
$@"
ÌÌ 
$str
Ì 
{
 
template
 
.
 
SubjectLine
 )
}
) *
$str
Ò* 
{
ÒÒ 
template
ÒÒ 
.
ÒÒ 
PreHeaderText
ÒÒ +
}
ÒÒ+ ,
$str
ÒÚ, 
{
ÚÚ 
template
ÚÚ 
.
ÚÚ 
BodyContent
ÚÚ (
}
ÚÚ( )
$str
ÚÛ) *
{
ÛÛ* +
courseStatus
ÛÛ+ 7
.
ÛÛ7 8
CurrentStatus
ÛÛ8 E
}
ÛÛE F
$str
ÛÙF 
{
ÙÙ 
template
ÙÙ 
.
ÙÙ 
FooterContent
ÙÙ '
}
ÙÙ' (
$str
Ùˆ( 
"
ˆˆ 
;
ˆˆ 
return
¯¯ 
await
¯¯ 
SendEmailAsync
¯¯ #
(
¯¯# $
toMail
¯¯$ *
,
¯¯* +
subject
¯¯, 3
,
¯¯3 4
body
¯¯5 9
)
¯¯9 :
;
¯¯: ;
}
˘˘ 
public
ÄÄ 

async
ÄÄ 
Task
ÄÄ 
<
ÄÄ 
bool
ÄÄ 
>
ÄÄ 8
*SendRejectEmailForInstructorAboutNewCourse
ÄÄ F
(
ÄÄF G
string
ÄÄG M
toMail
ÄÄN T
)
ÄÄT U
{
ÅÅ 
var
ÇÇ 
template
ÇÇ 
=
ÇÇ 
await
ÇÇ 
_unitOfWork
ÇÇ (
.
ÇÇ( )%
EmailTemplateRepository
ÇÇ) @
.
ÇÇ@ A
GetAsync
ÇÇA I
(
ÇÇI J
t
ÇÇJ K
=>
ÇÇL N
t
ÇÇO P
.
ÇÇP Q
TemplateName
ÇÇQ ]
==
ÇÇ^ `
$str
ÇÇa y
)
ÇÇy z
;
ÇÇz {
var
ÉÉ 
courseStatus
ÉÉ 
=
ÉÉ 
await
ÉÉ  
_unitOfWork
ÉÉ! ,
.
ÉÉ, -%
CourseVersionRepository
ÉÉ- D
.
ÉÉD E
GetAsync
ÉÉE M
(
ÉÉM N
z
ÉÉN O
=>
ÉÉP R
z
ÉÉS T
.
ÉÉT U
CurrentStatus
ÉÉU b
==
ÉÉc e
$num
ÉÉf g
)
ÉÉg h
;
ÉÉh i
if
ÑÑ 

(
ÑÑ 
template
ÑÑ 
==
ÑÑ 
null
ÑÑ 
)
ÑÑ 
{
ÖÖ 	
throw
ÜÜ 
new
ÜÜ 
	Exception
ÜÜ 
(
ÜÜ  
$str
ÜÜ  :
)
ÜÜ: ;
;
ÜÜ; <
}
áá 	
string
ââ 
subject
ââ 
=
ââ 
template
ââ !
.
ââ! "
SubjectLine
ââ" -
;
ââ- .
string
ää 
body
ää 
=
ää 
$@"
ää 
$str
äç 
{
çç 
template
çç 
.
çç 
SubjectLine
çç )
}
çç) *
$str
çé* 
{
éé 
template
éé 
.
éé 
PreHeaderText
éé +
}
éé+ ,
$str
éè, 
{
èè 
template
èè 
.
èè 
BodyContent
èè (
}
èè( )
$str
èê) 
{
êê 
courseStatus
êê  
.
êê  !
CurrentStatus
êê! .
}
êê. /
$str
êë/ 
{
ëë 
template
ëë 
.
ëë 
FooterContent
ëë '
}
ëë' (
$str
ëì( 
"
ìì 
;
ìì 
return
ïï 
await
ïï 
SendEmailAsync
ïï #
(
ïï# $
toMail
ïï$ *
,
ïï* +
subject
ïï, 3
,
ïï3 4
body
ïï5 9
)
ïï9 :
;
ïï: ;
}
ññ 
public
ùù 

async
ùù 
Task
ùù 
<
ùù 
bool
ùù 
>
ùù *
SendEmailRemindDeleteAccount
ùù 8
(
ùù8 9
string
ùù9 ?
toMail
ùù@ F
)
ùùF G
{
ûû 
var
üü 
template
üü 
=
üü 
await
üü 
_unitOfWork
üü (
.
üü( )%
EmailTemplateRepository
üü) @
.
üü@ A
GetAsync
üüA I
(
üüI J
t
üüJ K
=>
üüL N
t
üüO P
.
üüP Q
TemplateName
üüQ ]
==
üü^ `
$str
üüa v
)
üüv w
;
üüw x
if
†† 

(
†† 
template
†† 
==
†† 
null
†† 
)
†† 
{
°° 	
throw
¢¢ 
new
¢¢ 
	Exception
¢¢ 
(
¢¢  
$str
¢¢  :
)
¢¢: ;
;
¢¢; <
}
££ 	
string
•• 
subject
•• 
=
•• 
template
•• !
.
••! "
SubjectLine
••" -
;
••- .
string
¶¶ 
body
¶¶ 
=
¶¶ 
$@"
¶¶ 
$str
¶© 
{
©© 
template
©© 
.
©© 
SubjectLine
©© )
}
©©) *
$str
©™* 
{
™™ 
template
™™ 
.
™™ 
PreHeaderText
™™ +
}
™™+ ,
$str
™´, 
{
´´ 
template
´´ 
.
´´ 
BodyContent
´´ (
}
´´( )
$str
´¨) 
{
¨¨ 
template
¨¨ 
.
¨¨ 
FooterContent
¨¨ '
}
¨¨' (
$str
¨Æ( 
"
ÆÆ 
;
ÆÆ 
return
∞∞ 
await
∞∞ 
SendEmailAsync
∞∞ #
(
∞∞# $
toMail
∞∞$ *
,
∞∞* +
subject
∞∞, 3
,
∞∞3 4
body
∞∞5 9
)
∞∞9 :
;
∞∞: ;
}
±± 
public
∏∏ 

async
∏∏ 
Task
∏∏ 
<
∏∏ 
bool
∏∏ 
>
∏∏ $
SendEmailDeleteAccount
∏∏ 2
(
∏∏2 3
string
∏∏3 9
toMail
∏∏: @
)
∏∏@ A
{
ππ 
var
∫∫ 
template
∫∫ 
=
∫∫ 
await
∫∫ 
_unitOfWork
∫∫ (
.
∫∫( )%
EmailTemplateRepository
∫∫) @
.
∫∫@ A
GetAsync
∫∫A I
(
∫∫I J
t
∫∫J K
=>
∫∫L N
t
∫∫O P
.
∫∫P Q
TemplateName
∫∫Q ]
==
∫∫^ `
$str
∫∫a p
)
∫∫p q
;
∫∫q r
if
ªª 

(
ªª 
template
ªª 
==
ªª 
null
ªª 
)
ªª 
{
ºº 	
throw
ΩΩ 
new
ΩΩ 
	Exception
ΩΩ 
(
ΩΩ  
$str
ΩΩ  :
)
ΩΩ: ;
;
ΩΩ; <
}
ææ 	
string
¿¿ 
subject
¿¿ 
=
¿¿ 
template
¿¿ !
.
¿¿! "
SubjectLine
¿¿" -
;
¿¿- .
string
¡¡ 
body
¡¡ 
=
¡¡ 
$@"
¡¡ 
$str
¡ƒ 
{
ƒƒ 
template
ƒƒ 
.
ƒƒ 
SubjectLine
ƒƒ )
}
ƒƒ) *
$str
ƒ≈* 
{
≈≈ 
template
≈≈ 
.
≈≈ 
PreHeaderText
≈≈ +
}
≈≈+ ,
$str
≈∆, 
{
∆∆ 
template
∆∆ 
.
∆∆ 
BodyContent
∆∆ (
}
∆∆( )
$str
∆«) 
{
«« 
template
«« 
.
«« 
FooterContent
«« '
}
««' (
$str
«…( 
"
…… 
;
…… 
return
ÀÀ 
await
ÀÀ 
SendEmailAsync
ÀÀ #
(
ÀÀ# $
toMail
ÀÀ$ *
,
ÀÀ* +
subject
ÀÀ, 3
,
ÀÀ3 4
body
ÀÀ5 9
)
ÀÀ9 :
;
ÀÀ: ;
}
ÃÃ 
public
’’ 

async
’’ 
Task
’’ 
<
’’ 
bool
’’ 
>
’’ .
 SendEmailToInstructorAfterPayout
’’ <
(
’’< =
string
’’= C
toMail
’’D J
,
’’J K
double
’’L R
PayoutAmount
’’S _
,
’’_ `
DateTime
’’a i
TransactionDate
’’j y
)
’’y z
{
÷÷ 
var
◊◊ 
template
◊◊ 
=
◊◊ 
await
ÿÿ 
_unitOfWork
ÿÿ 
.
ÿÿ %
EmailTemplateRepository
ÿÿ 5
.
ÿÿ5 6
GetAsync
ÿÿ6 >
(
ÿÿ> ?
t
ÿÿ? @
=>
ÿÿA C
t
ÿÿD E
.
ÿÿE F
TemplateName
ÿÿF R
==
ÿÿS U
$str
ÿÿV w
)
ÿÿw x
;
ÿÿx y
if
ŸŸ 

(
ŸŸ 
template
ŸŸ 
==
ŸŸ 
null
ŸŸ 
)
ŸŸ 
{
⁄⁄ 	
throw
€€ 
new
€€ 
	Exception
€€ 
(
€€  
$str
€€  :
)
€€: ;
;
€€; <
}
‹‹ 	
string
ﬁﬁ 
subject
ﬁﬁ 
=
ﬁﬁ 
template
ﬁﬁ !
.
ﬁﬁ! "
SubjectLine
ﬁﬁ" -
;
ﬁﬁ- .
string
ﬂﬂ 
body
ﬂﬂ 
=
ﬂﬂ 
$@"
ﬂﬂ 
$str
ﬂ‚ 
{
‚‚ 
template
‚‚ 
.
‚‚ 
SubjectLine
‚‚ )
}
‚‚) *
$str
‚„* 
{
„„ 
template
„„ 
.
„„ 
PreHeaderText
„„ +
}
„„+ ,
$str
„‰, 
{
‰‰ 
template
‰‰ 
.
‰‰ 
BodyContent
‰‰ (
}
‰‰( )
$str
‰Á) 
{
ÁÁ 
template
ÁÁ 
.
ÁÁ 
FooterContent
ÁÁ '
}
ÁÁ' (
$str
ÁÈ( 
"
ÈÈ 
;
ÈÈ 
return
ÎÎ 
await
ÎÎ 
SendEmailAsync
ÎÎ #
(
ÎÎ# $
toMail
ÎÎ$ *
,
ÎÎ* +
subject
ÎÎ, 3
,
ÎÎ3 4
body
ÎÎ5 9
)
ÎÎ9 :
;
ÎÎ: ;
}
ÏÏ 
}ÌÌ ÜQ
dD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\EmailSender.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
EmailSender 
: 
IEmailSender '
{		 
private

 
readonly

 
IEmailService

 "
_emailService

# 0
;

0 1
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
public 

EmailSender 
( 
IEmailService $
emailService% 1
,1 2
IUnitOfWork3 >

unitOfWork? I
)I J
{ 
_emailService 
= 
emailService $
;$ %
_unitOfWork 
= 

unitOfWork  
;  !
} 
public 

async 
Task -
!SendSubmittedCourseEmailForAdmins 7
(7 8
)8 9
{ 
var 
admins 
= 
await 
_unitOfWork &
.& '!
UserManagerRepository' <
.< =
GetUsersInRoleAsync= P
(P Q
StaticUserRolesQ `
.` a
Admina f
)f g
;g h
foreach 
( 
var 
admin 
in 
admins $
)$ %
{ 	
if 
( 
admin 
. 
Email 
!= 
null #
)# $
{ 
await 
_emailService #
.# $+
SendEmailForAdminAboutNewCourse$ C
(C D
adminD I
.I J
EmailJ O
)O P
;P Q
} 
} 	
} 
public 

async 
Task (
SendCompletedCoursForStudent 2
(2 3
)3 4
{   
var!! 
students!! 
=!! 
await!! 
_unitOfWork!! (
.!!( )!
UserManagerRepository!!) >
.!!> ?
GetUsersInRoleAsync!!? R
(!!R S
StaticUserRoles!!S b
.!!b c
Student!!c j
)!!j k
;!!k l
foreach## 
(## 
var## 
user## 
in## 
students## %
)##% &
{$$ 	
if%% 
(%% 
user%% 
.%% 
Email%% 
!=%% 
null%% "
)%%" #
{&& 
await'' 
_emailService'' #
.''# $2
&SendEmailForStudentAboutCompleteCourse''$ J
(''J K
user''K O
.''O P
Email''P U
)''U V
;''V W
}(( 
})) 	
}** 
public,, 

async,, 
Task,, 0
$SendRejectedCourseEmailForInstructor,, :
(,,: ;
Guid,,; ?
courseVersionId,,@ O
),,O P
{-- 
try.. 
{// 	
var00 
courseVersion00 
=00 
await00  %
_unitOfWork00& 1
.001 2#
CourseVersionRepository002 I
.00I J
GetAsync00J R
(00R S
x00S T
=>00U W
x00X Y
.00Y Z
Id00Z \
==00] _
courseVersionId00` o
)00o p
;00p q
var11 

instructor11 
=11 
await22 
_unitOfWork22 !
.22! " 
InstructorRepository22" 6
.226 7
GetAsync227 ?
(33 
filter44 
:44 
x44 
=>44  
x44! "
.44" #
InstructorId44# /
==440 2
courseVersion443 @
.44@ A
InstructorId44A M
,44M N
includeProperties55 %
:55% &
$str55' 8
)66 
;66 
await77 
_emailService77 
.77  6
*SendRejectEmailForInstructorAboutNewCourse77  J
(77J K

instructor77K U
.77U V
ApplicationUser77V e
.77e f
Email77f k
)77k l
;77l m
}88 	
catch99 
(99 
	Exception99 
e99 
)99 
{:: 	
}<< 	
}== 
public?? 

async?? 
Task?? 0
$SendAcceptedCourseEmailForInstructor?? :
(??: ;
Guid??; ?
courseVersionId??@ O
)??O P
{@@ 
tryAA 
{BB 	
varCC 
courseVersionCC 
=CC 
awaitCC  %
_unitOfWorkCC& 1
.CC1 2#
CourseVersionRepositoryCC2 I
.CCI J
GetAsyncCCJ R
(CCR S
xCCS T
=>CCU W
xCCX Y
.CCY Z
IdCCZ \
==CC] _
courseVersionIdCC` o
)CCo p
;CCp q
varDD 

instructorDD 
=DD 
awaitEE 
_unitOfWorkEE !
.EE! " 
InstructorRepositoryEE" 6
.EE6 7
GetAsyncEE7 ?
(FF 
filterGG 
:GG 
xGG 
=>GG  
xGG! "
.GG" #
InstructorIdGG# /
==GG0 2
courseVersionGG3 @
.GG@ A
InstructorIdGGA M
,GGM N
includePropertiesHH %
:HH% &
$strHH' 8
)II 
;II 
awaitJJ 
_emailServiceJJ 
.JJ  7
+SendApproveEmailForInstructorAboutNewCourseJJ  K
(JJK L

instructorJJL V
.JJV W
ApplicationUserJJW f
.JJf g
EmailJJg l
)JJl m
;JJm n
}KK 	
catchLL 
(LL 
	ExceptionLL 
eLL 
)LL 
{MM 	
}OO 	
}PP 
publicRR 

asyncRR 
TaskRR 1
%SendDeactivatedCourseEmailForStudentsRR ;
(RR; <
GuidRR< @
courseIdRRA I
)RRI J
{SS 
tryTT 
{UU 	
varVV 
studentCoursesVV 
=VV  
awaitVV! &
_unitOfWorkVV' 2
.VV2 3#
StudentCourseRepositoryVV3 J
.VVJ K
GetAllAsyncVVK V
(VVV W
xVVW X
=>VVY [
xVV\ ]
.VV] ^
CourseIdVV^ f
==VVg i
courseIdVVj r
)VVr s
;VVs t
varXX 
courseXX 
=XX 
awaitXX 
_unitOfWorkXX *
.XX* +
CourseRepositoryXX+ ;
.XX; <
GetAsyncXX< D
(XXD E
xXXE F
=>XXG I
xXXJ K
.XXK L
IdXXL N
==XXO Q
courseIdXXR Z
)XXZ [
;XX[ \
varZZ 
courseVersionsZZ 
=ZZ  
await[[ 
_unitOfWork[[ !
.[[! "#
CourseVersionRepository[[" 9
.[[9 :
GetAsync[[: B
([[B C
x[[C D
=>[[E G
x[[H I
.[[I J
Id[[J L
==[[M O
course[[P V
.[[V W
CourseVersionId[[W f
)[[f g
;[[g h
var]] 

instructor]] 
=]] 
await]] "
_unitOfWork]]# .
.]]. / 
InstructorRepository]]/ C
.]]C D
GetAsync]]D L
(]]L M
filter^^ 
:^^ 
x^^ 
=>^^ 
course^^ #
!=^^$ &
null^^' +
&&^^, .
x^^/ 0
.^^0 1
InstructorId^^1 =
==^^> @
course^^A G
.^^G H
InstructorId^^H T
,^^T U
includeProperties__ !
:__! "
$str__# 4
)`` 
;`` 
varbb 
studentEmailsbb 
=bb 
newbb  #
Listbb$ (
<bb( )
stringbb) /
>bb/ 0
(bb0 1
)bb1 2
;bb2 3
foreachdd 
(dd 
vardd 
studentCoursedd &
indd' )
studentCoursesdd* 8
)dd8 9
{ee 
varff 
studentff 
=ff 
awaitff #
_unitOfWorkff$ /
.ff/ 0
StudentRepositoryff0 A
.ffA B
GetAsyncffB J
(gg 
filterhh 
:hh 
xhh 
=>hh  
xhh! "
.hh" #
	StudentIdhh# ,
==hh- /
studentCoursehh0 =
.hh= >
	StudentIdhh> G
,hhG H
includePropertiesii %
:ii% &
$strii' 8
)jj 
;jj 
ifkk 
(kk 
studentkk 
?kk 
.kk 
ApplicationUserkk ,
.kk, -
Emailkk- 2
!=kk3 5
nullkk6 :
)kk: ;
{ll 
studentEmailsmm !
.mm! "
Addmm" %
(mm% &
studentmm& -
.mm- .
ApplicationUsermm. =
.mm= >
Emailmm> C
)mmC D
;mmD E
}nn 
}oo 
ifqq 
(qq 

instructorqq 
?qq 
.qq 
ApplicationUserqq +
isqq, .
{qq/ 0
Emailqq1 6
:qq6 7
notqq8 ;
nullqq< @
,qq@ A
FullNameqqB J
:qqJ K
notqqL O
nullqqP T
}qqU V
)qqV W
{rr 
ifss 
(ss 
courseVersionsss "
?ss" #
.ss# $
Titless$ )
!=ss* ,
nullss- 1
)ss1 2
{tt 
awaituu 
_emailServiceuu '
.uu' (#
SendEmailInactiveCourseuu( ?
(uu? @

instructoruu@ J
.uuJ K
ApplicationUseruuK Z
.uuZ [
Emailuu[ `
,uu` a

instructorvv "
.vv" #
ApplicationUservv# 2
.vv2 3
FullNamevv3 ;
,vv; <
courseVersionsvv= K
.vvK L
TitlevvL Q
,vvQ R
studentEmailsvvS `
)vv` a
;vva b
}ww 
}xx 
}yy 	
catchzz 
(zz 
	Exceptionzz 
ezz 
)zz 
{{{ 	
}}} 	
}~~ 
} œ4
sD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\CourseVersionStatusService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public

 
class

 &
CourseVersionStatusService

 '
:

( )'
ICourseVersionStatusService

* E
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
IMapper 
_mapper $
;$ %
public 
&
CourseVersionStatusService %
(% &
IUnitOfWork& 1

unitOfWork2 <
,< =
IMapper> E
mapperF L
)L M
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; 
} 
public 

Task 
< 
ResponseDTO 
> #
GetCourseVersionsStatus 4
( 
ClaimsPrincipal 
User 
, 
Guid 
? 
courseVersionId 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
, 
int 
pageSize 
) 
{ 
throw   
new   #
NotImplementedException   )
(  ) *
)  * +
;  + ,
}!! 
public## 

async## 
Task## 
<## 
ResponseDTO## !
>##! ""
GetCourseVersionStatus### 9
($$ 
ClaimsPrincipal%% 
User%% 
,%% 
Guid&& !
courseVersionStatusId&& "
)'' 
{(( 
try)) 
{** 	
var++ 
courseVersion++ 
=++ 
await,, 
_unitOfWork,, !
.,,! ")
CourseVersionStatusRepository,," ?
.,,? @+
GetCourseVersionStatusByIdAsync,,@ _
(,,_ `!
courseVersionStatusId,,` u
),,u v
;,,v w
if.. 
(.. 
courseVersion.. 
is..  
null..! %
)..% &
{// 
return00 
new00 
ResponseDTO00 &
(00& '
)00' (
{11 
Message22 
=22 
$str22 C
,22C D
Result33 
=33 
null33 !
,33! "
	IsSuccess44 
=44 
false44  %
,44% &

StatusCode55 
=55  
$num55! $
,55$ %
}66 
;66 
}77 
var99 %
getCourseVersionStatusDto99 )
=99* +
_mapper99, 3
.993 4
Map994 7
<997 8%
GetCourseVersionStatusDTO998 Q
>99Q R
(99R S
courseVersion99S `
)99` a
;99a b
return;; 
new;; 
ResponseDTO;; "
(;;" #
);;# $
{<< 
Message== 
=== 
$str== B
,==B C
Result>> 
=>> %
getCourseVersionStatusDto>> 2
,>>2 3
	IsSuccess?? 
=?? 
true??  
,??  !

StatusCode@@ 
=@@ 
$num@@  
}AA 
;AA 
}BB 	
catchCC 
(CC 
	ExceptionCC 
eCC 
)CC 
{DD 	
returnEE 
newEE 
ResponseDTOEE "
(EE" #
)EE# $
{FF 
MessageGG 
=GG 
eGG 
.GG 
MessageGG #
,GG# $
	IsSuccessHH 
=HH 
falseHH !
,HH! "

StatusCodeII 
=II 
$numII  
,II  !
ResultJJ 
=JJ 
nullJJ 
}KK 
;KK 
}LL 	
}MM 
publicOO 

asyncOO 
TaskOO 
<OO 
ResponseDTOOO !
>OO! "%
CreateCourseVersionStatusOO# <
(PP 
ClaimsPrincipalQQ 
UserQQ 
,QQ (
CreateCourseVersionStatusDTORR $(
createCourseVersionStatusDtoRR% A
)SS 
{TT 
tryUU 
{VV 	
varWW 
courseVersionStatusWW #
=WW$ %
newWW& )
CourseVersionStatusWW* =
(WW= >
)WW> ?
{XX 
IdYY 
=YY 
newYY 
GuidYY 
(YY 
)YY 
,YY  

CreateTimeZZ 
=ZZ 
DateTimeZZ %
.ZZ% &
UtcNowZZ& ,
,ZZ, -
Status[[ 
=[[ (
createCourseVersionStatusDto[[ 5
.[[5 6
Status[[6 <
,[[< =
CourseVersionId\\ 
=\\  !(
createCourseVersionStatusDto\\" >
.\\> ?
CourseVersionId\\? N
}]] 
;]] 
await__ 
_unitOfWork__ 
.__ )
CourseVersionStatusRepository__ ;
.__; <
AddAsync__< D
(__D E
courseVersionStatus__E X
)__X Y
;__Y Z
await`` 
_unitOfWork`` 
.`` 
	SaveAsync`` '
(``' (
)``( )
;``) *
returnbb 
newbb 
ResponseDTObb "
(bb" #
)bb# $
{cc 
Messagedd 
=dd 
$strdd E
,ddE F
Resultee 
=ee 
courseVersionStatusee ,
.ee, -
Idee- /
,ee/ 0
	IsSuccessff 
=ff 
trueff  
,ff  !

StatusCodegg 
=gg 
$numgg  
}hh 
;hh 
}ii 	
catchjj 
(jj 
	Exceptionjj 
ejj 
)jj 
{kk 	
returnll 
newll 
ResponseDTOll "
(ll" #
)ll# $
{mm 
Messagenn 
=nn 
enn 
.nn 
Messagenn #
,nn# $
Resultoo 
=oo 
nulloo 
,oo 
	IsSuccesspp 
=pp 
truepp  
,pp  !

StatusCodeqq 
=qq 
$numqq  
}rr 
;rr 
}ss 	
}tt 
}uu éﬂ
mD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\CourseVersionService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class  
CourseVersionService !
:" #!
ICourseVersionService$ 9
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
ICourseService #
_courseService$ 2
;2 3
private 
readonly (
ICourseSectionVersionService 1(
_courseSectionVersionService2 N
;N O
private 
readonly '
ICourseVersionStatusService 0'
_courseVersionStatusService1 L
;L M
private 
readonly 
IFirebaseService %
_firebaseService& 6
;6 7
private 
IMapper 
_mapper 
; 
public 
 
CourseVersionService 
( 
IUnitOfWork 

unitOfWork 
, 
ICourseService 
courseService $
,$ %
IMapper 
mapper 
, '
ICourseVersionStatusService #&
courseVersionStatusService$ >
,> ?(
ICourseSectionVersionService $'
courseSectionVersionService% @
,@ A
IFirebaseServiceB R
firebaseServiceS b
)b c
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_courseService 
= 
courseService &
;& '
_mapper   
=   
mapper   
;   '
_courseVersionStatusService!! #
=!!$ %&
courseVersionStatusService!!& @
;!!@ A(
_courseSectionVersionService"" $
=""% &'
courseSectionVersionService""' B
;""B C
_firebaseService## 
=## 
firebaseService## *
;##* +
}$$ 
public&& 

async&& 
Task&& 
<&& 
ResponseDTO&& !
>&&! "
GetCourseVersions&&# 4
('' 
ClaimsPrincipal(( 
User(( 
,(( 
Guid)) 
?)) 
courseId)) 
,)) 
string** 
?** 
filterOn** 
,** 
string++ 
?++ 
filterQuery++ 
,++ 
string,, 
?,, 
sortBy,, 
,,, 
bool-- 
?-- 
isAscending-- 
,-- 
int.. 

pageNumber.. 
,.. 
int// 
pageSize// 
)00 
{11 
try22 
{33 	
if44 
(44 
string44 
.44 
IsNullOrEmpty44 $
(44$ %
courseId44% -
.44- .
ToString44. 6
(446 7
)447 8
)448 9
)449 :
{55 
return66 
new66 
ResponseDTO66 &
(66& '
)66' (
{77 
Message88 
=88 
$str88 4
,884 5
	IsSuccess99 
=99 
false99  %
,99% &

StatusCode:: 
=::  
$num::! $
,::$ %
Result;; 
=;; 
null;; !
}<< 
;<< 
}== 
var?? 
courseVersions?? 
=??  
_unitOfWork??! ,
.??, -#
CourseVersionRepository??- D
.@@ 
GetAllAsync@@ 
(@@ 
filterAA 
:AA 
xAA 
=>AA  
xAA! "
.AA" #
CourseIdAA# +
==AA, .
courseIdAA/ 7
,AA7 8
includePropertiesBB %
:BB% &
$strBB' 7
)CC 
.DD 

GetAwaiterDD 
(DD 
)DD 
.DD 
	GetResultDD '
(DD' (
)DD( )
.DD) *
ToListDD* 0
(DD0 1
)DD1 2
;DD2 3
ifFF 
(FF 
courseVersionsFF 
.FF 
IsNullOrEmptyFF ,
(FF, -
)FF- .
)FF. /
{GG 
returnHH 
newHH 
ResponseDTOHH &
(HH& '
)HH' (
{II 
MessageJJ 
=JJ 
$strJJ <
,JJ< =
ResultKK 
=KK 
courseVersionsKK +
,KK+ ,
	IsSuccessLL 
=LL 
falseLL  %
,LL% &

StatusCodeMM 
=MM  
$numMM! $
}NN 
;NN 
}OO 
ifRR 
(RR 
!RR 
stringRR 
.RR 
IsNullOrEmptyRR %
(RR% &
filterOnRR& .
)RR. /
&&RR0 2
!RR3 4
stringRR4 :
.RR: ;
IsNullOrEmptyRR; H
(RRH I
filterQueryRRI T
)RRT U
)RRU V
{SS 
switchTT 
(TT 
filterOnTT  
.TT  !
TrimTT! %
(TT% &
)TT& '
.TT' (
ToLowerTT( /
(TT/ 0
)TT0 1
)TT1 2
{UU 
caseVV 
$strVV  
:VV  !
{WW 
courseVersionsXX &
=XX' (
courseVersionsXX) 7
.XX7 8
WhereXX8 =
(XX= >
xXX> ?
=>XX@ B
xYY 
.YY 
TitleYY #
.YY# $
ContainsYY$ ,
(YY, -
filterQueryYY- 8
,YY8 9
StringComparisonYY: J
.YYJ K$
CurrentCultureIgnoreCaseYYK c
)YYc d
)YYd e
.YYe f
ToListYYf l
(YYl m
)YYm n
;YYn o
breakZZ 
;ZZ 
}[[ 
case\\ 
$str\\ 
:\\  
{]] 
courseVersions^^ &
=^^' (
courseVersions^^) 7
.^^7 8
Where^^8 =
(^^= >
x^^> ?
=>^^@ B
x__ 
.__ 
Code__ "
.__" #
Contains__# +
(__+ ,
filterQuery__, 7
,__7 8
StringComparison__9 I
.__I J$
CurrentCultureIgnoreCase__J b
)__b c
)__c d
.__d e
ToList__e k
(__k l
)__l m
;__m n
break`` 
;`` 
}aa 
casebb 
$strbb &
:bb& '
{cc 
courseVersionsdd &
=dd' (
courseVersionsdd) 7
.dd7 8
Wheredd8 =
(dd= >
xdd> ?
=>dd@ B
xee 
.ee 
Descriptionee )
.ee) *
Containsee* 2
(ee2 3
filterQueryee3 >
,ee> ?
StringComparisonee@ P
.eeP Q$
CurrentCultureIgnoreCaseeeQ i
)eei j
)eej k
.eek l
ToListeel r
(eer s
)ees t
;eet u
breakff 
;ff 
}gg 
casehh 
$strhh !
:hh! "
{ii 
courseVersionsjj &
=jj' (
courseVersionsjj) 7
.jj7 8
Wherejj8 =
(jj= >
xjj> ?
=>jj@ B
xkk 
.kk 
CurrentStatuskk +
==kk, .
intkk/ 2
.kk2 3
Parsekk3 8
(kk8 9
filterQuerykk9 D
.kkD E
TrimkkE I
(kkI J
)kkJ K
)kkK L
)kkL M
.kkM N
ToListkkN T
(kkT U
)kkU V
;kkV W
breakll 
;ll 
}mm 
}nn 
}oo 
ifrr 
(rr 
!rr 
stringrr 
.rr 
IsNullOrEmptyrr %
(rr% &
sortByrr& ,
)rr, -
)rr- .
{ss 
switchtt 
(tt 
sortBytt 
.tt 
Trimtt #
(tt# $
)tt$ %
.tt% &
ToLowertt& -
(tt- .
)tt. /
)tt/ 0
{uu 
casevv 
$strvv  
:vv  !
{ww 
courseVersionsxx &
=xx' (
isAscendingxx) 4
==xx5 7
truexx8 <
?yy 
[yy 
..yy !
courseVersionsyy" 0
.yy0 1
OrderByyy1 8
(yy8 9
xyy9 :
=>yy; =
xyy> ?
.yy? @
Titleyy@ E
)yyE F
]yyF G
:zz 
[zz 
..zz !
courseVersionszz" 0
.zz0 1
OrderByDescendingzz1 B
(zzB C
xzzC D
=>zzE G
xzzH I
.zzI J
TitlezzJ O
)zzO P
]zzP Q
;zzQ R
break{{ 
;{{ 
}|| 
case}} 
$str}} 
:}}  
{~~ 
courseVersions &
=' (
isAscending) 4
==5 7
true8 <
?
ÄÄ 
[
ÄÄ 
..
ÄÄ !
courseVersions
ÄÄ" 0
.
ÄÄ0 1
OrderBy
ÄÄ1 8
(
ÄÄ8 9
x
ÄÄ9 :
=>
ÄÄ; =
x
ÄÄ> ?
.
ÄÄ? @
Code
ÄÄ@ D
)
ÄÄD E
]
ÄÄE F
:
ÅÅ 
[
ÅÅ 
..
ÅÅ !
courseVersions
ÅÅ" 0
.
ÅÅ0 1
OrderByDescending
ÅÅ1 B
(
ÅÅB C
x
ÅÅC D
=>
ÅÅE G
x
ÅÅH I
.
ÅÅI J
Code
ÅÅJ N
)
ÅÅN O
]
ÅÅO P
;
ÅÅP Q
break
ÇÇ 
;
ÇÇ 
}
ÉÉ 
case
ÑÑ 
$str
ÑÑ &
:
ÑÑ& '
{
ÖÖ 
courseVersions
ÜÜ &
=
ÜÜ' (
isAscending
ÜÜ) 4
==
ÜÜ5 7
true
ÜÜ8 <
?
áá 
[
áá 
..
áá !
courseVersions
áá" 0
.
áá0 1
OrderBy
áá1 8
(
áá8 9
x
áá9 :
=>
áá; =
x
áá> ?
.
áá? @
Description
áá@ K
)
ááK L
]
ááL M
:
àà 
[
àà 
..
àà !
courseVersions
àà" 0
.
àà0 1
OrderByDescending
àà1 B
(
ààB C
x
ààC D
=>
ààE G
x
ààH I
.
ààI J
Description
ààJ U
)
ààU V
]
ààV W
;
ààW X
break
ââ 
;
ââ 
}
ää 
case
ãã 
$str
ãã  
:
ãã  !
{
åå 
courseVersions
çç &
=
çç' (
isAscending
çç) 4
==
çç5 7
true
çç8 <
?
éé 
[
éé 
..
éé !
courseVersions
éé" 0
.
éé0 1
OrderBy
éé1 8
(
éé8 9
x
éé9 :
=>
éé; =
x
éé> ?
.
éé? @
Price
éé@ E
)
ééE F
]
ééF G
:
èè 
[
èè 
..
èè !
courseVersions
èè" 0
.
èè0 1
OrderByDescending
èè1 B
(
èèB C
x
èèC D
=>
èèE G
x
èèH I
.
èèI J
Price
èèJ O
)
èèO P
]
èèP Q
;
èèQ R
break
êê 
;
êê 
}
ëë 
default
íí 
:
íí 
{
ìì 
break
îî 
;
îî 
}
ïï 
}
ññ 
}
óó 
if
öö 
(
öö 

pageNumber
öö 
>
öö 
$num
öö 
&&
öö !
pageSize
öö" *
>
öö+ ,
$num
öö- .
)
öö. /
{
õõ 
var
úú 

skipResult
úú 
=
úú  
(
úú! "

pageNumber
úú" ,
-
úú- .
$num
úú/ 0
)
úú0 1
*
úú2 3
pageSize
úú4 <
;
úú< =
courseVersions
ùù 
=
ùù  
courseVersions
ùù! /
.
ùù/ 0
Skip
ùù0 4
(
ùù4 5

skipResult
ùù5 ?
)
ùù? @
.
ùù@ A
Take
ùùA E
(
ùùE F
pageSize
ùùF N
)
ùùN O
.
ùùO P
ToList
ùùP V
(
ùùV W
)
ùùW X
;
ùùX Y
}
ûû 
if
†† 
(
†† 
courseVersions
†† 
.
†† 
IsNullOrEmpty
†† ,
(
††, -
)
††- .
)
††. /
{
°° 
return
¢¢ 
new
¢¢ 
ResponseDTO
¢¢ &
(
¢¢& '
)
¢¢' (
{
££ 
Message
§§ 
=
§§ 
$str
§§ ;
,
§§; <
Result
•• 
=
•• 
courseVersions
•• +
,
••+ ,
	IsSuccess
¶¶ 
=
¶¶ 
false
¶¶  %
,
¶¶% &

StatusCode
ßß 
=
ßß  
$num
ßß! $
}
®® 
;
®® 
}
©© 
var
´´ 
courseVersionDto
´´  
=
´´! "
_mapper
´´# *
.
´´* +
Map
´´+ .
<
´´. /
List
´´/ 3
<
´´3 4!
GetCourseVersionDTO
´´4 G
>
´´G H
>
´´H I
(
´´I J
courseVersions
´´J X
)
´´X Y
;
´´Y Z
return
≠≠ 
new
≠≠ 
ResponseDTO
≠≠ "
(
≠≠" #
)
≠≠# $
{
ÆÆ 
Result
ØØ 
=
ØØ 
courseVersionDto
ØØ )
,
ØØ) *
Message
∞∞ 
=
∞∞ 
$str
∞∞ <
,
∞∞< =
	IsSuccess
±± 
=
±± 
true
±±  
,
±±  !

StatusCode
≤≤ 
=
≤≤ 
$num
≤≤  
}
≥≥ 
;
≥≥ 
}
¥¥ 	
catch
µµ 
(
µµ 
	Exception
µµ 
e
µµ 
)
µµ 
{
∂∂ 	
return
∑∑ 
new
∑∑ 
ResponseDTO
∑∑ "
(
∑∑" #
)
∑∑# $
{
∏∏ 
Result
ππ 
=
ππ 
null
ππ 
,
ππ 
Message
∫∫ 
=
∫∫ 
e
∫∫ 
.
∫∫ 
Message
∫∫ #
,
∫∫# $
	IsSuccess
ªª 
=
ªª 
false
ªª !
,
ªª! "

StatusCode
ºº 
=
ºº 
$num
ºº  
}
ΩΩ 
;
ΩΩ 
}
ææ 	
}
øø 
public
¡¡ 

async
¡¡ 
Task
¡¡ 
<
¡¡ 
ResponseDTO
¡¡ !
>
¡¡! "
GetCourseVersion
¡¡# 3
(
¬¬ 
ClaimsPrincipal
√√ 
User
√√ 
,
√√ 
Guid
ƒƒ 
courseVersionId
ƒƒ 
)
≈≈ 
{
∆∆ 
try
«« 
{
»» 	
var
…… 
courseVersion
…… 
=
…… 
await
   
_unitOfWork
   !
.
  ! "%
CourseVersionRepository
  " 9
.
  9 :
GetAsync
  : B
(
ÀÀ 
filter
ÃÃ 
:
ÃÃ 
x
ÃÃ 
=>
ÃÃ  
x
ÃÃ! "
.
ÃÃ" #
Id
ÃÃ# %
==
ÃÃ& (
courseVersionId
ÃÃ) 8
,
ÃÃ8 9
includeProperties
ÕÕ %
:
ÕÕ% &
$str
ÕÕ' 7
)
ŒŒ 
;
ŒŒ 
if
–– 
(
–– 
courseVersion
–– 
is
––  
null
––! %
)
––% &
{
—— 
return
““ 
new
““ 
ResponseDTO
““ &
(
““& '
)
““' (
{
”” 
Result
‘‘ 
=
‘‘ 
$str
‘‘ 
,
‘‘  
Message
’’ 
=
’’ 
$str
’’ <
,
’’< =
	IsSuccess
÷÷ 
=
÷÷ 
true
÷÷  $
,
÷÷$ %

StatusCode
◊◊ 
=
◊◊  
$num
◊◊! $
}
ÿÿ 
;
ÿÿ 
}
ŸŸ 
var
€€ 
courseVersionDto
€€  
=
€€! "
_mapper
€€# *
.
€€* +
Map
€€+ .
<
€€. /!
GetCourseVersionDTO
€€/ B
>
€€B C
(
€€C D
courseVersion
€€D Q
)
€€Q R
;
€€R S
return
›› 
new
›› 
ResponseDTO
›› "
(
››" #
)
››# $
{
ﬁﬁ 
Result
ﬂﬂ 
=
ﬂﬂ 
courseVersionDto
ﬂﬂ )
,
ﬂﬂ) *
Message
‡‡ 
=
‡‡ 
$str
‡‡ ;
,
‡‡; <
	IsSuccess
·· 
=
·· 
true
··  
,
··  !

StatusCode
‚‚ 
=
‚‚ 
$num
‚‚  
}
„„ 
;
„„ 
}
‰‰ 	
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ 
e
ÂÂ 
)
ÂÂ 
{
ÊÊ 	
return
ÁÁ 
new
ÁÁ 
ResponseDTO
ÁÁ "
(
ÁÁ" #
)
ÁÁ# $
{
ËË 
Result
ÈÈ 
=
ÈÈ 
null
ÈÈ 
,
ÈÈ 
Message
ÍÍ 
=
ÍÍ 
e
ÍÍ 
.
ÍÍ 
Message
ÍÍ #
,
ÍÍ# $
	IsSuccess
ÎÎ 
=
ÎÎ 
false
ÎÎ !
,
ÎÎ! "

StatusCode
ÏÏ 
=
ÏÏ 
$num
ÏÏ  
}
ÌÌ 
;
ÌÌ 
}
ÓÓ 	
}
ÔÔ 
public
ÒÒ 

async
ÒÒ 
Task
ÒÒ 
<
ÒÒ 
ResponseDTO
ÒÒ !
>
ÒÒ! "$
CreateCourseAndVersion
ÒÒ# 9
(
ÚÚ 
ClaimsPrincipal
ÛÛ 
User
ÛÛ 
,
ÛÛ *
CreateNewCourseAndVersionDTO
ÙÙ $*
createNewCourseAndVersionDto
ÙÙ% A
)
ıı 
{
ˆˆ 
try
˜˜ 
{
¯¯ 	
var
˘˘ 
userId
˘˘ 
=
˘˘ 
User
˘˘ 
.
˘˘ 
Claims
˘˘ $
.
˘˘$ %
FirstOrDefault
˘˘% 3
(
˘˘3 4
x
˘˘4 5
=>
˘˘6 8
x
˘˘9 :
.
˘˘: ;
Type
˘˘; ?
==
˘˘@ B

ClaimTypes
˘˘C M
.
˘˘M N
NameIdentifier
˘˘N \
)
˘˘\ ]
?
˘˘] ^
.
˘˘^ _
Value
˘˘_ d
;
˘˘d e
var
˙˙ 

instructor
˙˙ 
=
˙˙ 
await
˙˙ "
_unitOfWork
˙˙# .
.
˙˙. /"
InstructorRepository
˙˙/ C
.
˙˙C D
GetAsync
˙˙D L
(
˙˙L M
x
˙˙M N
=>
˙˙O Q
x
˙˙R S
.
˙˙S T
UserId
˙˙T Z
==
˙˙[ ]
userId
˙˙^ d
)
˙˙d e
;
˙˙e f
if
¸¸ 
(
¸¸ 

instructor
¸¸ 
is
¸¸ 
null
¸¸ "
)
¸¸" #
{
˝˝ 
return
˛˛ 
new
˛˛ 
ResponseDTO
˛˛ &
(
˛˛& '
)
˛˛' (
{
ˇˇ 
Message
ÄÄ 
=
ÄÄ 
$str
ÄÄ 8
,
ÄÄ8 9
	IsSuccess
ÅÅ 
=
ÅÅ 
false
ÅÅ  %
,
ÅÅ% &

StatusCode
ÇÇ 
=
ÇÇ  
$num
ÇÇ! $
,
ÇÇ$ %
Result
ÉÉ 
=
ÉÉ 
null
ÉÉ !
}
ÑÑ 
;
ÑÑ 
}
ÖÖ 
if
áá 
(
áá 

instructor
áá 
.
áá 

IsAccepted
áá %
is
áá& (
false
áá) .
or
áá/ 1
null
áá2 6
)
áá6 7
{
àà 
return
ââ 
new
ââ 
ResponseDTO
ââ &
(
ââ& '
)
ââ' (
{
ää 
Message
ãã 
=
ãã 
$str
ãã I
,
ããI J
	IsSuccess
åå 
=
åå 
false
åå  %
,
åå% &

StatusCode
çç 
=
çç  
$num
çç! $
,
çç$ %
Result
éé 
=
éé 
null
éé !
}
èè 
;
èè 
}
êê 
if
íí 
(
íí 

instructor
íí 
.
íí 
StripeAccountId
íí *
.
íí* +
IsNullOrEmpty
íí+ 8
(
íí8 9
)
íí9 :
)
íí: ;
{
ìì 
return
îî 
new
îî 
ResponseDTO
îî &
(
îî& '
)
îî' (
{
ïï 
Message
ññ 
=
ññ 
$str
ññ H
,
ññH I
	IsSuccess
óó 
=
óó 
false
óó  %
,
óó% &

StatusCode
òò 
=
òò  
$num
òò! $
,
òò$ %
Result
ôô 
=
ôô 
null
ôô !
}
öö 
;
öö 
}
õõ 
var
ùù 
courseVersionId
ùù 
=
ùù  !
Guid
ùù" &
.
ùù& '
NewGuid
ùù' .
(
ùù. /
)
ùù/ 0
;
ùù0 1
var
ûû 
response
ûû 
=
ûû 
await
ûû  
_courseService
ûû! /
.
ûû/ 0
CreateFrameCourse
ûû0 A
(
ûûA B
User
ûûB F
,
ûûF G
courseVersionId
ûûH W
)
ûûW X
;
ûûX Y
if
üü 
(
üü 
response
üü 
.
üü 
	IsSuccess
üü "
==
üü# %
false
üü& +
)
üü+ ,
{
†† 
return
°° 
response
°° 
;
°°  
}
¢¢ 
var
§§ 
course
§§ 
=
§§ 
(
§§ 
Course
§§  
)
§§  !
response
§§! )
.
§§) *
Result
§§* 0
!
§§0 1
;
§§1 2
var
¶¶ 
courseVersion
¶¶ 
=
¶¶ 
new
¶¶  #
CourseVersion
¶¶$ 1
(
¶¶1 2
)
¶¶2 3
{
ßß 
Id
®® 
=
®® 
courseVersionId
®® $
,
®®$ %
CourseId
©© 
=
©© 
course
©© !
.
©©! "
Id
©©" $
,
©©$ %
Title
™™ 
=
™™ *
createNewCourseAndVersionDto
™™ 4
.
™™4 5
Title
™™5 :
,
™™: ;
Code
´´ 
=
´´ *
createNewCourseAndVersionDto
´´ 3
.
´´3 4
Code
´´4 8
,
´´8 9
Description
¨¨ 
=
¨¨ *
createNewCourseAndVersionDto
¨¨ :
.
¨¨: ;
Description
¨¨; F
,
¨¨F G
LearningTime
≠≠ 
=
≠≠ *
createNewCourseAndVersionDto
≠≠ ;
.
≠≠; <
LearningTime
≠≠< H
,
≠≠H I
Price
ÆÆ 
=
ÆÆ *
createNewCourseAndVersionDto
ÆÆ 4
.
ÆÆ4 5
Price
ÆÆ5 :
,
ÆÆ: ;
OldPrice
ØØ 
=
ØØ 
$num
ØØ 
,
ØØ 
CourseImgUrl
∞∞ 
=
∞∞ *
createNewCourseAndVersionDto
∞∞ ;
.
∞∞; <
CourseImgUrl
∞∞< H
,
∞∞H I
InstructorId
±± 
=
±± 
course
±± %
.
±±% &
InstructorId
±±& 2
,
±±2 3

CategoryId
≤≤ 
=
≤≤ *
createNewCourseAndVersionDto
≤≤ 9
.
≤≤9 :

CategoryId
≤≤: D
,
≤≤D E
LevelId
≥≥ 
=
≥≥ *
createNewCourseAndVersionDto
≥≥ 6
.
≥≥6 7
LevelId
≥≥7 >
,
≥≥> ?
CurrentStatus
¥¥ 
=
¥¥ 
$num
¥¥  !
,
¥¥! "
Version
µµ 
=
µµ 
$num
µµ 
,
µµ 
CreatedTime
∂∂ 
=
∂∂ 
DateTime
∂∂ &
.
∂∂& '
UtcNow
∂∂' -
,
∂∂- .
}
∑∑ 
;
∑∑ 
await
ππ 
_unitOfWork
ππ 
.
ππ %
CourseVersionRepository
ππ 5
.
ππ5 6
AddAsync
ππ6 >
(
ππ> ?
courseVersion
ππ? L
)
ππL M
;
ππM N
await
∫∫ 
_unitOfWork
∫∫ 
.
∫∫ 
	SaveAsync
∫∫ '
(
∫∫' (
)
∫∫( )
;
∫∫) *
var
ΩΩ 
responseDto
ΩΩ 
=
ΩΩ 
await
ΩΩ #)
_courseVersionStatusService
ΩΩ$ ?
.
ΩΩ? @'
CreateCourseVersionStatus
ΩΩ@ Y
(
ææ 
User
øø 
,
øø 
new
¿¿ *
CreateCourseVersionStatusDTO
¿¿ 0
(
¿¿0 1
)
¿¿1 2
{
¡¡ 
CourseVersionId
¬¬ #
=
¬¬$ %
courseVersion
¬¬& 3
.
¬¬3 4
Id
¬¬4 6
,
¬¬6 7
Status
√√ 
=
√√ '
StaticCourseVersionStatus
√√ 6
.
√√6 7
New
√√7 :
}
ƒƒ 
)
≈≈ 
;
≈≈ 
if
«« 
(
«« 
responseDto
«« 
.
«« 
	IsSuccess
«« %
is
««& (
false
««) .
)
««. /
{
»» 
return
…… 
responseDto
…… "
;
……" #
}
   
return
ÃÃ 
new
ÃÃ 
ResponseDTO
ÃÃ "
(
ÃÃ" #
)
ÃÃ# $
{
ÕÕ 
Result
ŒŒ 
=
ŒŒ 
courseVersion
ŒŒ &
.
ŒŒ& '
Id
ŒŒ' )
,
ŒŒ) *
Message
œœ 
=
œœ 
$str
œœ M
,
œœM N
	IsSuccess
–– 
=
–– 
true
––  
,
––  !

StatusCode
—— 
=
—— 
$num
——  
}
““ 
;
““ 
}
”” 	
catch
‘‘ 
(
‘‘ 
	Exception
‘‘ 
e
‘‘ 
)
‘‘ 
{
’’ 	
return
÷÷ 
new
÷÷ 
ResponseDTO
÷÷ "
(
÷÷" #
)
÷÷# $
{
◊◊ 
Result
ÿÿ 
=
ÿÿ 
null
ÿÿ 
,
ÿÿ 
	IsSuccess
ŸŸ 
=
ŸŸ 
false
ŸŸ !
,
ŸŸ! "
Message
⁄⁄ 
=
⁄⁄ 
e
⁄⁄ 
.
⁄⁄ 
Message
⁄⁄ #
,
⁄⁄# $

StatusCode
€€ 
=
€€ 
$num
€€  
}
‹‹ 
;
‹‹ 
}
›› 	
}
ﬁﬁ 
public
‡‡ 

async
‡‡ 
Task
‡‡ 
<
‡‡ 
ResponseDTO
‡‡ !
>
‡‡! " 
CloneCourseVersion
‡‡# 5
(
·· 
ClaimsPrincipal
‚‚ 
User
‚‚ 
,
‚‚ #
CloneCourseVersionDTO
„„ #
cloneCourseVersionDto
„„ 3
)
‰‰ 
{
ÂÂ 
try
ÊÊ 
{
ÁÁ 	
var
ÈÈ 
courseVersion
ÈÈ 
=
ÈÈ 
await
ÍÍ 
_unitOfWork
ÍÍ !
.
ÍÍ! "%
CourseVersionRepository
ÍÍ" 9
.
ÍÍ9 :#
GetCourseVersionAsync
ÍÍ: O
(
ÎÎ #
cloneCourseVersionDto
ÏÏ )
.
ÏÏ) *
CourseVersionId
ÏÏ* 9
,
ÏÏ9 :
asNoTracking
ÌÌ  
:
ÌÌ  !
true
ÌÌ" &
)
ÓÓ 
;
ÓÓ 
if
 
(
 
courseVersion
 
is
  
null
! %
)
% &
{
ÒÒ 
return
ÚÚ 
new
ÚÚ 
ResponseDTO
ÚÚ &
(
ÚÚ& '
)
ÚÚ' (
{
ÛÛ 
Result
ÙÙ 
=
ÙÙ 
null
ÙÙ !
,
ÙÙ! "
	IsSuccess
ıı 
=
ıı 
false
ıı  %
,
ıı% &
Message
ˆˆ 
=
ˆˆ 
$str
ˆˆ =
,
ˆˆ= >

StatusCode
˜˜ 
=
˜˜  
$num
˜˜! $
,
˜˜$ %
}
¯¯ 
;
¯¯ 
}
˘˘ 
var
¸¸ *
cloneCourseSectionVersionDto
¸¸ ,
=
¸¸- .
new
¸¸/ 2*
CloneCourseSectionVersionDTO
¸¸3 O
(
¸¸O P
)
¸¸P Q
{
˝˝  
NewCourseVersionId
˛˛ "
=
˛˛# $
Guid
˛˛% )
.
˛˛) *
NewGuid
˛˛* 1
(
˛˛1 2
)
˛˛2 3
,
˛˛3 4 
OldCourseVersionId
ˇˇ "
=
ˇˇ# $
courseVersion
ˇˇ% 2
.
ˇˇ2 3
Id
ˇˇ3 5
}
ÄÄ 
;
ÄÄ 
courseVersion
ÇÇ 
.
ÇÇ 
Id
ÇÇ 
=
ÇÇ *
cloneCourseSectionVersionDto
ÇÇ ;
.
ÇÇ; < 
NewCourseVersionId
ÇÇ< N
;
ÇÇN O
courseVersion
ÉÉ 
.
ÉÉ 
CurrentStatus
ÉÉ '
=
ÉÉ( )'
StaticCourseVersionStatus
ÉÉ* C
.
ÉÉC D
New
ÉÉD G
;
ÉÉG H
courseVersion
ÑÑ 
.
ÑÑ 
Version
ÑÑ !
=
ÑÑ" #
await
ÖÖ 
_unitOfWork
ÖÖ !
.
ÖÖ! "%
CourseVersionRepository
ÖÖ" 9
.
ÖÖ9 :)
GetTotalCourseVersionsAsync
ÖÖ: U
(
ÖÖU V
courseVersion
ÖÖV c
.
ÖÖc d
CourseId
ÖÖd l
)
ÖÖl m
+
ÖÖn o
$num
ÖÖp q
;
ÖÖq r
await
áá 
_unitOfWork
áá 
.
áá %
CourseVersionRepository
áá 5
.
áá5 6
AddAsync
áá6 >
(
áá> ?
courseVersion
áá? L
)
ááL M
;
ááM N
await
àà 
_unitOfWork
àà 
.
àà 
	SaveAsync
àà '
(
àà' (
)
àà( )
;
àà) *
var
ãã 
responseDto
ãã 
=
ãã 
await
åå *
_courseSectionVersionService
åå 2
.
åå2 3'
CloneCourseSectionVersion
åå3 L
(
çç 
User
éé 
,
éé *
cloneCourseSectionVersionDto
èè 0
)
êê 
;
êê 
if
ëë 
(
ëë 
responseDto
ëë 
.
ëë 

StatusCode
ëë &
==
ëë' )
$num
ëë* -
)
ëë- .
{
íí 
return
ìì 
responseDto
ìì "
;
ìì" #
}
îî 
responseDto
óó 
=
óó 
await
óó )
_courseVersionStatusService
óó  ;
.
óó; <'
CreateCourseVersionStatus
óó< U
(
òò 
User
ôô 
,
ôô 
new
öö *
CreateCourseVersionStatusDTO
öö 0
(
öö0 1
)
öö1 2
{
õõ 
CourseVersionId
úú #
=
úú$ %
courseVersion
úú& 3
.
úú3 4
Id
úú4 6
,
úú6 7
Status
ùù 
=
ùù '
StaticCourseVersionStatus
ùù 6
.
ùù6 7
New
ùù7 :
}
ûû 
)
üü 
;
üü 
if
°° 
(
°° 
responseDto
°° 
.
°° 
	IsSuccess
°° %
is
°°& (
false
°°) .
)
°°. /
{
¢¢ 
return
££ 
responseDto
££ "
;
££" #
}
§§ 
return
¶¶ 
new
¶¶ 
ResponseDTO
¶¶ "
(
¶¶" #
)
¶¶# $
{
ßß 
Result
®® 
=
®® 
null
®® 
,
®® 
	IsSuccess
©© 
=
©© 
true
©©  
,
©©  !
Message
™™ 
=
™™ 
$str
™™ A
,
™™A B

StatusCode
´´ 
=
´´ 
$num
´´  
}
¨¨ 
;
¨¨ 
}
≠≠ 	
catch
ÆÆ 
(
ÆÆ 
	Exception
ÆÆ 
e
ÆÆ 
)
ÆÆ 
{
ØØ 	
return
∞∞ 
new
∞∞ 
ResponseDTO
∞∞ "
(
∞∞" #
)
∞∞# $
{
±± 
Result
≤≤ 
=
≤≤ 
null
≤≤ 
,
≤≤ 
	IsSuccess
≥≥ 
=
≥≥ 
false
≥≥ !
,
≥≥! "
Message
¥¥ 
=
¥¥ 
e
¥¥ 
.
¥¥ 
Message
¥¥ #
,
¥¥# $

StatusCode
µµ 
=
µµ 
$num
µµ  
}
∂∂ 
;
∂∂ 
}
∑∑ 	
}
∏∏ 
public
∫∫ 

async
∫∫ 
Task
∫∫ 
<
∫∫ 
ResponseDTO
∫∫ !
>
∫∫! "
EditCourseVersion
∫∫# 4
(
∫∫4 5
ClaimsPrincipal
∫∫5 D
User
∫∫E I
,
∫∫I J"
EditCourseVersionDTO
∫∫K _"
editCourseVersionDto
∫∫` t
)
∫∫t u
{
ªª 
try
ºº 
{
ΩΩ 	
var
ææ 
courseVersion
ææ 
=
ææ 
await
øø 
_unitOfWork
øø !
.
øø! "%
CourseVersionRepository
øø" 9
.
øø9 :
GetAsync
øø: B
(
øøB C
x
øøC D
=>
øøE G
x
øøH I
.
øøI J
Id
øøJ L
==
øøM O"
editCourseVersionDto
øøP d
.
øød e
Id
øøe g
)
øøg h
;
øøh i
if
¡¡ 
(
¡¡ 
courseVersion
¡¡ 
is
¡¡  
null
¡¡! %
)
¡¡% &
{
¬¬ 
return
√√ 
new
√√ 
ResponseDTO
√√ &
(
√√& '
)
√√' (
{
ƒƒ 
Message
≈≈ 
=
≈≈ 
$str
≈≈ <
,
≈≈< =

StatusCode
∆∆ 
=
∆∆  
$num
∆∆! $
,
∆∆$ %
	IsSuccess
«« 
=
«« 
false
««  %
,
««% &
Result
»» 
=
»» 
null
»» !
}
…… 
;
…… 
}
   
switch
ÃÃ 
(
ÃÃ 
courseVersion
ÃÃ !
.
ÃÃ! "
CurrentStatus
ÃÃ" /
)
ÃÃ/ 0
{
ÕÕ 
case
ŒŒ '
StaticCourseVersionStatus
ŒŒ .
.
ŒŒ. /
New
ŒŒ/ 2
:
ŒŒ2 3
{
œœ 
break
–– 
;
–– 
}
—— 
case
““ '
StaticCourseVersionStatus
““ .
.
““. /
	Submitted
““/ 8
:
““8 9
{
”” 
return
‘‘ 
new
‘‘ 
ResponseDTO
‘‘ *
(
‘‘* +
)
‘‘+ ,
{
’’ 
Message
÷÷ 
=
÷÷  !
$str
÷÷" E
,
÷÷E F
	IsSuccess
◊◊ !
=
◊◊" #
false
◊◊$ )
,
◊◊) *

StatusCode
ÿÿ "
=
ÿÿ# $
$num
ÿÿ% (
,
ÿÿ( )
Result
ŸŸ 
=
ŸŸ  
null
ŸŸ! %
}
⁄⁄ 
;
⁄⁄ 
}
€€ 
case
‹‹ '
StaticCourseVersionStatus
‹‹ .
.
‹‹. /
Accepted
‹‹/ 7
:
‹‹7 8
{
›› 
break
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
case
‡‡ '
StaticCourseVersionStatus
‡‡ .
.
‡‡. /
Rejected
‡‡/ 7
:
‡‡7 8
{
·· 
break
‚‚ 
;
‚‚ 
}
„„ 
case
‰‰ '
StaticCourseVersionStatus
‰‰ .
.
‰‰. /
Merged
‰‰/ 5
:
‰‰5 6
{
ÂÂ 
return
ÊÊ 
new
ÊÊ 
ResponseDTO
ÊÊ *
(
ÊÊ* +
)
ÊÊ+ ,
{
ÁÁ 
Message
ËË 
=
ËË  !
$str
ËË" B
,
ËËB C
	IsSuccess
ÈÈ !
=
ÈÈ" #
false
ÈÈ$ )
,
ÈÈ) *

StatusCode
ÍÍ "
=
ÍÍ# $
$num
ÍÍ% (
,
ÍÍ( )
Result
ÎÎ 
=
ÎÎ  
null
ÎÎ! %
}
ÏÏ 
;
ÏÏ 
}
ÌÌ 
case
ÓÓ '
StaticCourseVersionStatus
ÓÓ .
.
ÓÓ. /
Removed
ÓÓ/ 6
:
ÓÓ6 7
{
ÔÔ 
return
 
new
 
ResponseDTO
 *
(
* +
)
+ ,
{
ÒÒ 
Message
ÚÚ 
=
ÚÚ  !
$str
ÚÚ" C
,
ÚÚC D
	IsSuccess
ÛÛ !
=
ÛÛ" #
false
ÛÛ$ )
,
ÛÛ) *

StatusCode
ÙÙ "
=
ÙÙ# $
$num
ÙÙ% (
,
ÙÙ( )
Result
ıı 
=
ıı  
null
ıı! %
}
ˆˆ 
;
ˆˆ 
}
˜˜ 
}
¯¯ 
courseVersion
˙˙ 
.
˙˙ 

CategoryId
˙˙ $
=
˙˙% &"
editCourseVersionDto
˙˙' ;
.
˙˙; <

CategoryId
˙˙< F
;
˙˙F G
courseVersion
˚˚ 
.
˚˚ 
LevelId
˚˚ !
=
˚˚" #"
editCourseVersionDto
˚˚$ 8
.
˚˚8 9
LevelId
˚˚9 @
;
˚˚@ A
courseVersion
¸¸ 
.
¸¸ 
Title
¸¸ 
=
¸¸  !"
editCourseVersionDto
¸¸" 6
.
¸¸6 7
Title
¸¸7 <
;
¸¸< =
courseVersion
˝˝ 
.
˝˝ 
Code
˝˝ 
=
˝˝  "
editCourseVersionDto
˝˝! 5
.
˝˝5 6
Code
˝˝6 :
;
˝˝: ;
courseVersion
˛˛ 
.
˛˛ 
Description
˛˛ %
=
˛˛& '"
editCourseVersionDto
˛˛( <
.
˛˛< =
Description
˛˛= H
;
˛˛H I
courseVersion
ˇˇ 
.
ˇˇ 
LearningTime
ˇˇ &
=
ˇˇ' ("
editCourseVersionDto
ˇˇ) =
.
ˇˇ= >
LearningTime
ˇˇ> J
;
ˇˇJ K
courseVersion
ÄÄ 
.
ÄÄ 
Price
ÄÄ 
=
ÄÄ  !"
editCourseVersionDto
ÄÄ" 6
.
ÄÄ6 7
Price
ÄÄ7 <
;
ÄÄ< =
courseVersion
ÅÅ 
.
ÅÅ 
CourseImgUrl
ÅÅ &
=
ÅÅ' ("
editCourseVersionDto
ÅÅ) =
.
ÅÅ= >
CourseImgUrl
ÅÅ> J
;
ÅÅJ K
_unitOfWork
ÉÉ 
.
ÉÉ %
CourseVersionRepository
ÉÉ /
.
ÉÉ/ 0
Update
ÉÉ0 6
(
ÉÉ6 7
courseVersion
ÉÉ7 D
)
ÉÉD E
;
ÉÉE F
await
ÑÑ 
_unitOfWork
ÑÑ 
.
ÑÑ 
	SaveAsync
ÑÑ '
(
ÑÑ' (
)
ÑÑ( )
;
ÑÑ) *
return
ÜÜ 
new
ÜÜ 
ResponseDTO
ÜÜ "
(
ÜÜ" #
)
ÜÜ# $
{
áá 
Message
àà 
=
àà 
$str
àà >
,
àà> ?
	IsSuccess
ââ 
=
ââ 
true
ââ  
,
ââ  !

StatusCode
ää 
=
ää 
$num
ää  
,
ää  !
Result
ãã 
=
ãã 
null
ãã 
}
åå 
;
åå 
}
çç 	
catch
éé 
(
éé 
	Exception
éé 
e
éé 
)
éé 
{
èè 	
return
êê 
new
êê 
ResponseDTO
êê "
(
êê" #
)
êê# $
{
ëë 
Result
íí 
=
íí 
null
íí 
,
íí 
	IsSuccess
ìì 
=
ìì 
false
ìì !
,
ìì! "
Message
îî 
=
îî 
e
îî 
.
îî 
Message
îî #
,
îî# $

StatusCode
ïï 
=
ïï 
$num
ïï  
}
ññ 
;
ññ 
}
óó 	
}
òò 
public
öö 

async
öö 
Task
öö 
<
öö 
ResponseDTO
öö !
>
öö! "!
RemoveCourseVersion
öö# 6
(
õõ 
ClaimsPrincipal
úú 
User
úú 
,
úú 
Guid
ùù 
courseVersionId
ùù 
)
ûû 
{
üü 
try
†† 
{
°° 	
var
¢¢ 
courseVersion
¢¢ 
=
¢¢ 
await
¢¢  %
_unitOfWork
¢¢& 1
.
¢¢1 2%
CourseVersionRepository
¢¢2 I
.
¢¢I J
GetAsync
¢¢J R
(
¢¢R S
x
¢¢S T
=>
¢¢U W
x
¢¢X Y
.
¢¢Y Z
Id
¢¢Z \
==
¢¢] _
courseVersionId
¢¢` o
)
¢¢o p
;
¢¢p q
if
§§ 
(
§§ 
courseVersion
§§ 
is
§§  
null
§§! %
)
§§% &
{
•• 
return
¶¶ 
new
¶¶ 
ResponseDTO
¶¶ &
(
¶¶& '
)
¶¶' (
{
ßß 
Result
®® 
=
®® 
null
®® !
,
®®! "
	IsSuccess
©© 
=
©© 
false
©©  %
,
©©% &
Message
™™ 
=
™™ 
$str
™™ <
,
™™< =

StatusCode
´´ 
=
´´  
$num
´´! $
}
¨¨ 
;
¨¨ 
}
≠≠ 
switch
ØØ 
(
ØØ 
courseVersion
ØØ !
.
ØØ! "
CurrentStatus
ØØ" /
)
ØØ/ 0
{
∞∞ 
case
±± '
StaticCourseVersionStatus
±± .
.
±±. /
	Submitted
±±/ 8
:
±±8 9
{
≤≤ 
return
≥≥ 
new
≥≥ 
ResponseDTO
≥≥ *
(
≥≥* +
)
≥≥+ ,
{
¥¥ 
Message
µµ 
=
µµ  !
$str
µµ" F
,
µµF G

StatusCode
∂∂ "
=
∂∂# $
$num
∂∂% (
,
∂∂( )
	IsSuccess
∑∑ !
=
∑∑" #
false
∑∑$ )
,
∑∑) *
Result
∏∏ 
=
∏∏  
null
∏∏! %
}
ππ 
;
ππ 
}
∫∫ 
case
ªª '
StaticCourseVersionStatus
ªª .
.
ªª. /
Merged
ªª/ 5
:
ªª5 6
{
ºº 
return
ΩΩ 
new
ΩΩ 
ResponseDTO
ΩΩ *
(
ΩΩ* +
)
ΩΩ+ ,
{
ææ 
Message
øø 
=
øø  !
$str
øø" C
,
øøC D

StatusCode
¿¿ "
=
¿¿# $
$num
¿¿% (
,
¿¿( )
	IsSuccess
¡¡ !
=
¡¡" #
false
¡¡$ )
,
¡¡) *
Result
¬¬ 
=
¬¬  
null
¬¬! %
}
√√ 
;
√√ 
}
ƒƒ 
case
≈≈ '
StaticCourseVersionStatus
≈≈ .
.
≈≈. /
Removed
≈≈/ 6
:
≈≈6 7
{
∆∆ 
return
«« 
new
«« 
ResponseDTO
«« *
(
««* +
)
««+ ,
{
»» 
Message
…… 
=
……  !
$str
……" D
,
……D E

StatusCode
   "
=
  # $
$num
  % (
,
  ( )
	IsSuccess
ÀÀ !
=
ÀÀ" #
false
ÀÀ$ )
,
ÀÀ) *
Result
ÃÃ 
=
ÃÃ  
null
ÃÃ! %
}
ÕÕ 
;
ÕÕ 
}
ŒŒ 
default
œœ 
:
œœ 
{
–– 
courseVersion
—— !
.
——! "
CurrentStatus
——" /
=
——0 1'
StaticCourseVersionStatus
——2 K
.
——K L
Removed
——L S
;
——S T
break
““ 
;
““ 
}
”” 
}
‘‘ 
_unitOfWork
÷÷ 
.
÷÷ %
CourseVersionRepository
÷÷ /
.
÷÷/ 0
Update
÷÷0 6
(
÷÷6 7
courseVersion
÷÷7 D
)
÷÷D E
;
÷÷E F
var
ÿÿ 
responseDto
ÿÿ 
=
ÿÿ 
await
ÿÿ #)
_courseVersionStatusService
ÿÿ$ ?
.
ÿÿ? @'
CreateCourseVersionStatus
ÿÿ@ Y
(
ŸŸ 
User
⁄⁄ 
,
⁄⁄ 
new
€€ *
CreateCourseVersionStatusDTO
€€ 0
(
€€0 1
)
€€1 2
{
‹‹ 
CourseVersionId
›› #
=
››$ %
courseVersion
››& 3
.
››3 4
Id
››4 6
,
››6 7
Status
ﬁﬁ 
=
ﬁﬁ '
StaticCourseVersionStatus
ﬁﬁ 6
.
ﬁﬁ6 7
Removed
ﬁﬁ7 >
}
ﬂﬂ 
)
‡‡ 
;
‡‡ 
if
‚‚ 
(
‚‚ 
responseDto
‚‚ 
.
‚‚ 

StatusCode
‚‚ &
==
‚‚' )
$num
‚‚* -
)
‚‚- .
{
„„ 
return
‰‰ 
responseDto
‰‰ "
;
‰‰" #
}
ÂÂ 
return
ÁÁ 
new
ÁÁ 
ResponseDTO
ÁÁ "
(
ÁÁ" #
)
ÁÁ# $
{
ËË 
Result
ÈÈ 
=
ÈÈ 
null
ÈÈ 
,
ÈÈ 
	IsSuccess
ÍÍ 
=
ÍÍ 
true
ÍÍ  
,
ÍÍ  !
Message
ÎÎ 
=
ÎÎ 
$str
ÎÎ >
,
ÎÎ> ?

StatusCode
ÏÏ 
=
ÏÏ 
$num
ÏÏ  
}
ÌÌ 
;
ÌÌ 
}
ÓÓ 	
catch
ÔÔ 
(
ÔÔ 
	Exception
ÔÔ 
e
ÔÔ 
)
ÔÔ 
{
 	
return
ÒÒ 
new
ÒÒ 
ResponseDTO
ÒÒ "
(
ÒÒ" #
)
ÒÒ# $
{
ÚÚ 
Result
ÛÛ 
=
ÛÛ 
null
ÛÛ 
,
ÛÛ 
	IsSuccess
ÙÙ 
=
ÙÙ 
false
ÙÙ !
,
ÙÙ! "
Message
ıı 
=
ıı 
e
ıı 
.
ıı 
Message
ıı #
,
ıı# $

StatusCode
ˆˆ 
=
ˆˆ 
$num
ˆˆ  
}
˜˜ 
;
˜˜ 
}
¯¯ 	
}
˘˘ 
public
˚˚ 

async
˚˚ 
Task
˚˚ 
<
˚˚ 
ResponseDTO
˚˚ !
>
˚˚! "!
AcceptCourseVersion
˚˚# 6
(
¸¸ 
ClaimsPrincipal
˝˝ 
User
˝˝ 
,
˝˝ 
Guid
˛˛ 
courseVersionId
˛˛ 
)
ˇˇ 
{
ÄÄ 
try
ÅÅ 
{
ÇÇ 	
var
ÉÉ 
courseVersion
ÉÉ 
=
ÉÉ 
await
ÉÉ  %
_unitOfWork
ÉÉ& 1
.
ÉÉ1 2%
CourseVersionRepository
ÉÉ2 I
.
ÉÉI J
GetAsync
ÉÉJ R
(
ÉÉR S
x
ÉÉS T
=>
ÉÉU W
x
ÉÉX Y
.
ÉÉY Z
Id
ÉÉZ \
==
ÉÉ] _
courseVersionId
ÉÉ` o
)
ÉÉo p
;
ÉÉp q
if
ÖÖ 
(
ÖÖ 
courseVersion
ÖÖ 
is
ÖÖ  
null
ÖÖ! %
)
ÖÖ% &
{
ÜÜ 
return
áá 
new
áá 
ResponseDTO
áá &
(
áá& '
)
áá' (
{
àà 
Result
ââ 
=
ââ 
null
ââ !
,
ââ! "
	IsSuccess
ää 
=
ää 
false
ää  %
,
ää% &
Message
ãã 
=
ãã 
$str
ãã <
,
ãã< =

StatusCode
åå 
=
åå  
$num
åå! $
}
çç 
;
çç 
}
éé 
switch
êê 
(
êê 
courseVersion
êê !
.
êê! "
CurrentStatus
êê" /
)
êê/ 0
{
ëë 
case
íí '
StaticCourseVersionStatus
íí .
.
íí. /
New
íí/ 2
:
íí2 3
{
ìì 
return
îî 
new
îî 
ResponseDTO
îî *
(
îî* +
)
îî+ ,
{
ïï 
Message
ññ 
=
ññ  !
$str
ññ" G
,
ññG H

StatusCode
óó "
=
óó# $
$num
óó% (
,
óó( )
	IsSuccess
òò !
=
òò" #
false
òò$ )
,
òò) *
Result
ôô 
=
ôô  
null
ôô! %
}
öö 
;
öö 
}
õõ 
case
úú '
StaticCourseVersionStatus
úú .
.
úú. /
Accepted
úú/ 7
:
úú7 8
{
ùù 
return
ûû 
new
ûû 
ResponseDTO
ûû *
(
ûû* +
)
ûû+ ,
{
üü 
Message
†† 
=
††  !
$str
††" E
,
††E F

StatusCode
°° "
=
°°# $
$num
°°% (
,
°°( )
	IsSuccess
¢¢ !
=
¢¢" #
false
¢¢$ )
,
¢¢) *
Result
££ 
=
££  
null
££! %
}
§§ 
;
§§ 
}
•• 
case
¶¶ '
StaticCourseVersionStatus
¶¶ .
.
¶¶. /
Merged
¶¶/ 5
:
¶¶5 6
{
ßß 
return
®® 
new
®® 
ResponseDTO
®® *
(
®®* +
)
®®+ ,
{
©© 
Message
™™ 
=
™™  !
$str
™™" C
,
™™C D

StatusCode
´´ "
=
´´# $
$num
´´% (
,
´´( )
	IsSuccess
¨¨ !
=
¨¨" #
false
¨¨$ )
,
¨¨) *
Result
≠≠ 
=
≠≠  
null
≠≠! %
}
ÆÆ 
;
ÆÆ 
}
ØØ 
case
∞∞ '
StaticCourseVersionStatus
∞∞ .
.
∞∞. /
Removed
∞∞/ 6
:
∞∞6 7
{
±± 
return
≤≤ 
new
≤≤ 
ResponseDTO
≤≤ *
(
≤≤* +
)
≤≤+ ,
{
≥≥ 
Message
¥¥ 
=
¥¥  !
$str
¥¥" D
,
¥¥D E

StatusCode
µµ "
=
µµ# $
$num
µµ% (
,
µµ( )
	IsSuccess
∂∂ !
=
∂∂" #
false
∂∂$ )
,
∂∂) *
Result
∑∑ 
=
∑∑  
null
∑∑! %
}
∏∏ 
;
∏∏ 
}
ππ 
default
∫∫ 
:
∫∫ 
{
ªª 
courseVersion
ºº !
.
ºº! "
CurrentStatus
ºº" /
=
ºº0 1'
StaticCourseVersionStatus
ºº2 K
.
ººK L
Accepted
ººL T
;
ººT U
break
ΩΩ 
;
ΩΩ 
}
ææ 
}
øø 
_unitOfWork
¡¡ 
.
¡¡ %
CourseVersionRepository
¡¡ /
.
¡¡/ 0
Update
¡¡0 6
(
¡¡6 7
courseVersion
¡¡7 D
)
¡¡D E
;
¡¡E F
var
√√ 
responseDto
√√ 
=
√√ 
await
√√ #)
_courseVersionStatusService
√√$ ?
.
√√? @'
CreateCourseVersionStatus
√√@ Y
(
ƒƒ 
User
≈≈ 
,
≈≈ 
new
∆∆ *
CreateCourseVersionStatusDTO
∆∆ 0
(
∆∆0 1
)
∆∆1 2
{
«« 
CourseVersionId
»» #
=
»»$ %
courseVersion
»»& 3
.
»»3 4
Id
»»4 6
,
»»6 7
Status
…… 
=
…… '
StaticCourseVersionStatus
…… 6
.
……6 7
Accepted
……7 ?
}
   
)
ÀÀ 
;
ÀÀ 
if
ÕÕ 
(
ÕÕ 
responseDto
ÕÕ 
.
ÕÕ 

StatusCode
ÕÕ &
==
ÕÕ' )
$num
ÕÕ* -
)
ÕÕ- .
{
ŒŒ 
return
œœ 
responseDto
œœ "
;
œœ" #
}
–– 
BackgroundJob
““ 
.
““ 
Enqueue
““ !
<
““! "
IEmailSender
““" .
>
““. /
(
““/ 0
job
““0 3
=>
““4 6
job
““7 :
.
““: ;2
$SendAcceptedCourseEmailForInstructor
““; _
(
““_ `
courseVersionId
““` o
)
““o p
)
““p q
;
““q r
return
‘‘ 
new
‘‘ 
ResponseDTO
‘‘ "
(
‘‘" #
)
‘‘# $
{
’’ 
Result
÷÷ 
=
÷÷ 
null
÷÷ 
,
÷÷ 
	IsSuccess
◊◊ 
=
◊◊ 
true
◊◊  
,
◊◊  !
Message
ÿÿ 
=
ÿÿ 
$str
ÿÿ >
,
ÿÿ> ?

StatusCode
ŸŸ 
=
ŸŸ 
$num
ŸŸ  
}
⁄⁄ 
;
⁄⁄ 
}
€€ 	
catch
‹‹ 
(
‹‹ 
	Exception
‹‹ 
e
‹‹ 
)
‹‹ 
{
›› 	
return
ﬁﬁ 
new
ﬁﬁ 
ResponseDTO
ﬁﬁ "
(
ﬁﬁ" #
)
ﬁﬁ# $
{
ﬂﬂ 
Result
‡‡ 
=
‡‡ 
null
‡‡ 
,
‡‡ 
	IsSuccess
·· 
=
·· 
false
·· !
,
··! "
Message
‚‚ 
=
‚‚ 
e
‚‚ 
.
‚‚ 
Message
‚‚ #
,
‚‚# $

StatusCode
„„ 
=
„„ 
$num
„„  
}
‰‰ 
;
‰‰ 
}
ÂÂ 	
}
ÊÊ 
public
ËË 

async
ËË 
Task
ËË 
<
ËË 
ResponseDTO
ËË !
>
ËË! "!
RejectCourseVersion
ËË# 6
(
ÈÈ 
ClaimsPrincipal
ÍÍ 
User
ÍÍ 
,
ÍÍ 
Guid
ÎÎ 
courseVersionId
ÎÎ 
)
ÏÏ 
{
ÌÌ 
try
ÓÓ 
{
ÔÔ 	
var
 
courseVersion
 
=
 
await
  %
_unitOfWork
& 1
.
1 2%
CourseVersionRepository
2 I
.
I J
GetAsync
J R
(
R S
x
S T
=>
U W
x
X Y
.
Y Z
Id
Z \
==
] _
courseVersionId
` o
)
o p
;
p q
if
ÚÚ 
(
ÚÚ 
courseVersion
ÚÚ 
is
ÚÚ  
null
ÚÚ! %
)
ÚÚ% &
{
ÛÛ 
return
ÙÙ 
new
ÙÙ 
ResponseDTO
ÙÙ &
(
ÙÙ& '
)
ÙÙ' (
{
ıı 
Result
ˆˆ 
=
ˆˆ 
null
ˆˆ !
,
ˆˆ! "
	IsSuccess
˜˜ 
=
˜˜ 
false
˜˜  %
,
˜˜% &
Message
¯¯ 
=
¯¯ 
$str
¯¯ <
,
¯¯< =

StatusCode
˘˘ 
=
˘˘  
$num
˘˘! $
}
˙˙ 
;
˙˙ 
}
˚˚ 
switch
˝˝ 
(
˝˝ 
courseVersion
˝˝ !
.
˝˝! "
CurrentStatus
˝˝" /
)
˝˝/ 0
{
˛˛ 
case
ˇˇ '
StaticCourseVersionStatus
ˇˇ .
.
ˇˇ. /
New
ˇˇ/ 2
:
ˇˇ2 3
{
ÄÄ 
return
ÅÅ 
new
ÅÅ 
ResponseDTO
ÅÅ *
(
ÅÅ* +
)
ÅÅ+ ,
{
ÇÇ 
Message
ÉÉ 
=
ÉÉ  !
$str
ÉÉ" G
,
ÉÉG H

StatusCode
ÑÑ "
=
ÑÑ# $
$num
ÑÑ% (
,
ÑÑ( )
	IsSuccess
ÖÖ !
=
ÖÖ" #
false
ÖÖ$ )
,
ÖÖ) *
Result
ÜÜ 
=
ÜÜ  
null
ÜÜ! %
}
áá 
;
áá 
}
àà 
case
ââ '
StaticCourseVersionStatus
ââ .
.
ââ. /
Accepted
ââ/ 7
:
ââ7 8
{
ää 
return
ãã 
new
ãã 
ResponseDTO
ãã *
(
ãã* +
)
ãã+ ,
{
åå 
Message
çç 
=
çç  !
$str
çç" E
,
ççE F

StatusCode
éé "
=
éé# $
$num
éé% (
,
éé( )
	IsSuccess
èè !
=
èè" #
false
èè$ )
,
èè) *
Result
êê 
=
êê  
null
êê! %
}
ëë 
;
ëë 
}
íí 
case
ìì '
StaticCourseVersionStatus
ìì .
.
ìì. /
Merged
ìì/ 5
:
ìì5 6
{
îî 
return
ïï 
new
ïï 
ResponseDTO
ïï *
(
ïï* +
)
ïï+ ,
{
ññ 
Message
óó 
=
óó  !
$str
óó" C
,
óóC D

StatusCode
òò "
=
òò# $
$num
òò% (
,
òò( )
	IsSuccess
ôô !
=
ôô" #
false
ôô$ )
,
ôô) *
Result
öö 
=
öö  
null
öö! %
}
õõ 
;
õõ 
}
úú 
case
ùù '
StaticCourseVersionStatus
ùù .
.
ùù. /
Removed
ùù/ 6
:
ùù6 7
{
ûû 
return
üü 
new
üü 
ResponseDTO
üü *
(
üü* +
)
üü+ ,
{
†† 
Message
°° 
=
°°  !
$str
°°" D
,
°°D E

StatusCode
¢¢ "
=
¢¢# $
$num
¢¢% (
,
¢¢( )
	IsSuccess
££ !
=
££" #
false
££$ )
,
££) *
Result
§§ 
=
§§  
null
§§! %
}
•• 
;
•• 
}
¶¶ 
default
ßß 
:
ßß 
{
®® 
courseVersion
©© !
.
©©! "
CurrentStatus
©©" /
=
©©0 1'
StaticCourseVersionStatus
©©2 K
.
©©K L
Rejected
©©L T
;
©©T U
break
™™ 
;
™™ 
}
´´ 
}
¨¨ 
_unitOfWork
ÆÆ 
.
ÆÆ %
CourseVersionRepository
ÆÆ /
.
ÆÆ/ 0
Update
ÆÆ0 6
(
ÆÆ6 7
courseVersion
ÆÆ7 D
)
ÆÆD E
;
ÆÆE F
var
∞∞ 
responseDto
∞∞ 
=
∞∞ 
await
∞∞ #)
_courseVersionStatusService
∞∞$ ?
.
∞∞? @'
CreateCourseVersionStatus
∞∞@ Y
(
±± 
User
≤≤ 
,
≤≤ 
new
≥≥ *
CreateCourseVersionStatusDTO
≥≥ 0
(
≥≥0 1
)
≥≥1 2
{
¥¥ 
CourseVersionId
µµ #
=
µµ$ %
courseVersion
µµ& 3
.
µµ3 4
Id
µµ4 6
,
µµ6 7
Status
∂∂ 
=
∂∂ '
StaticCourseVersionStatus
∂∂ 6
.
∂∂6 7
Rejected
∂∂7 ?
}
∑∑ 
)
∏∏ 
;
∏∏ 
if
∫∫ 
(
∫∫ 
responseDto
∫∫ 
.
∫∫ 

StatusCode
∫∫ &
==
∫∫' )
$num
∫∫* -
)
∫∫- .
{
ªª 
return
ºº 
responseDto
ºº "
;
ºº" #
}
ΩΩ 
BackgroundJob
øø 
.
øø 
Enqueue
øø !
<
øø! "
IEmailSender
øø" .
>
øø. /
(
øø/ 0
job
øø0 3
=>
øø4 6
job
øø7 :
.
øø: ;2
$SendRejectedCourseEmailForInstructor
øø; _
(
øø_ `
courseVersionId
øø` o
)
øøo p
)
øøp q
;
øøq r
return
¡¡ 
new
¡¡ 
ResponseDTO
¡¡ "
(
¡¡" #
)
¡¡# $
{
¬¬ 
Result
√√ 
=
√√ 
null
√√ 
,
√√ 
	IsSuccess
ƒƒ 
=
ƒƒ 
true
ƒƒ  
,
ƒƒ  !
Message
≈≈ 
=
≈≈ 
$str
≈≈ >
,
≈≈> ?

StatusCode
∆∆ 
=
∆∆ 
$num
∆∆  
}
«« 
;
«« 
}
»» 	
catch
…… 
(
…… 
	Exception
…… 
e
…… 
)
…… 
{
   	
return
ÀÀ 
new
ÀÀ 
ResponseDTO
ÀÀ "
(
ÀÀ" #
)
ÀÀ# $
{
ÃÃ 
Result
ÕÕ 
=
ÕÕ 
null
ÕÕ 
,
ÕÕ 
	IsSuccess
ŒŒ 
=
ŒŒ 
false
ŒŒ !
,
ŒŒ! "
Message
œœ 
=
œœ 
e
œœ 
.
œœ 
Message
œœ #
,
œœ# $

StatusCode
–– 
=
–– 
$num
––  
}
—— 
;
—— 
}
““ 	
}
”” 
public
’’ 

async
’’ 
Task
’’ 
<
’’ 
ResponseDTO
’’ !
>
’’! "!
SubmitCourseVersion
’’# 6
(
÷÷ 
ClaimsPrincipal
◊◊ 
User
◊◊ 
,
◊◊ 
Guid
ÿÿ 
courseVersionId
ÿÿ 
)
ŸŸ 
{
⁄⁄ 
try
€€ 
{
‹‹ 	
var
›› 
courseVersion
›› 
=
›› 
await
››  %
_unitOfWork
››& 1
.
››1 2%
CourseVersionRepository
››2 I
.
››I J
GetAsync
››J R
(
››R S
x
››S T
=>
››U W
x
››X Y
.
››Y Z
Id
››Z \
==
››] _
courseVersionId
››` o
)
››o p
;
››p q
if
ﬂﬂ 
(
ﬂﬂ 
courseVersion
ﬂﬂ 
is
ﬂﬂ  
null
ﬂﬂ! %
)
ﬂﬂ% &
{
‡‡ 
return
·· 
new
·· 
ResponseDTO
·· &
(
··& '
)
··' (
{
‚‚ 
Result
„„ 
=
„„ 
null
„„ !
,
„„! "
	IsSuccess
‰‰ 
=
‰‰ 
false
‰‰  %
,
‰‰% &
Message
ÂÂ 
=
ÂÂ 
$str
ÂÂ <
,
ÂÂ< =

StatusCode
ÊÊ 
=
ÊÊ  
$num
ÊÊ! $
}
ÁÁ 
;
ÁÁ 
}
ËË 
switch
ÍÍ 
(
ÍÍ 
courseVersion
ÍÍ !
.
ÍÍ! "
CurrentStatus
ÍÍ" /
)
ÍÍ/ 0
{
ÎÎ 
case
ÏÏ '
StaticCourseVersionStatus
ÏÏ .
.
ÏÏ. /
	Submitted
ÏÏ/ 8
:
ÏÏ8 9
{
ÌÌ 
return
ÓÓ 
new
ÓÓ 
ResponseDTO
ÓÓ *
(
ÓÓ* +
)
ÓÓ+ ,
{
ÔÔ 
Message
 
=
  !
$str
" F
,
F G

StatusCode
ÒÒ "
=
ÒÒ# $
$num
ÒÒ% (
,
ÒÒ( )
	IsSuccess
ÚÚ !
=
ÚÚ" #
false
ÚÚ$ )
,
ÚÚ) *
Result
ÛÛ 
=
ÛÛ  
null
ÛÛ! %
}
ÙÙ 
;
ÙÙ 
}
ıı 
case
ˆˆ '
StaticCourseVersionStatus
ˆˆ .
.
ˆˆ. /
Accepted
ˆˆ/ 7
:
ˆˆ7 8
{
˜˜ 
return
¯¯ 
new
¯¯ 
ResponseDTO
¯¯ *
(
¯¯* +
)
¯¯+ ,
{
˘˘ 
Message
˙˙ 
=
˙˙  !
$str
˙˙" E
,
˙˙E F

StatusCode
˚˚ "
=
˚˚# $
$num
˚˚% (
,
˚˚( )
	IsSuccess
¸¸ !
=
¸¸" #
false
¸¸$ )
,
¸¸) *
Result
˝˝ 
=
˝˝  
null
˝˝! %
}
˛˛ 
;
˛˛ 
}
ˇˇ 
case
ÄÄ '
StaticCourseVersionStatus
ÄÄ .
.
ÄÄ. /
Merged
ÄÄ/ 5
:
ÄÄ5 6
{
ÅÅ 
return
ÇÇ 
new
ÇÇ 
ResponseDTO
ÇÇ *
(
ÇÇ* +
)
ÇÇ+ ,
{
ÉÉ 
Message
ÑÑ 
=
ÑÑ  !
$str
ÑÑ" C
,
ÑÑC D

StatusCode
ÖÖ "
=
ÖÖ# $
$num
ÖÖ% (
,
ÖÖ( )
	IsSuccess
ÜÜ !
=
ÜÜ" #
false
ÜÜ$ )
,
ÜÜ) *
Result
áá 
=
áá  
null
áá! %
}
àà 
;
àà 
}
ââ 
case
ää '
StaticCourseVersionStatus
ää .
.
ää. /
Removed
ää/ 6
:
ää6 7
{
ãã 
return
åå 
new
åå 
ResponseDTO
åå *
(
åå* +
)
åå+ ,
{
çç 
Message
éé 
=
éé  !
$str
éé" D
,
ééD E

StatusCode
èè "
=
èè# $
$num
èè% (
,
èè( )
	IsSuccess
êê !
=
êê" #
false
êê$ )
,
êê) *
Result
ëë 
=
ëë  
null
ëë! %
}
íí 
;
íí 
}
ìì 
default
îî 
:
îî 
{
ïï 
courseVersion
ññ !
.
ññ! "
CurrentStatus
ññ" /
=
ññ0 1'
StaticCourseVersionStatus
ññ2 K
.
ññK L
	Submitted
ññL U
;
ññU V
break
óó 
;
óó 
}
òò 
}
ôô 
_unitOfWork
õõ 
.
õõ %
CourseVersionRepository
õõ /
.
õõ/ 0
Update
õõ0 6
(
õõ6 7
courseVersion
õõ7 D
)
õõD E
;
õõE F
var
ùù 
responseDto
ùù 
=
ùù 
await
ùù #)
_courseVersionStatusService
ùù$ ?
.
ùù? @'
CreateCourseVersionStatus
ùù@ Y
(
ûû 
User
üü 
,
üü 
new
†† *
CreateCourseVersionStatusDTO
†† 0
(
††0 1
)
††1 2
{
°° 
CourseVersionId
¢¢ #
=
¢¢$ %
courseVersion
¢¢& 3
.
¢¢3 4
Id
¢¢4 6
,
¢¢6 7
Status
££ 
=
££ '
StaticCourseVersionStatus
££ 6
.
££6 7
	Submitted
££7 @
}
§§ 
)
•• 
;
•• 
if
ßß 
(
ßß 
responseDto
ßß 
.
ßß 

StatusCode
ßß &
==
ßß' )
$num
ßß* -
)
ßß- .
{
®® 
return
©© 
responseDto
©© "
;
©©" #
}
™™ 
BackgroundJob
¨¨ 
.
¨¨ 
Enqueue
¨¨ !
<
¨¨! "
IEmailSender
¨¨" .
>
¨¨. /
(
¨¨/ 0
job
¨¨0 3
=>
¨¨4 6
job
¨¨7 :
.
¨¨: ;/
!SendSubmittedCourseEmailForAdmins
¨¨; \
(
¨¨\ ]
)
¨¨] ^
)
¨¨^ _
;
¨¨_ `
return
ÆÆ 
new
ÆÆ 
ResponseDTO
ÆÆ "
(
ÆÆ" #
)
ÆÆ# $
{
ØØ 
Result
∞∞ 
=
∞∞ 
null
∞∞ 
,
∞∞ 
	IsSuccess
±± 
=
±± 
true
±±  
,
±±  !
Message
≤≤ 
=
≤≤ 
$str
≤≤ >
,
≤≤> ?

StatusCode
≥≥ 
=
≥≥ 
$num
≥≥  
}
¥¥ 
;
¥¥ 
}
µµ 	
catch
∂∂ 
(
∂∂ 
	Exception
∂∂ 
e
∂∂ 
)
∂∂ 
{
∑∑ 	
return
∏∏ 
new
∏∏ 
ResponseDTO
∏∏ "
(
∏∏" #
)
∏∏# $
{
ππ 
Result
∫∫ 
=
∫∫ 
null
∫∫ 
,
∫∫ 
	IsSuccess
ªª 
=
ªª 
false
ªª !
,
ªª! "
Message
ºº 
=
ºº 
e
ºº 
.
ºº 
Message
ºº #
,
ºº# $

StatusCode
ΩΩ 
=
ΩΩ 
$num
ΩΩ  
}
ææ 
;
ææ 
}
øø 	
}
¿¿ 
public
¬¬ 

async
¬¬ 
Task
¬¬ 
<
¬¬ 
ResponseDTO
¬¬ !
>
¬¬! " 
MergeCourseVersion
¬¬# 5
(
√√ 
ClaimsPrincipal
ƒƒ 
User
ƒƒ 
,
ƒƒ 
Guid
≈≈ 
courseVersionId
≈≈ 
)
∆∆ 
{
«« 
try
»» 
{
…… 	
var
   
courseVersion
   
=
   
await
    %
_unitOfWork
  & 1
.
  1 2%
CourseVersionRepository
  2 I
.
  I J
GetAsync
  J R
(
  R S
x
  S T
=>
  U W
x
  X Y
.
  Y Z
Id
  Z \
==
  ] _
courseVersionId
  ` o
)
  o p
;
  p q
if
ÀÀ 
(
ÀÀ 
courseVersion
ÀÀ 
is
ÀÀ  
null
ÀÀ! %
)
ÀÀ% &
{
ÃÃ 
return
ÕÕ 
new
ÕÕ 
ResponseDTO
ÕÕ &
(
ÕÕ& '
)
ÕÕ' (
{
ŒŒ 
Result
œœ 
=
œœ 
null
œœ !
,
œœ! "
	IsSuccess
–– 
=
–– 
false
––  %
,
––% &
Message
—— 
=
—— 
$str
—— <
,
——< =

StatusCode
““ 
=
““  
$num
““! $
}
”” 
;
”” 
}
‘‘ 
switch
÷÷ 
(
÷÷ 
courseVersion
÷÷ !
.
÷÷! "
CurrentStatus
÷÷" /
)
÷÷/ 0
{
◊◊ 
case
ÿÿ '
StaticCourseVersionStatus
ÿÿ .
.
ÿÿ. /
New
ÿÿ/ 2
:
ÿÿ2 3
{
ŸŸ 
return
⁄⁄ 
new
⁄⁄ 
ResponseDTO
⁄⁄ *
(
⁄⁄* +
)
⁄⁄+ ,
{
€€ 
Message
‹‹ 
=
‹‹  !
$str
‹‹" G
,
‹‹G H

StatusCode
›› "
=
››# $
$num
››% (
,
››( )
	IsSuccess
ﬁﬁ !
=
ﬁﬁ" #
false
ﬁﬁ$ )
,
ﬁﬁ) *
Result
ﬂﬂ 
=
ﬂﬂ  
null
ﬂﬂ! %
}
‡‡ 
;
‡‡ 
}
·· 
case
‚‚ '
StaticCourseVersionStatus
‚‚ .
.
‚‚. /
Rejected
‚‚/ 7
:
‚‚7 8
{
„„ 
return
‰‰ 
new
‰‰ 
ResponseDTO
‰‰ *
(
‰‰* +
)
‰‰+ ,
{
ÂÂ 
Message
ÊÊ 
=
ÊÊ  !
$str
ÊÊ" E
,
ÊÊE F

StatusCode
ÁÁ "
=
ÁÁ# $
$num
ÁÁ% (
,
ÁÁ( )
	IsSuccess
ËË !
=
ËË" #
false
ËË$ )
,
ËË) *
Result
ÈÈ 
=
ÈÈ  
null
ÈÈ! %
}
ÍÍ 
;
ÍÍ 
}
ÎÎ 
case
ÏÏ '
StaticCourseVersionStatus
ÏÏ .
.
ÏÏ. /
	Submitted
ÏÏ/ 8
:
ÏÏ8 9
{
ÌÌ 
return
ÓÓ 
new
ÓÓ 
ResponseDTO
ÓÓ *
(
ÓÓ* +
)
ÓÓ+ ,
{
ÔÔ 
Message
 
=
  !
$str
" F
,
F G

StatusCode
ÒÒ "
=
ÒÒ# $
$num
ÒÒ% (
,
ÒÒ( )
	IsSuccess
ÚÚ !
=
ÚÚ" #
false
ÚÚ$ )
,
ÚÚ) *
Result
ÛÛ 
=
ÛÛ  
null
ÛÛ! %
}
ÙÙ 
;
ÙÙ 
}
ıı 
case
ˆˆ '
StaticCourseVersionStatus
ˆˆ .
.
ˆˆ. /
Merged
ˆˆ/ 5
:
ˆˆ5 6
{
˜˜ 
return
¯¯ 
new
¯¯ 
ResponseDTO
¯¯ *
(
¯¯* +
)
¯¯+ ,
{
˘˘ 
Message
˙˙ 
=
˙˙  !
$str
˙˙" C
,
˙˙C D

StatusCode
˚˚ "
=
˚˚# $
$num
˚˚% (
,
˚˚( )
	IsSuccess
¸¸ !
=
¸¸" #
false
¸¸$ )
,
¸¸) *
Result
˝˝ 
=
˝˝  
null
˝˝! %
}
˛˛ 
;
˛˛ 
}
ˇˇ 
case
ÄÄ '
StaticCourseVersionStatus
ÄÄ .
.
ÄÄ. /
Removed
ÄÄ/ 6
:
ÄÄ6 7
{
ÅÅ 
return
ÇÇ 
new
ÇÇ 
ResponseDTO
ÇÇ *
(
ÇÇ* +
)
ÇÇ+ ,
{
ÉÉ 
Message
ÑÑ 
=
ÑÑ  !
$str
ÑÑ" D
,
ÑÑD E

StatusCode
ÖÖ "
=
ÖÖ# $
$num
ÖÖ% (
,
ÖÖ( )
	IsSuccess
ÜÜ !
=
ÜÜ" #
false
ÜÜ$ )
,
ÜÜ) *
Result
áá 
=
áá  
null
áá! %
}
àà 
;
àà 
}
ââ 
default
ää 
:
ää 
{
ãã 
courseVersion
åå !
.
åå! "
CurrentStatus
åå" /
=
åå0 1'
StaticCourseVersionStatus
åå2 K
.
ååK L
Merged
ååL R
;
ååR S
break
çç 
;
çç 
}
éé 
}
èè 
var
ëë 
course
ëë 
=
ëë 
await
ëë 
_unitOfWork
ëë *
.
ëë* +
CourseRepository
ëë+ ;
.
ëë; <
GetAsync
ëë< D
(
ëëD E
x
ëëE F
=>
ëëG I
x
ëëJ K
.
ëëK L
Id
ëëL N
==
ëëO Q
courseVersion
ëëR _
.
ëë_ `
CourseId
ëë` h
)
ëëh i
;
ëëi j
if
ìì 
(
ìì 
course
ìì 
is
ìì 
null
ìì 
)
ìì 
{
îî 
return
ïï 
new
ïï 
ResponseDTO
ïï &
(
ïï& '
)
ïï' (
{
ññ 
Message
óó 
=
óó 
$str
óó 4
,
óó4 5

StatusCode
òò 
=
òò  
$num
òò! $
,
òò$ %
	IsSuccess
ôô 
=
ôô 
false
ôô  %
,
ôô% &
Result
öö 
=
öö 
null
öö !
}
õõ 
;
õõ 
}
úú 
course
ûû 
.
ûû 
CourseVersionId
ûû "
=
ûû# $
courseVersion
ûû% 2
.
ûû2 3
Id
ûû3 5
;
ûû5 6
_unitOfWork
†† 
.
†† %
CourseVersionRepository
†† /
.
††/ 0
Update
††0 6
(
††6 7
courseVersion
††7 D
)
††D E
;
††E F
_unitOfWork
°° 
.
°° 
CourseRepository
°° (
.
°°( )
Update
°°) /
(
°°/ 0
course
°°0 6
)
°°6 7
;
°°7 8
await
¢¢ 
_unitOfWork
¢¢ 
.
¢¢ 
	SaveAsync
¢¢ '
(
¢¢' (
)
¢¢( )
;
¢¢) *
var
§§ 
responseDto
§§ 
=
§§ 
await
§§ #)
_courseVersionStatusService
§§$ ?
.
§§? @'
CreateCourseVersionStatus
§§@ Y
(
•• 
User
¶¶ 
,
¶¶ 
new
ßß *
CreateCourseVersionStatusDTO
ßß 0
(
ßß0 1
)
ßß1 2
{
®® 
CourseVersionId
©© #
=
©©$ %
courseVersion
©©& 3
.
©©3 4
Id
©©4 6
,
©©6 7
Status
™™ 
=
™™ '
StaticCourseVersionStatus
™™ 6
.
™™6 7
Merged
™™7 =
,
™™= >
}
´´ 
)
¨¨ 
;
¨¨ 
if
ÆÆ 
(
ÆÆ 
responseDto
ÆÆ 
.
ÆÆ 

StatusCode
ÆÆ &
==
ÆÆ' )
$num
ÆÆ* -
)
ÆÆ- .
{
ØØ 
return
∞∞ 
responseDto
∞∞ "
;
∞∞" #
}
±± 
return
≥≥ 
new
≥≥ 
ResponseDTO
≥≥ "
(
≥≥" #
)
≥≥# $
{
¥¥ 
Result
µµ 
=
µµ 
null
µµ 
,
µµ 
	IsSuccess
∂∂ 
=
∂∂ 
true
∂∂  
,
∂∂  !
Message
∑∑ 
=
∑∑ 
$str
∑∑ >
,
∑∑> ?

StatusCode
∏∏ 
=
∏∏ 
$num
∏∏  
}
ππ 
;
ππ 
}
∫∫ 	
catch
ªª 
(
ªª 
	Exception
ªª 
e
ªª 
)
ªª 
{
ºº 	
return
ΩΩ 
new
ΩΩ 
ResponseDTO
ΩΩ "
(
ΩΩ" #
)
ΩΩ# $
{
ææ 
Result
øø 
=
øø 
null
øø 
,
øø 
	IsSuccess
¿¿ 
=
¿¿ 
false
¿¿ !
,
¿¿! "
Message
¡¡ 
=
¡¡ 
e
¡¡ 
.
¡¡ 
Message
¡¡ #
,
¡¡# $

StatusCode
¬¬ 
=
¬¬ 
$num
¬¬  
}
√√ 
;
√√ 
}
ƒƒ 	
}
≈≈ 
public
«« 

async
«« 
Task
«« 
<
«« 
ResponseDTO
«« !
>
««! "'
GetCourseVersionsComments
««# <
(
»» 
ClaimsPrincipal
…… 
User
…… 
,
…… 
Guid
   
?
   
courseVersionId
   
,
   
string
ÀÀ 
?
ÀÀ 
filterOn
ÀÀ 
,
ÀÀ 
string
ÃÃ 
?
ÃÃ 
filterQuery
ÃÃ 
,
ÃÃ 
string
ÕÕ 
?
ÕÕ 
sortBy
ÕÕ 
,
ÕÕ 
int
ŒŒ 

pageNumber
ŒŒ 
,
ŒŒ 
int
œœ 
pageSize
œœ 
)
–– 
{
—— 
try
““ 
{
”” 	
var
’’ 
userRole
’’ 
=
’’ 
User
’’ 
.
’’  
Claims
’’  &
.
’’& '
FirstOrDefault
’’' 5
(
’’5 6
x
’’6 7
=>
’’8 :
x
’’; <
.
’’< =
Type
’’= A
==
’’B D

ClaimTypes
’’E O
.
’’O P
Role
’’P T
)
’’T U
?
’’U V
.
’’V W
Value
’’W \
;
’’\ ]
IEnumerable
◊◊ 
<
◊◊ "
CourseVersionComment
◊◊ ,
>
◊◊, -
comments
◊◊. 6
;
◊◊6 7
if
ŸŸ 
(
ŸŸ 
userRole
ŸŸ 
==
ŸŸ 
StaticUserRoles
ŸŸ +
.
ŸŸ+ ,
Admin
ŸŸ, 1
)
ŸŸ1 2
{
⁄⁄ 
comments
‹‹ 
=
‹‹ 
await
‹‹  
_unitOfWork
‹‹! ,
.
‹‹, -,
CourseVersionCommentRepository
‹‹- K
.
‹‹K L
GetAllAsync
‹‹L W
(
‹‹W X
x
‹‹X Y
=>
‹‹Z \
x
›› 
.
›› 
CourseVersionId
›› %
==
››& (
courseVersionId
››) 8
)
››8 9
;
››9 :
}
ﬁﬁ 
else
ﬂﬂ 
{
‡‡ 
comments
‚‚ 
=
‚‚ 
await
‚‚  
_unitOfWork
‚‚! ,
.
‚‚, -,
CourseVersionCommentRepository
‚‚- K
.
‚‚K L
GetAllAsync
‚‚L W
(
‚‚W X
x
‚‚X Y
=>
‚‚Z \
x
„„ 
.
„„ 
CourseVersionId
„„ %
==
„„& (
courseVersionId
„„) 8
&&
„„9 ;
x
„„< =
.
„„= >
Status
„„> D
<=
„„E G
StaticStatus
„„H T
.
„„T U
Category
„„U ]
.
„„] ^
	Activated
„„^ g
)
„„g h
;
„„h i
}
‰‰ 
if
ÁÁ 
(
ÁÁ 
!
ÁÁ 
comments
ÁÁ 
.
ÁÁ 
Any
ÁÁ 
(
ÁÁ 
)
ÁÁ 
)
ÁÁ  
{
ËË 
return
ÈÈ 
new
ÈÈ 
ResponseDTO
ÈÈ &
(
ÈÈ& '
)
ÈÈ' (
{
ÍÍ 
Message
ÎÎ 
=
ÎÎ 
$str
ÎÎ 5
,
ÎÎ5 6
	IsSuccess
ÏÏ 
=
ÏÏ 
true
ÏÏ  $
,
ÏÏ$ %

StatusCode
ÌÌ 
=
ÌÌ  
$num
ÌÌ! $
,
ÌÌ$ %
Result
ÓÓ 
=
ÓÓ 
null
ÓÓ !
}
ÔÔ 
;
ÔÔ 
}
 
var
ÚÚ 
listComments
ÚÚ 
=
ÚÚ 
comments
ÚÚ '
.
ÚÚ' (
ToList
ÚÚ( .
(
ÚÚ. /
)
ÚÚ/ 0
;
ÚÚ0 1
if
ıı 
(
ıı 
!
ıı 
string
ıı 
.
ıı 
IsNullOrEmpty
ıı %
(
ıı% &
filterOn
ıı& .
)
ıı. /
&&
ıı0 2
!
ıı3 4
string
ıı4 :
.
ıı: ;
IsNullOrEmpty
ıı; H
(
ııH I
filterQuery
ııI T
)
ııT U
)
ııU V
{
ˆˆ 
switch
˜˜ 
(
˜˜ 
filterOn
˜˜  
.
˜˜  !
Trim
˜˜! %
(
˜˜% &
)
˜˜& '
.
˜˜' (
ToLower
˜˜( /
(
˜˜/ 0
)
˜˜0 1
)
˜˜1 2
{
¯¯ 
case
˘˘ 
$str
˘˘ "
:
˘˘" #
listComments
˙˙ $
=
˙˙% &
listComments
˙˙' 3
.
˙˙3 4
Where
˙˙4 9
(
˙˙9 :
x
˙˙: ;
=>
˙˙< >
x
˚˚ 
.
˚˚ 
Comment
˚˚ %
.
˚˚% &
Contains
˚˚& .
(
˚˚. /
filterQuery
˚˚/ :
,
˚˚: ;
StringComparison
˚˚< L
.
˚˚L M&
CurrentCultureIgnoreCase
˚˚M e
)
˚˚e f
)
˚˚f g
.
˚˚g h
ToList
˚˚h n
(
˚˚n o
)
˚˚o p
;
˚˚p q
break
¸¸ 
;
¸¸ 
case
˝˝ 
$str
˝˝ #
:
˝˝# $
listComments
˛˛ $
=
˛˛% &
listComments
˛˛' 3
.
˛˛3 4
Where
˛˛4 9
(
˛˛9 :
x
˛˛: ;
=>
˛˛< >
x
ˇˇ 
.
ˇˇ 
	CreatedBy
ˇˇ '
.
ˇˇ' (
Contains
ˇˇ( 0
(
ˇˇ0 1
filterQuery
ˇˇ1 <
,
ˇˇ< =
StringComparison
ˇˇ> N
.
ˇˇN O&
CurrentCultureIgnoreCase
ˇˇO g
)
ˇˇg h
)
ˇˇh i
.
ˇˇi j
ToList
ˇˇj p
(
ˇˇp q
)
ˇˇq r
;
ˇˇr s
break
Ä	Ä	 
;
Ä	Ä	 
case
Å	Å	 
$str
Å	Å	 #
:
Å	Å	# $
listComments
Ç	Ç	 $
=
Ç	Ç	% &
listComments
Ç	Ç	' 3
.
Ç	Ç	3 4
Where
Ç	Ç	4 9
(
Ç	Ç	9 :
x
Ç	Ç	: ;
=>
Ç	Ç	< >
x
É	É	 
.
É	É	 
	UpdatedBy
É	É	 '
.
É	É	' (
Contains
É	É	( 0
(
É	É	0 1
filterQuery
É	É	1 <
,
É	É	< =
StringComparison
É	É	> N
.
É	É	N O&
CurrentCultureIgnoreCase
É	É	O g
)
É	É	g h
)
É	É	h i
.
É	É	i j
ToList
É	É	j p
(
É	É	p q
)
É	É	q r
;
É	É	r s
break
Ñ	Ñ	 
;
Ñ	Ñ	 
case
Ö	Ö	 
$str
Ö	Ö	 %
:
Ö	Ö	% &
listComments
Ü	Ü	 $
=
Ü	Ü	% &
listComments
Ü	Ü	' 3
.
Ü	Ü	3 4
Where
Ü	Ü	4 9
(
Ü	Ü	9 :
x
Ü	Ü	: ;
=>
Ü	Ü	< >
x
á	á	  !
.
á	á	! "
CreatedTime
á	á	" -
.
á	á	- .
HasValue
á	á	. 6
&&
á	á	7 9
x
á	á	: ;
.
á	á	; <
CreatedTime
á	á	< G
.
á	á	G H
Value
á	á	H M
.
á	á	M N
Date
á	á	N R
==
á	á	S U
DateTime
á	á	V ^
.
á	á	^ _
Parse
á	á	_ d
(
á	á	d e
filterQuery
á	á	e p
)
á	á	p q
.
á	á	q r
Date
á	á	r v
)
á	á	v w
.
à	à	 
ToList
à	à	 #
(
à	à	# $
)
à	à	$ %
;
à	à	% &
break
â	â	 
;
â	â	 
case
ä	ä	 
$str
ä	ä	 %
:
ä	ä	% &
listComments
ã	ã	 $
=
ã	ã	% &
listComments
ã	ã	' 3
.
ã	ã	3 4
Where
ã	ã	4 9
(
ã	ã	9 :
x
ã	ã	: ;
=>
ã	ã	< >
x
å	å	  !
.
å	å	! "
UpdatedTime
å	å	" -
.
å	å	- .
HasValue
å	å	. 6
&&
å	å	7 9
x
å	å	: ;
.
å	å	; <
UpdatedTime
å	å	< G
.
å	å	G H
Value
å	å	H M
.
å	å	M N
Date
å	å	N R
==
å	å	S U
DateTime
å	å	V ^
.
å	å	^ _
Parse
å	å	_ d
(
å	å	d e
filterQuery
å	å	e p
)
å	å	p q
.
å	å	q r
Date
å	å	r v
)
å	å	v w
.
ç	ç	 
ToList
ç	ç	 #
(
ç	ç	# $
)
ç	ç	$ %
;
ç	ç	% &
break
é	é	 
;
é	é	 
case
è	è	 
$str
è	è	 !
:
è	è	! "
if
ê	ê	 
(
ê	ê	 
int
ê	ê	 
.
ê	ê	  
TryParse
ê	ê	  (
(
ê	ê	( )
filterQuery
ê	ê	) 4
,
ê	ê	4 5
out
ê	ê	6 9
var
ê	ê	: =
status
ê	ê	> D
)
ê	ê	D E
)
ê	ê	E F
{
ë	ë	 
listComments
í	í	 (
=
í	í	) *
listComments
í	í	+ 7
.
í	í	7 8
Where
í	í	8 =
(
í	í	= >
x
í	í	> ?
=>
í	í	@ B
x
í	í	C D
.
í	í	D E
Status
í	í	E K
==
í	í	L N
status
í	í	O U
)
í	í	U V
.
í	í	V W
ToList
í	í	W ]
(
í	í	] ^
)
í	í	^ _
;
í	í	_ `
}
ì	ì	 
break
ï	ï	 
;
ï	ï	 
default
ñ	ñ	 
:
ñ	ñ	 
break
ó	ó	 
;
ó	ó	 
}
ò	ò	 
}
ô	ô	 
if
ú	ú	 
(
ú	ú	 
!
ú	ú	 
string
ú	ú	 
.
ú	ú	 
IsNullOrEmpty
ú	ú	 %
(
ú	ú	% &
sortBy
ú	ú	& ,
)
ú	ú	, -
)
ú	ú	- .
{
ù	ù	 
switch
û	û	 
(
û	û	 
sortBy
û	û	 
.
û	û	 
Trim
û	û	 #
(
û	û	# $
)
û	û	$ %
.
û	û	% &
ToLower
û	û	& -
(
û	û	- .
)
û	û	. /
)
û	û	/ 0
{
ü	ü	 
case
†	†	 
$str
†	†	 "
:
†	†	" #
listComments
°	°	 $
=
°	°	% &
listComments
°	°	' 3
.
°	°	3 4
OrderBy
°	°	4 ;
(
°	°	; <
x
°	°	< =
=>
°	°	> @
x
°	°	A B
.
°	°	B C
Comment
°	°	C J
)
°	°	J K
.
°	°	K L
ToList
°	°	L R
(
°	°	R S
)
°	°	S T
;
°	°	T U
break
¢	¢	 
;
¢	¢	 
case
£	£	 
$str
£	£	 #
:
£	£	# $
listComments
§	§	 $
=
§	§	% &
listComments
§	§	' 3
.
§	§	3 4
OrderBy
§	§	4 ;
(
§	§	; <
x
§	§	< =
=>
§	§	> @
x
§	§	A B
.
§	§	B C
	CreatedBy
§	§	C L
)
§	§	L M
.
§	§	M N
ToList
§	§	N T
(
§	§	T U
)
§	§	U V
;
§	§	V W
break
•	•	 
;
•	•	 
case
¶	¶	 
$str
¶	¶	 #
:
¶	¶	# $
listComments
ß	ß	 $
=
ß	ß	% &
listComments
ß	ß	' 3
.
ß	ß	3 4
OrderBy
ß	ß	4 ;
(
ß	ß	; <
x
ß	ß	< =
=>
ß	ß	> @
x
ß	ß	A B
.
ß	ß	B C
	UpdatedBy
ß	ß	C L
)
ß	ß	L M
.
ß	ß	M N
ToList
ß	ß	N T
(
ß	ß	T U
)
ß	ß	U V
;
ß	ß	V W
break
®	®	 
;
®	®	 
case
©	©	 
$str
©	©	 %
:
©	©	% &
listComments
™	™	 $
=
™	™	% &
listComments
™	™	' 3
.
™	™	3 4
OrderBy
™	™	4 ;
(
™	™	; <
x
™	™	< =
=>
™	™	> @
x
™	™	A B
.
™	™	B C
CreatedTime
™	™	C N
)
™	™	N O
.
™	™	O P
ToList
™	™	P V
(
™	™	V W
)
™	™	W X
;
™	™	X Y
break
´	´	 
;
´	´	 
case
¨	¨	 
$str
¨	¨	 %
:
¨	¨	% &
listComments
≠	≠	 $
=
≠	≠	% &
listComments
≠	≠	' 3
.
≠	≠	3 4
OrderBy
≠	≠	4 ;
(
≠	≠	; <
x
≠	≠	< =
=>
≠	≠	> @
x
≠	≠	A B
.
≠	≠	B C
UpdatedTime
≠	≠	C N
)
≠	≠	N O
.
≠	≠	O P
ToList
≠	≠	P V
(
≠	≠	V W
)
≠	≠	W X
;
≠	≠	X Y
break
Æ	Æ	 
;
Æ	Æ	 
case
Ø	Ø	 
$str
Ø	Ø	 !
:
Ø	Ø	! "
listComments
∞	∞	 $
=
∞	∞	% &
listComments
∞	∞	' 3
.
∞	∞	3 4
OrderBy
∞	∞	4 ;
(
∞	∞	; <
x
∞	∞	< =
=>
∞	∞	> @
x
∞	∞	A B
.
∞	∞	B C
Status
∞	∞	C I
)
∞	∞	I J
.
∞	∞	J K
ToList
∞	∞	K Q
(
∞	∞	Q R
)
∞	∞	R S
;
∞	∞	S T
break
±	±	 
;
±	±	 
default
≤	≤	 
:
≤	≤	 
break
≥	≥	 
;
≥	≥	 
}
¥	¥	 
}
µ	µ	 
else
∂	∂	 
{
∑	∑	 
listComments
π	π	 
=
π	π	 
listComments
π	π	 +
.
π	π	+ ,
OrderByDescending
π	π	, =
(
π	π	= >
x
π	π	> ?
=>
π	π	@ B
x
π	π	C D
.
π	π	D E
CreatedTime
π	π	E P
)
π	π	P Q
.
π	π	Q R
ToList
π	π	R X
(
π	π	X Y
)
π	π	Y Z
;
π	π	Z [
}
∫	∫	 
if
Ω	Ω	 
(
Ω	Ω	 

pageNumber
Ω	Ω	 
>
Ω	Ω	 
$num
Ω	Ω	 
&&
Ω	Ω	 !
pageSize
Ω	Ω	" *
>
Ω	Ω	+ ,
$num
Ω	Ω	- .
)
Ω	Ω	. /
{
æ	æ	 
var
ø	ø	 

skipResult
ø	ø	 
=
ø	ø	  
(
ø	ø	! "

pageNumber
ø	ø	" ,
-
ø	ø	- .
$num
ø	ø	/ 0
)
ø	ø	0 1
*
ø	ø	2 3
pageSize
ø	ø	4 <
;
ø	ø	< =
listComments
¿	¿	 
=
¿	¿	 
listComments
¿	¿	 +
.
¿	¿	+ ,
Skip
¿	¿	, 0
(
¿	¿	0 1

skipResult
¿	¿	1 ;
)
¿	¿	; <
.
¿	¿	< =
Take
¿	¿	= A
(
¿	¿	A B
pageSize
¿	¿	B J
)
¿	¿	J K
.
¿	¿	K L
ToList
¿	¿	L R
(
¿	¿	R S
)
¿	¿	S T
;
¿	¿	T U
}
¡	¡	 
var
ƒ	ƒ	 
commentsDto
ƒ	ƒ	 
=
ƒ	ƒ	 
listComments
ƒ	ƒ	 *
.
ƒ	ƒ	* +
Select
ƒ	ƒ	+ 1
(
ƒ	ƒ	1 2
comment
ƒ	ƒ	2 9
=>
ƒ	ƒ	: <
new
ƒ	ƒ	= @
GetAllCommentsDTO
ƒ	ƒ	A R
{
≈	≈	 
Id
∆	∆	 
=
∆	∆	 
comment
∆	∆	 
.
∆	∆	 
Id
∆	∆	 
,
∆	∆	  
Comment
«	«	 
=
«	«	 
comment
«	«	 !
.
«	«	! "
Comment
«	«	" )
,
«	«	) *

CreateTime
»	»	 
=
»	»	 
comment
»	»	 $
.
»	»	$ %
CreatedTime
»	»	% 0
,
»	»	0 1
CreateBy
…	…	 
=
…	…	 
comment
…	…	 "
.
…	…	" #
	CreatedBy
…	…	# ,
,
…	…	, -

UpdateTime
 	 	 
=
 	 	 
comment
 	 	 $
.
 	 	$ %
UpdatedTime
 	 	% 0
,
 	 	0 1
UpdateBy
À	À	 
=
À	À	 
comment
À	À	 "
.
À	À	" #
	UpdatedBy
À	À	# ,
,
À	À	, -
Status
Ã	Ã	 
=
Ã	Ã	 
comment
Ã	Ã	  
.
Ã	Ã	  !
Status
Ã	Ã	! '
}
Õ	Õ	 
)
Õ	Õ	 
.
Õ	Õ	 
ToList
Õ	Õ	 
(
Õ	Õ	 
)
Õ	Õ	 
;
Õ	Õ	 
return
œ	œ	 
new
œ	œ	 
ResponseDTO
œ	œ	 "
(
œ	œ	" #
)
œ	œ	# $
{
–	–	 
Message
—	—	 
=
—	—	 
$str
—	—	 D
,
—	—	D E
	IsSuccess
“	“	 
=
“	“	 
true
“	“	  
,
“	“	  !

StatusCode
”	”	 
=
”	”	 
$num
”	”	  
,
”	”	  !
Result
‘	‘	 
=
‘	‘	 
commentsDto
‘	‘	 $
}
’	’	 
;
’	’	 
}
÷	÷	 	
catch
◊	◊	 
(
◊	◊	 
	Exception
◊	◊	 
e
◊	◊	 
)
◊	◊	 
{
ÿ	ÿ	 	
return
Ÿ	Ÿ	 
new
Ÿ	Ÿ	 
ResponseDTO
Ÿ	Ÿ	 "
(
Ÿ	Ÿ	" #
)
Ÿ	Ÿ	# $
{
⁄	⁄	 
Message
€	€	 
=
€	€	 
e
€	€	 
.
€	€	 
Message
€	€	 #
,
€	€	# $
Result
‹	‹	 
=
‹	‹	 
null
‹	‹	 
,
‹	‹	 
	IsSuccess
›	›	 
=
›	›	 
false
›	›	 !
,
›	›	! "

StatusCode
ﬁ	ﬁ	 
=
ﬁ	ﬁ	 
$num
ﬁ	ﬁ	  
}
ﬂ	ﬂ	 
;
ﬂ	ﬂ	 
}
‡	‡	 	
}
·	·	 
public
Â	Â	 

async
Â	Â	 
Task
Â	Â	 
<
Â	Â	 
ResponseDTO
Â	Â	 !
>
Â	Â	! "%
GetCourseVersionComment
Â	Â	# :
(
Â	Â	: ;
ClaimsPrincipal
Â	Â	; J
User
Â	Â	K O
,
Â	Â	O P
Guid
Â	Â	Q U$
courseVersionCommentId
Â	Â	V l
)
Â	Â	l m
{
Ê	Ê	 
try
Á	Á	 
{
Ë	Ë	 	
var
È	È	 "
courseVersionComment
È	È	 $
=
È	È	% &
await
Í	Í	 
_unitOfWork
Í	Í	 !
.
Í	Í	! ",
CourseVersionCommentRepository
Í	Í	" @
.
Í	Í	@ A)
GetCourseVersionCommentById
Í	Í	A \
(
Í	Í	\ ]$
courseVersionCommentId
Í	Í	] s
)
Í	Í	s t
;
Í	Í	t u
if
Ï	Ï	 
(
Ï	Ï	 "
courseVersionComment
Ï	Ï	 $
is
Ï	Ï	% '
null
Ï	Ï	( ,
)
Ï	Ï	, -
{
Ì	Ì	 
return
Ó	Ó	 
new
Ó	Ó	 
ResponseDTO
Ó	Ó	 &
(
Ó	Ó	& '
)
Ó	Ó	' (
{
Ô	Ô	 
Result
		 
=
		 
$str
		 
,
		  
Message
Ò	Ò	 
=
Ò	Ò	 
$str
Ò	Ò	 <
,
Ò	Ò	< =
	IsSuccess
Ú	Ú	 
=
Ú	Ú	 
true
Ú	Ú	  $
,
Ú	Ú	$ %

StatusCode
Û	Û	 
=
Û	Û	  
$num
Û	Û	! $
}
Ù	Ù	 
;
Ù	Ù	 
}
ı	ı	 
var
˜	˜	 %
courseVersionCommentDto
˜	˜	 '
=
˜	˜	( )
_mapper
˜	˜	* 1
.
˜	˜	1 2
Map
˜	˜	2 5
<
˜	˜	5 6!
GetCourseCommnetDTO
˜	˜	6 I
>
˜	˜	I J
(
˜	˜	J K"
courseVersionComment
˜	˜	K _
)
˜	˜	_ `
;
˜	˜	` a
return
˘	˘	 
new
˘	˘	 
ResponseDTO
˘	˘	 "
(
˘	˘	" #
)
˘	˘	# $
{
˙	˙	 
Result
˚	˚	 
=
˚	˚	 %
courseVersionCommentDto
˚	˚	 0
,
˚	˚	0 1
Message
¸	¸	 
=
¸	¸	 
$str
¸	¸	 ;
,
¸	¸	; <
	IsSuccess
˝	˝	 
=
˝	˝	 
true
˝	˝	  
,
˝	˝	  !

StatusCode
˛	˛	 
=
˛	˛	 
$num
˛	˛	  
}
ˇ	ˇ	 
;
ˇ	ˇ	 
}
Ä
Ä
 	
catch
Å
Å
 
(
Å
Å
 
	Exception
Å
Å
 
e
Å
Å
 
)
Å
Å
 
{
Ç
Ç
 	
return
É
É
 
new
É
É
 
ResponseDTO
É
É
 "
(
É
É
" #
)
É
É
# $
{
Ñ
Ñ
 
Result
Ö
Ö
 
=
Ö
Ö
 
null
Ö
Ö
 
,
Ö
Ö
 
Message
Ü
Ü
 
=
Ü
Ü
 
e
Ü
Ü
 
.
Ü
Ü
 
Message
Ü
Ü
 #
,
Ü
Ü
# $
	IsSuccess
á
á
 
=
á
á
 
true
á
á
  
,
á
á
  !

StatusCode
à
à
 
=
à
à
 
$num
à
à
  
}
â
â
 
;
â
â
 
}
ä
ä
 	
}
ã
ã
 
public
é
é
 

async
é
é
 
Task
é
é
 
<
é
é
 
ResponseDTO
é
é
 !
>
é
é
! "(
CreateCourseVersionComment
é
é
# =
(
é
é
= >
ClaimsPrincipal
é
é
> M
User
é
é
N R
,
é
é
R S,
CreateCourseVersionCommentsDTO
è
è
 &,
createCourseVersionCommentsDTO
è
è
' E
)
è
è
E F
{
ê
ê
 
try
ë
ë
 
{
í
í
 	
var
î
î
 
courseVersionId
î
î
 
=
î
î
  !
await
ï
ï
 
_unitOfWork
ï
ï
 !
.
ï
ï
! "%
CourseVersionRepository
ï
ï
" 9
.
ï
ï
9 :
GetAsync
ï
ï
: B
(
ï
ï
B C
c
ï
ï
C D
=>
ï
ï
E G
c
ñ
ñ
 
.
ñ
ñ
 
Id
ñ
ñ
 
==
ñ
ñ
 ,
createCourseVersionCommentsDTO
ñ
ñ
 :
.
ñ
ñ
: ;
CourseVersionId
ñ
ñ
; J
)
ñ
ñ
J K
;
ñ
ñ
K L
if
ó
ó
 
(
ó
ó
 
courseVersionId
ó
ó
 
==
ó
ó
  "
null
ó
ó
# '
)
ó
ó
' (
{
ò
ò
 
return
ô
ô
 
new
ô
ô
 
ResponseDTO
ô
ô
 &
(
ô
ô
& '
)
ô
ô
' (
{
ö
ö
 
Message
õ
õ
 
=
õ
õ
 
$str
õ
õ
 7
,
õ
õ
7 8
Result
ú
ú
 
=
ú
ú
 
null
ú
ú
 !
,
ú
ú
! "
	IsSuccess
ù
ù
 
=
ù
ù
 
false
ù
ù
  %
,
ù
ù
% &

StatusCode
û
û
 
=
û
û
  
$num
û
û
! $
}
ü
ü
 
;
ü
ü
 
}
†
†
 
var
¢
¢
 
userId
¢
¢
 
=
¢
¢
 
User
¢
¢
 
.
¢
¢
 
Claims
¢
¢
 $
.
¢
¢
$ %
FirstOrDefault
¢
¢
% 3
(
¢
¢
3 4
x
¢
¢
4 5
=>
¢
¢
6 8
x
¢
¢
9 :
.
¢
¢
: ;
Type
¢
¢
; ?
==
¢
¢
@ B

ClaimTypes
¢
¢
C M
.
¢
¢
M N
NameIdentifier
¢
¢
N \
)
¢
¢
\ ]
?
¢
¢
] ^
.
¢
¢
^ _
Value
¢
¢
_ d
;
¢
¢
d e
var
£
£
 
admin
£
£
 
=
£
£
 
await
£
£
 
_unitOfWork
£
£
 )
.
£
£
) *#
UserManagerRepository
£
£
* ?
.
£
£
? @
FindByIdAsync
£
£
@ M
(
£
£
M N
userId
£
£
N T
)
£
£
T U
;
£
£
U V"
CourseVersionComment
¶
¶
  
comment
¶
¶
! (
=
¶
¶
) *
new
¶
¶
+ ."
CourseVersionComment
¶
¶
/ C
(
¶
¶
C D
)
¶
¶
D E
{
ß
ß
 
Comment
®
®
 
=
®
®
 ,
createCourseVersionCommentsDTO
®
®
 8
.
®
®
8 9
Comment
®
®
9 @
,
®
®
@ A
CourseVersionId
©
©
 
=
©
©
  !,
createCourseVersionCommentsDTO
©
©
" @
.
©
©
@ A
CourseVersionId
©
©
A P
,
©
©
P Q
	CreatedBy
™
™
 
=
™
™
 
admin
™
™
 !
.
™
™
! "
Email
™
™
" '
,
™
™
' (
CreatedTime
´
´
 
=
´
´
 
DateTime
´
´
 &
.
´
´
& '
Now
´
´
' *
,
´
´
* +
UpdatedTime
¨
¨
 
=
¨
¨
 
null
¨
¨
 "
,
¨
¨
" #
	UpdatedBy
≠
≠
 
=
≠
≠
 
$str
≠
≠
 
,
≠
≠
 
Status
Æ
Æ
 
=
Æ
Æ
 
$num
Æ
Æ
 
}
Ø
Ø
 
;
Ø
Ø
 
await
≤
≤
 
_unitOfWork
≤
≤
 
.
≤
≤
 ,
CourseVersionCommentRepository
≤
≤
 <
.
≤
≤
< =
AddAsync
≤
≤
= E
(
≤
≤
E F
comment
≤
≤
F M
)
≤
≤
M N
;
≤
≤
N O
await
≥
≥
 
_unitOfWork
≥
≥
 
.
≥
≥
 
	SaveAsync
≥
≥
 '
(
≥
≥
' (
)
≥
≥
( )
;
≥
≥
) *
return
µ
µ
 
new
µ
µ
 
ResponseDTO
µ
µ
 "
(
µ
µ
" #
)
µ
µ
# $
{
∂
∂
 
Message
∑
∑
 
=
∑
∑
 
$str
∑
∑
 8
,
∑
∑
8 9
Result
∏
∏
 
=
∏
∏
 
comment
∏
∏
  
,
∏
∏
  !
	IsSuccess
π
π
 
=
π
π
 
true
π
π
  
,
π
π
  !

StatusCode
∫
∫
 
=
∫
∫
 
$num
∫
∫
  
,
∫
∫
  !
}
ª
ª
 
;
ª
ª
 
}
º
º
 	
catch
Ω
Ω
 
(
Ω
Ω
 
	Exception
Ω
Ω
 
e
Ω
Ω
 
)
Ω
Ω
 
{
æ
æ
 	
return
ø
ø
 
new
ø
ø
 
ResponseDTO
ø
ø
 "
{
¿
¿
 
Message
¡
¡
 
=
¡
¡
 
e
¡
¡
 
.
¡
¡
 
Message
¡
¡
 #
,
¡
¡
# $
Result
¬
¬
 
=
¬
¬
 
null
¬
¬
 
,
¬
¬
 
	IsSuccess
√
√
 
=
√
√
 
false
√
√
 !
,
√
√
! "

StatusCode
ƒ
ƒ
 
=
ƒ
ƒ
 
$num
ƒ
ƒ
  
}
≈
≈
 
;
≈
≈
 
}
∆
∆
 	
}
«
«
 
public
 
 
 

async
 
 
 
Task
 
 
 
<
 
 
 
ResponseDTO
 
 
 !
>
 
 
! "&
EditCourseVersionComment
 
 
# ;
(
 
 
; <
ClaimsPrincipal
 
 
< K
User
 
 
L P
,
 
 
P Q*
EditCourseVersionCommentsDTO
À
À
 $*
editCourseVersionCommentsDTO
À
À
% A
)
À
À
A B
{
Ã
Ã
 
try
Õ
Õ
 
{
Œ
Œ
 	
var
–
–
 
courseVersionId
–
–
 
=
–
–
  !
await
—
—
 
_unitOfWork
—
—
 !
.
—
—
! ",
CourseVersionCommentRepository
—
—
" @
.
—
—
@ A
GetAsync
—
—
A I
(
—
—
I J
c
—
—
J K
=>
—
—
L N
c
“
“
 
.
“
“
 
Id
“
“
 
==
“
“
 *
editCourseVersionCommentsDTO
“
“
 8
.
“
“
8 9
Id
“
“
9 ;
)
“
“
; <
;
“
“
< =
if
”
”
 
(
”
”
 
courseVersionId
”
”
 
==
”
”
  "
null
”
”
# '
)
”
”
' (
{
‘
‘
 
return
’
’
 
new
’
’
 
ResponseDTO
’
’
 &
(
’
’
& '
)
’
’
' (
{
÷
÷
 
Message
◊
◊
 
=
◊
◊
 
$str
◊
◊
 7
,
◊
◊
7 8
Result
ÿ
ÿ
 
=
ÿ
ÿ
 
null
ÿ
ÿ
 !
,
ÿ
ÿ
! "
	IsSuccess
Ÿ
Ÿ
 
=
Ÿ
Ÿ
 
false
Ÿ
Ÿ
  %
,
Ÿ
Ÿ
% &

StatusCode
⁄
⁄
 
=
⁄
⁄
  
$num
⁄
⁄
! $
}
€
€
 
;
€
€
 
}
‹
‹
 
var
ﬁ
ﬁ
 
userId
ﬁ
ﬁ
 
=
ﬁ
ﬁ
 
User
ﬁ
ﬁ
 
.
ﬁ
ﬁ
 
Claims
ﬁ
ﬁ
 $
.
ﬁ
ﬁ
$ %
FirstOrDefault
ﬁ
ﬁ
% 3
(
ﬁ
ﬁ
3 4
x
ﬁ
ﬁ
4 5
=>
ﬁ
ﬁ
6 8
x
ﬁ
ﬁ
9 :
.
ﬁ
ﬁ
: ;
Type
ﬁ
ﬁ
; ?
==
ﬁ
ﬁ
@ B

ClaimTypes
ﬁ
ﬁ
C M
.
ﬁ
ﬁ
M N
NameIdentifier
ﬁ
ﬁ
N \
)
ﬁ
ﬁ
\ ]
?
ﬁ
ﬁ
] ^
.
ﬁ
ﬁ
^ _
Value
ﬁ
ﬁ
_ d
;
ﬁ
ﬁ
d e
var
ﬂ
ﬂ
 
admin
ﬂ
ﬂ
 
=
ﬂ
ﬂ
 
await
ﬂ
ﬂ
 
_unitOfWork
ﬂ
ﬂ
 )
.
ﬂ
ﬂ
) *#
UserManagerRepository
ﬂ
ﬂ
* ?
.
ﬂ
ﬂ
? @
FindByIdAsync
ﬂ
ﬂ
@ M
(
ﬂ
ﬂ
M N
userId
ﬂ
ﬂ
N T
)
ﬂ
ﬂ
T U
;
ﬂ
ﬂ
U V
courseVersionId
‚
‚
 
.
‚
‚
 
UpdatedTime
‚
‚
 '
=
‚
‚
( )
DateTime
‚
‚
* 2
.
‚
‚
2 3
UtcNow
‚
‚
3 9
;
‚
‚
9 :
courseVersionId
„
„
 
.
„
„
 
	UpdatedBy
„
„
 %
=
„
„
& '
admin
„
„
( -
.
„
„
- .
Email
„
„
. 3
;
„
„
3 4
courseVersionId
‰
‰
 
.
‰
‰
 
Comment
‰
‰
 #
=
‰
‰
$ %*
editCourseVersionCommentsDTO
‰
‰
& B
.
‰
‰
B C
Comment
‰
‰
C J
;
‰
‰
J K
courseVersionId
Â
Â
 
.
Â
Â
 
Status
Â
Â
 "
=
Â
Â
# $
$num
Â
Â
% &
;
Â
Â
& '
_unitOfWork
Á
Á
 
.
Á
Á
 ,
CourseVersionCommentRepository
Á
Á
 6
.
Á
Á
6 7
Update
Á
Á
7 =
(
Á
Á
= >
courseVersionId
Á
Á
> M
)
Á
Á
M N
;
Á
Á
N O
await
Ë
Ë
 
_unitOfWork
Ë
Ë
 
.
Ë
Ë
 
	SaveAsync
Ë
Ë
 '
(
Ë
Ë
' (
)
Ë
Ë
( )
;
Ë
Ë
) *
return
Í
Í
 
new
Í
Í
 
ResponseDTO
Í
Í
 "
(
Í
Í
" #
)
Í
Í
# $
{
Î
Î
 
Message
Ï
Ï
 
=
Ï
Ï
 
$str
Ï
Ï
 7
,
Ï
Ï
7 8
Result
Ì
Ì
 
=
Ì
Ì
 
null
Ì
Ì
 
,
Ì
Ì
 
	IsSuccess
Ó
Ó
 
=
Ó
Ó
 
true
Ó
Ó
  
,
Ó
Ó
  !

StatusCode
Ô
Ô
 
=
Ô
Ô
 
$num
Ô
Ô
  
,
Ô
Ô
  !
}


 
;


 
}
Ò
Ò
 	
catch
Ú
Ú
 
(
Ú
Ú
 
	Exception
Ú
Ú
 
e
Ú
Ú
 
)
Ú
Ú
 
{
Û
Û
 	
return
Ù
Ù
 
new
Ù
Ù
 
ResponseDTO
Ù
Ù
 "
{
ı
ı
 
Message
ˆ
ˆ
 
=
ˆ
ˆ
 
e
ˆ
ˆ
 
.
ˆ
ˆ
 
Message
ˆ
ˆ
 #
,
ˆ
ˆ
# $
Result
˜
˜
 
=
˜
˜
 
null
˜
˜
 
,
˜
˜
 
	IsSuccess
¯
¯
 
=
¯
¯
 
false
¯
¯
 !
,
¯
¯
! "

StatusCode
˘
˘
 
=
˘
˘
 
$num
˘
˘
  
}
˙
˙
 
;
˙
˙
 
}
˚
˚
 	
}
¸
¸
 
public
ˇ
ˇ
 

async
ˇ
ˇ
 
Task
ˇ
ˇ
 
<
ˇ
ˇ
 
ResponseDTO
ˇ
ˇ
 !
>
ˇ
ˇ
! "(
RemoveCourseVersionComment
ˇ
ˇ
# =
(
ˇ
ˇ
= >
ClaimsPrincipal
ˇ
ˇ
> M
User
ˇ
ˇ
N R
,
ˇ
ˇ
R S
Guid
ÄÄ 
	commentId
ÄÄ 
)
ÄÄ 
{
ÅÅ 
try
ÇÇ 
{
ÉÉ 	
var
ÖÖ 
courseVersionId
ÖÖ 
=
ÖÖ  !
await
ÜÜ 
_unitOfWork
ÜÜ !
.
ÜÜ! ",
CourseVersionCommentRepository
ÜÜ" @
.
ÜÜ@ A
GetAsync
ÜÜA I
(
ÜÜI J
c
ÜÜJ K
=>
ÜÜL N
c
áá 
.
áá 
Id
áá 
==
áá 
	commentId
áá %
)
áá% &
;
áá& '
if
àà 
(
àà 
courseVersionId
àà 
==
àà  "
null
àà# '
)
àà' (
{
ââ 
return
ää 
new
ää 
ResponseDTO
ää &
(
ää& '
)
ää' (
{
ãã 
Message
åå 
=
åå 
$str
åå 7
,
åå7 8
Result
çç 
=
çç 
null
çç !
,
çç! "
	IsSuccess
éé 
=
éé 
false
éé  %
,
éé% &

StatusCode
èè 
=
èè  
$num
èè! $
}
êê 
;
êê 
}
ëë 
var
ìì 
userId
ìì 
=
ìì 
User
ìì 
.
ìì 
Claims
ìì $
.
ìì$ %
FirstOrDefault
ìì% 3
(
ìì3 4
x
ìì4 5
=>
ìì6 8
x
ìì9 :
.
ìì: ;
Type
ìì; ?
==
ìì@ B

ClaimTypes
ììC M
.
ììM N
NameIdentifier
ììN \
)
ìì\ ]
?
ìì] ^
.
ìì^ _
Value
ìì_ d
;
ììd e
var
îî 
admin
îî 
=
îî 
await
îî 
_unitOfWork
îî )
.
îî) *#
UserManagerRepository
îî* ?
.
îî? @
FindByIdAsync
îî@ M
(
îîM N
userId
îîN T
)
îîT U
;
îîU V
courseVersionId
ññ 
.
ññ 
UpdatedTime
ññ '
=
ññ( )
DateTime
ññ* 2
.
ññ2 3
UtcNow
ññ3 9
;
ññ9 :
courseVersionId
óó 
.
óó 
	UpdatedBy
óó %
=
óó& '
admin
óó( -
.
óó- .
Email
óó. 3
;
óó3 4
courseVersionId
òò 
.
òò 
Status
òò "
=
òò# $
$num
òò% &
;
òò& '
_unitOfWork
öö 
.
öö ,
CourseVersionCommentRepository
öö 6
.
öö6 7
Update
öö7 =
(
öö= >
courseVersionId
öö> M
)
ööM N
;
ööN O
await
õõ 
_unitOfWork
õõ 
.
õõ 
	SaveAsync
õõ '
(
õõ' (
)
õõ( )
;
õõ) *
return
ùù 
new
ùù 
ResponseDTO
ùù "
(
ùù" #
)
ùù# $
{
ûû 
Message
üü 
=
üü 
$str
üü 8
,
üü8 9
Result
†† 
=
†† 
null
†† 
,
†† 
	IsSuccess
°° 
=
°° 
true
°°  
,
°°  !

StatusCode
¢¢ 
=
¢¢ 
$num
¢¢  
,
¢¢  !
}
££ 
;
££ 
}
§§ 	
catch
•• 
(
•• 
	Exception
•• 
e
•• 
)
•• 
{
¶¶ 	
return
ßß 
new
ßß 
ResponseDTO
ßß "
{
®® 
Message
©© 
=
©© 
e
©© 
.
©© 
Message
©© #
,
©©# $
Result
™™ 
=
™™ 
null
™™ 
,
™™ 
	IsSuccess
´´ 
=
´´ 
false
´´ !
,
´´! "

StatusCode
¨¨ 
=
¨¨ 
$num
¨¨  
}
≠≠ 
;
≠≠ 
}
ÆÆ 	
}
ØØ 
public
±± 

async
±± 
Task
±± 
<
±± 
ResponseDTO
±± !
>
±±! ".
 UploadCourseVersionBackgroundImg
±±# C
(
≤≤ 
ClaimsPrincipal
≥≥ 
User
≥≥ 
,
≥≥ 
Guid
¥¥ 
courseVersionId
¥¥ 
,
¥¥ .
 UploadCourseVersionBackgroundImg
µµ (.
 uploadCourseVersionBackgroundImg
µµ) I
)
µµI J
{
∂∂ 
try
∑∑ 
{
∏∏ 	
if
∫∫ 
(
∫∫ .
 uploadCourseVersionBackgroundImg
∫∫ 0
.
∫∫0 1
File
∫∫1 5
==
∫∫6 8
null
∫∫9 =
)
∫∫= >
{
ªª 
return
ºº 
new
ºº 
ResponseDTO
ºº &
(
ºº& '
)
ºº' (
{
ΩΩ 
	IsSuccess
ææ 
=
ææ 
false
ææ  %
,
ææ% &

StatusCode
øø 
=
øø  
$num
øø! $
,
øø$ %
Message
¿¿ 
=
¿¿ 
$str
¿¿ 1
}
¡¡ 
;
¡¡ 
}
¬¬ 
var
ƒƒ 
courseVersion
ƒƒ 
=
ƒƒ 
await
≈≈ 
_unitOfWork
≈≈ !
.
≈≈! "%
CourseVersionRepository
≈≈" 9
.
≈≈9 :
GetAsync
≈≈: B
(
≈≈B C
x
≈≈C D
=>
≈≈E G
x
≈≈H I
.
≈≈I J
Id
≈≈J L
==
≈≈M O
courseVersionId
≈≈P _
)
≈≈_ `
;
≈≈` a
if
∆∆ 
(
∆∆ 
courseVersion
∆∆ 
==
∆∆  
null
∆∆! %
)
∆∆% &
{
«« 
return
»» 
new
»» 
ResponseDTO
»» &
(
»»& '
)
»»' (
{
…… 
	IsSuccess
   
=
   
false
    %
,
  % &

StatusCode
ÀÀ 
=
ÀÀ  
$num
ÀÀ! $
,
ÀÀ$ %
Message
ÃÃ 
=
ÃÃ 
$str
ÃÃ 9
}
ÕÕ 
;
ÕÕ 
}
ŒŒ 
var
–– 
filePath
–– 
=
–– 
$"
–– 
$str
–– $
{
––$ %
courseVersion
––% 2
.
––2 3
CourseId
––3 ;
}
––; <
$str
––< G
"
––G H
;
––H I
var
““ 
responseDto
““ 
=
““ 
await
““ #
_firebaseService
““$ 4
.
““4 5
UploadImage
““5 @
(
““@ A.
 uploadCourseVersionBackgroundImg
““A a
.
““a b
File
““b f
,
““f g
filePath
““h p
)
““p q
;
““q r
if
‘‘ 
(
‘‘ 
!
‘‘ 
responseDto
‘‘ 
.
‘‘ 
	IsSuccess
‘‘ &
)
‘‘& '
{
’’ 
return
÷÷ 
new
÷÷ 
ResponseDTO
÷÷ &
(
÷÷& '
)
÷÷' (
{
◊◊ 
	IsSuccess
ÿÿ 
=
ÿÿ 
false
ÿÿ  %
,
ÿÿ% &

StatusCode
ŸŸ 
=
ŸŸ  
$num
ŸŸ! $
,
ŸŸ$ %
Message
⁄⁄ 
=
⁄⁄ 
$str
⁄⁄ 3
}
€€ 
;
€€ 
}
‹‹ 
courseVersion
ﬂﬂ 
.
ﬂﬂ 
CourseImgUrl
ﬂﬂ &
=
ﬂﬂ' (
responseDto
ﬂﬂ) 4
.
ﬂﬂ4 5
Result
ﬂﬂ5 ;
?
ﬂﬂ; <
.
ﬂﬂ< =
ToString
ﬂﬂ= E
(
ﬂﬂE F
)
ﬂﬂF G
;
ﬂﬂG H
_unitOfWork
‡‡ 
.
‡‡ %
CourseVersionRepository
‡‡ /
.
‡‡/ 0
Update
‡‡0 6
(
‡‡6 7
courseVersion
‡‡7 D
)
‡‡D E
;
‡‡E F
await
·· 
_unitOfWork
·· 
.
·· 
	SaveAsync
·· '
(
··' (
)
··( )
;
··) *
return
„„ 
new
„„ 
ResponseDTO
„„ "
(
„„" #
)
„„# $
{
‰‰ 
	IsSuccess
ÂÂ 
=
ÂÂ 
true
ÂÂ  
,
ÂÂ  !

StatusCode
ÊÊ 
=
ÊÊ 
$num
ÊÊ  
,
ÊÊ  !
Result
ÁÁ 
=
ÁÁ 
responseDto
ÁÁ $
.
ÁÁ$ %
Result
ÁÁ% +
,
ÁÁ+ ,
Message
ËË 
=
ËË 
$str
ËË 4
}
ÈÈ 
;
ÈÈ 
}
ÍÍ 	
catch
ÎÎ 
(
ÎÎ 
	Exception
ÎÎ 
e
ÎÎ 
)
ÎÎ 
{
ÏÏ 	
return
ÌÌ 
new
ÌÌ 
ResponseDTO
ÌÌ "
(
ÌÌ" #
)
ÌÌ# $
{
ÓÓ 
	IsSuccess
ÔÔ 
=
ÔÔ 
false
ÔÔ !
,
ÔÔ! "

StatusCode
 
=
 
$num
  
,
  !
Result
ÒÒ 
=
ÒÒ 
null
ÒÒ 
,
ÒÒ 
Message
ÚÚ 
=
ÚÚ 
e
ÚÚ 
.
ÚÚ 
Message
ÚÚ #
}
ÛÛ 
;
ÛÛ 
}
ÙÙ 	
}
ıı 
public
˜˜ 

async
˜˜ 
Task
˜˜ 
<
˜˜ 
MemoryStream
˜˜ "
>
˜˜" #/
!DisplayCourseVersionBackgroundImg
˜˜$ E
(
˜˜E F
ClaimsPrincipal
˜˜F U
User
˜˜V Z
,
˜˜Z [
Guid
˜˜\ `
courseVersionId
˜˜a p
)
˜˜p q
{
¯¯ 
try
˘˘ 
{
˙˙ 	
var
˚˚ 
courseVersion
˚˚ 
=
˚˚ 
await
˚˚  %
_unitOfWork
˚˚& 1
.
˚˚1 2%
CourseVersionRepository
˚˚2 I
.
˚˚I J
GetAsync
˚˚J R
(
˚˚R S
x
˚˚S T
=>
˚˚U W
x
˚˚X Y
.
˚˚Y Z
Id
˚˚Z \
==
˚˚] _
courseVersionId
˚˚` o
)
˚˚o p
;
˚˚p q
if
˝˝ 
(
˝˝ 
courseVersion
˝˝ 
!=
˝˝  
null
˝˝! %
&&
˝˝& (
courseVersion
˝˝) 6
.
˝˝6 7
CourseImgUrl
˝˝7 C
.
˝˝C D
IsNullOrEmpty
˝˝D Q
(
˝˝Q R
)
˝˝R S
)
˝˝S T
{
˛˛ 
return
ˇˇ 
null
ˇˇ 
;
ˇˇ 
}
ÄÄ 
var
ÇÇ 
stream
ÇÇ 
=
ÇÇ 
await
ÇÇ 
_firebaseService
ÇÇ /
.
ÇÇ/ 0
GetImage
ÇÇ0 8
(
ÇÇ8 9
courseVersion
ÇÇ9 F
.
ÇÇF G
CourseImgUrl
ÇÇG S
)
ÇÇS T
;
ÇÇT U
return
ÉÉ 
stream
ÉÉ 
;
ÉÉ 
}
ÑÑ 	
catch
ÖÖ 
(
ÖÖ 
	Exception
ÖÖ 
e
ÖÖ 
)
ÖÖ 
{
ÜÜ 	
return
áá 
null
áá 
;
áá 
}
àà 	
}
ââ 
}ää Æü
fD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\CourseService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
CourseService 
: 
ICourseService +
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
IMapper 
_mapper $
;$ %
private 
readonly !
IStudentCourseService *!
_studentCourseService+ @
;@ A
private 
readonly "
ICourseProgressService +"
_courseProgressService, B
;B C
public 

CourseService 
( 
IUnitOfWork 

unitOfWork 
, 
IMapper 
mapper 
, !
IStudentCourseService  
studentCourseService 2
,2 3"
ICourseProgressService4 J!
courseProgressServiceK `
)` a
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; !
_studentCourseService 
=  
studentCourseService  4
;4 5"
_courseProgressService 
=  !
courseProgressService! 6
;6 7
} 
public!! 

async!! 
Task!! 
<!! 
ResponseDTO!! !
>!!! "
CreateFrameCourse!!# 4
(!!4 5
ClaimsPrincipal!!5 D
User!!E I
,!!I J
Guid!!K O
courseVersionId!!P _
)!!_ `
{"" 
try## 
{$$ 	
var&& 
userId&& 
=&& 
User&& 
.&& 
Claims&& $
.&&$ %
FirstOrDefault&&% 3
(&&3 4
x&&4 5
=>&&6 8
x&&9 :
.&&: ;
Type&&; ?
==&&@ B

ClaimTypes&&C M
.&&M N
NameIdentifier&&N \
)&&\ ]
?&&] ^
.&&^ _
Value&&_ d
;&&d e
var'' 

instructor'' 
='' 
await'' "
_unitOfWork''# .
.''. / 
InstructorRepository''/ C
.''C D
GetAsync''D L
((( 
filter)) 
:)) 
x)) 
=>)) 
x)) 
.)) 
UserId)) %
==))& (
userId))) /
,))/ 0
includeProperties** !
:**! "
$str**# 4
)++ 
;++ 
if-- 
(-- 

instructor-- 
is-- 
null-- "
)--" #
{.. 
return// 
new// 
ResponseDTO// &
(//& '
)//' (
{00 
Message11 
=11 
$str11 9
,119 :
	IsSuccess22 
=22 
false22  %
,22% &

StatusCode33 
=33  
$num33! $
,33$ %
Result44 
=44 
null44 !
}55 
;55 
}66 
if88 
(88 

instructor88 
.88 

IsAccepted88 %
==88& (
false88) .
)88. /
{99 
return:: 
new:: 
ResponseDTO:: &
(::& '
)::' (
{;; 
Message<< 
=<< 
$str<< I
,<<I J
	IsSuccess== 
=== 
true==  $
,==$ %

StatusCode>> 
=>>  
$num>>! $
,>>$ %
Result?? 
=?? 
null?? !
}@@ 
;@@ 
}AA 
varDD 
courseDD 
=DD 
newDD 
CourseDD #
(DD# $
)DD$ %
{EE 
IdFF 
=FF 
GuidFF 
.FF 
NewGuidFF !
(FF! "
)FF" #
,FF# $
CodeGG 
=GG 
nullGG 
,GG 
InstructorIdHH 
=HH 

instructorHH )
?HH) *
.HH* +
InstructorIdHH+ 7
,HH7 8
CourseVersionIdII 
=II  !
courseVersionIdII" 1
,II1 2
StatusJJ 
=JJ 
$numJJ 
,JJ 
VersionKK 
=KK 
$numKK 
,KK 
TotalStudentLL 
=LL 
$numLL  
,LL  !
	TotalRateMM 
=MM 
$numMM 
,MM 
ActivatedByNN 
=NN 
nullNN "
,NN" #
DeactivatedByOO 
=OO 
nullOO  $
,OO$ %
ActivatedTimePP 
=PP 
nullPP  $
,PP$ %
DeactivatedTimeQQ 
=QQ  !
nullQQ" &
,QQ& '

MergedTimeRR 
=RR 
nullRR !
,RR! "
MergedBySS 
=SS 
nullSS 
,SS  
	CreatedByTT 
=TT 

instructorTT &
?TT& '
.TT' (
ApplicationUserTT( 7
.TT7 8
EmailTT8 =
,TT= >
CreatedTimeUU 
=UU 
DateTimeUU &
.UU& '
UtcNowUU' -
}VV 
;VV 
awaitXX 
_unitOfWorkXX 
.XX 
CourseRepositoryXX .
.XX. /
AddAsyncXX/ 7
(XX7 8
courseXX8 >
)XX> ?
;XX? @
awaitYY 
_unitOfWorkYY 
.YY 
	SaveAsyncYY '
(YY' (
)YY( )
;YY) *
return[[ 
new[[ 
ResponseDTO[[ "
([[" #
)[[# $
{\\ 
Message]] 
=]] 
$str]] <
,]]< =
	IsSuccess^^ 
=^^ 
true^^  
,^^  !

StatusCode__ 
=__ 
$num__  
,__  !
Result`` 
=`` 
course`` 
}aa 
;aa 
}bb 	
catchcc 
(cc 
	Exceptioncc 
ecc 
)cc 
{dd 	
returnee 
newee 
ResponseDTOee "
(ee" #
)ee# $
{ff 
Messagegg 
=gg 
egg 
.gg 
Messagegg #
,gg# $

StatusCodehh 
=hh 
$numhh  
,hh  !
Resultii 
=ii 
nullii 
,ii 
	IsSuccessjj 
=jj 
truejj  
}kk 
;kk 
}ll 	
}mm 
publicoo 

asyncoo 
Taskoo 
<oo 
ResponseDTOoo !
>oo! "

GetCoursesoo# -
(pp 
ClaimsPrincipalqq 
Userqq 
,qq 
Guidrr 
?rr 
instructorIdrr 
,rr 
stringss 
?ss 
filterOnss 
,ss 
stringtt 
?tt 
filterQuerytt 
,tt 
doubleuu 
?uu 
	fromPriceuu 
,uu 
doublevv 
?vv 
toPricevv 
,vv 
stringww 
?ww 
sortByww 
,ww 
boolxx 
?xx 
isAscendingxx 
,xx 
intyy 

pageNumberyy 
=yy 
$numyy 
,yy 
intzz 
pageSizezz 
=zz 
$numzz 
){{ 
{|| 
try}} 
{~~ 	
var 
courses 
= 
new 
List "
<" #
Course# )
>) *
(* +
)+ ,
;, -
var
ÄÄ 
userRole
ÄÄ 
=
ÄÄ 
User
ÄÄ 
.
ÄÄ  
Claims
ÄÄ  &
.
ÄÄ& '
FirstOrDefault
ÄÄ' 5
(
ÄÄ5 6
x
ÄÄ6 7
=>
ÄÄ8 :
x
ÄÄ; <
.
ÄÄ< =
Type
ÄÄ= A
==
ÄÄB D

ClaimTypes
ÄÄE O
.
ÄÄO P
Role
ÄÄP T
)
ÄÄT U
?
ÄÄU V
.
ÄÄV W
Value
ÄÄW \
;
ÄÄ\ ]
if
ÅÅ 
(
ÅÅ 
string
ÅÅ 
.
ÅÅ 
IsNullOrEmpty
ÅÅ $
(
ÅÅ$ %
instructorId
ÅÅ% 1
.
ÅÅ1 2
ToString
ÅÅ2 :
(
ÅÅ: ;
)
ÅÅ; <
)
ÅÅ< =
)
ÅÅ= >
{
ÇÇ 
if
ÉÉ 
(
ÉÉ 
!
ÉÉ 
userRole
ÉÉ 
.
ÉÉ 
Contains
ÉÉ &
(
ÉÉ& '
StaticUserRoles
ÉÉ' 6
.
ÉÉ6 7
AdminInstructor
ÉÉ7 F
)
ÉÉF G
)
ÉÉG H
{
ÑÑ 
courses
ÖÖ 
=
ÖÖ 
_unitOfWork
ÖÖ )
.
ÖÖ) *
CourseRepository
ÖÖ* :
.
ÜÜ 
GetAllAsync
ÜÜ $
(
áá 
filter
àà "
:
àà" #
x
àà$ %
=>
àà& (
x
àà) *
.
àà* +
Status
àà+ 1
==
àà2 4
$num
àà5 6
)
ââ 
.
ää 

GetAwaiter
ää #
(
ää# $
)
ää$ %
.
ãã 
	GetResult
ãã "
(
ãã" #
)
ãã# $
.
åå 
ToList
åå 
(
åå  
)
åå  !
;
åå! "
}
çç 
else
éé 
{
èè 
courses
êê 
=
êê 
_unitOfWork
êê )
.
êê) *
CourseRepository
êê* :
.
ëë 
GetAllAsync
ëë $
(
ëë$ %
)
ëë% &
.
íí 

GetAwaiter
íí #
(
íí# $
)
íí$ %
.
ìì 
	GetResult
ìì "
(
ìì" #
)
ìì# $
.
îî 
ToList
îî 
(
îî  
)
îî  !
;
îî! "
}
ïï 
}
ññ 
else
óó 
{
òò 
courses
ôô 
=
ôô 
_unitOfWork
ôô %
.
ôô% &
CourseRepository
ôô& 6
.
öö 
GetAllAsync
öö  
(
õõ 
filter
úú 
:
úú 
x
úú  !
=>
úú" $
x
úú% &
.
úú& '
InstructorId
úú' 3
==
úú4 6
instructorId
úú7 C
)
ùù 
.
ûû 

GetAwaiter
ûû 
(
ûû  
)
ûû  !
.
üü 
	GetResult
üü 
(
üü 
)
üü  
.
†† 
ToList
†† 
(
†† 
)
†† 
;
†† 
}
°° 
var
££ 
courseVersions
££ 
=
££  
new
££! $
List
££% )
<
££) *
CourseVersion
££* 7
>
££7 8
(
££8 9
)
££9 :
;
££: ;
foreach
•• 
(
•• 
var
•• 
course
•• 
in
••  "
courses
••# *
)
••* +
{
¶¶ 
var
ßß 
courseVersion
ßß !
=
ßß" #
await
ßß$ )
_unitOfWork
ßß* 5
.
ßß5 6%
CourseVersionRepository
ßß6 M
.
®® 
GetAsync
®® 
(
®® 
filter
©© 
:
©© 
x
©©  !
=>
©©" $
x
©©% &
.
©©& '
Id
©©' )
==
©©* ,
course
©©- 3
.
©©3 4
CourseVersionId
©©4 C
,
©©C D
includeProperties
™™ )
:
™™) *
$str
™™+ ;
)
´´ 
;
´´ 
if
¨¨ 
(
¨¨ 
courseVersion
¨¨ !
is
¨¨" $
not
¨¨% (
null
¨¨) -
)
¨¨- .
{
≠≠ 
courseVersions
ÆÆ "
.
ÆÆ" #
Add
ÆÆ# &
(
ÆÆ& '
courseVersion
ÆÆ' 4
)
ÆÆ4 5
;
ÆÆ5 6
}
ØØ 
}
∞∞ 
if
¥¥ 
(
¥¥ 
!
¥¥ 
string
¥¥ 
.
¥¥ 
IsNullOrEmpty
¥¥ %
(
¥¥% &
filterOn
¥¥& .
)
¥¥. /
&&
¥¥0 2
!
¥¥3 4
string
¥¥4 :
.
¥¥: ;
IsNullOrEmpty
¥¥; H
(
¥¥H I
filterQuery
¥¥I T
)
¥¥T U
)
¥¥U V
{
µµ 
switch
∂∂ 
(
∂∂ 
filterOn
∂∂  
.
∂∂  !
Trim
∂∂! %
(
∂∂% &
)
∂∂& '
.
∂∂' (
ToLower
∂∂( /
(
∂∂/ 0
)
∂∂0 1
)
∂∂1 2
{
∑∑ 
case
∏∏ 
$str
∏∏  
:
∏∏  !
{
ππ 
courseVersions
∫∫ &
=
∫∫' (
courseVersions
∫∫) 7
.
∫∫7 8
Where
∫∫8 =
(
∫∫= >
x
∫∫> ?
=>
∫∫@ B
x
ªª 
.
ªª 
Title
ªª #
.
ªª# $
Contains
ªª$ ,
(
ªª, -
filterQuery
ªª- 8
,
ªª8 9
StringComparison
ªª: J
.
ªªJ K&
CurrentCultureIgnoreCase
ªªK c
)
ªªc d
)
ªªd e
.
ªªe f
ToList
ªªf l
(
ªªl m
)
ªªm n
;
ªªn o
break
ºº 
;
ºº 
}
ΩΩ 
case
ææ 
$str
ææ 
:
ææ  
{
øø 
courseVersions
¿¿ &
=
¿¿' (
courseVersions
¿¿) 7
.
¿¿7 8
Where
¿¿8 =
(
¿¿= >
x
¿¿> ?
=>
¿¿@ B
x
¡¡ 
.
¡¡ 
Code
¡¡ "
.
¡¡" #
Contains
¡¡# +
(
¡¡+ ,
filterQuery
¡¡, 7
,
¡¡7 8
StringComparison
¡¡9 I
.
¡¡I J&
CurrentCultureIgnoreCase
¡¡J b
)
¡¡b c
)
¡¡c d
.
¡¡d e
ToList
¡¡e k
(
¡¡k l
)
¡¡l m
;
¡¡m n
break
¬¬ 
;
¬¬ 
}
√√ 
case
ƒƒ 
$str
ƒƒ &
:
ƒƒ& '
{
≈≈ 
courseVersions
∆∆ &
=
∆∆' (
courseVersions
∆∆) 7
.
∆∆7 8
Where
∆∆8 =
(
∆∆= >
x
∆∆> ?
=>
∆∆@ B
x
«« 
.
«« 
Description
«« )
.
««) *
Contains
««* 2
(
««2 3
filterQuery
««3 >
,
««> ?
StringComparison
««@ P
.
««P Q&
CurrentCultureIgnoreCase
««Q i
)
««i j
)
««j k
.
««k l
ToList
««l r
(
««r s
)
««s t
;
««t u
break
»» 
;
»» 
}
…… 
case
   
$str
   #
:
  # $
{
ÀÀ 
courseVersions
ÃÃ &
=
ÃÃ' (
courseVersions
ÃÃ) 7
.
ÃÃ7 8
Where
ÃÃ8 =
(
ÃÃ= >
x
ÃÃ> ?
=>
ÃÃ@ B
x
ÕÕ 
.
ÕÕ 
Category
ÕÕ &
!=
ÕÕ' )
null
ÕÕ* .
&&
ÕÕ/ 1
x
ŒŒ 
.
ŒŒ 
Category
ŒŒ &
.
ŒŒ& '
Name
ŒŒ' +
.
ŒŒ+ ,
Contains
ŒŒ, 4
(
ŒŒ4 5
filterQuery
ŒŒ5 @
,
ŒŒ@ A
StringComparison
ŒŒB R
.
ŒŒR S&
CurrentCultureIgnoreCase
ŒŒS k
)
ŒŒk l
)
ŒŒl m
.
ŒŒm n
ToList
ŒŒn t
(
ŒŒt u
)
ŒŒu v
;
ŒŒv w
break
œœ 
;
œœ 
}
–– 
case
—— 
$str
—— %
:
——% &
{
““ 
courseVersions
”” &
=
””' (
courseVersions
””) 7
.
””7 8
Where
””8 =
(
””= >
x
””> ?
=>
””@ B
x
‘‘ 
.
‘‘ 
Course
‘‘ $
.
‘‘$ %

Instructor
‘‘% /
!=
‘‘0 2
null
‘‘3 7
&&
‘‘8 :
x
’’ 
.
’’ 
Course
’’ $
.
’’$ %

Instructor
’’% /
.
’’/ 0
ApplicationUser
’’0 ?
.
’’? @
FullName
’’@ H
.
’’H I
Contains
’’I Q
(
’’Q R
filterQuery
’’R ]
,
’’] ^
StringComparison
÷÷  0
.
÷÷0 1&
CurrentCultureIgnoreCase
÷÷1 I
)
÷÷I J
)
÷÷J K
.
÷÷K L
ToList
÷÷L R
(
÷÷R S
)
÷÷S T
;
÷÷T U
break
◊◊ 
;
◊◊ 
}
ÿÿ 
case
ŸŸ 
$str
ŸŸ !
:
ŸŸ! "
{
⁄⁄ 
courseVersions
€€ &
=
€€' (
courseVersions
€€) 7
.
€€7 8
Where
€€8 =
(
€€= >
x
€€> ?
=>
€€@ B
x
‹‹ 
.
‹‹ 
CurrentStatus
‹‹ +
==
‹‹, .
int
‹‹/ 2
.
‹‹2 3
Parse
‹‹3 8
(
‹‹8 9
filterQuery
‹‹9 D
.
‹‹D E
Trim
‹‹E I
(
‹‹I J
)
‹‹J K
)
‹‹K L
)
‹‹L M
.
‹‹M N
ToList
‹‹N T
(
‹‹T U
)
‹‹U V
;
‹‹V W
break
›› 
;
›› 
}
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
if
„„ 
(
„„ 
toPrice
„„ 
is
„„ 
not
„„ 
null
„„ #
&&
„„$ &
	fromPrice
„„' 0
is
„„1 3
not
„„4 7
null
„„8 <
)
„„< =
{
‰‰ 
if
ÂÂ 
(
ÂÂ 
toPrice
ÂÂ 
>=
ÂÂ 
$num
ÂÂ  
)
ÂÂ  !
{
ÊÊ 
courseVersions
ÁÁ "
=
ÁÁ# $
	fromPrice
ÁÁ% .
>=
ÁÁ/ 1
toPrice
ÁÁ2 9
?
ËË 
courseVersions
ËË (
.
ËË( )
Where
ËË) .
(
ËË. /
x
ËË/ 0
=>
ËË1 3
x
ËË4 5
.
ËË5 6
Price
ËË6 ;
>=
ËË< >
toPrice
ËË? F
&&
ËËG I
x
ËËJ K
.
ËËK L
Price
ËËL Q
<=
ËËR T
	fromPrice
ËËU ^
)
ËË^ _
.
ËË_ `
ToList
ËË` f
(
ËËf g
)
ËËg h
:
ÈÈ 
courseVersions
ÈÈ (
.
ÈÈ( )
Where
ÈÈ) .
(
ÈÈ. /
x
ÈÈ/ 0
=>
ÈÈ1 3
x
ÈÈ4 5
.
ÈÈ5 6
Price
ÈÈ6 ;
>=
ÈÈ< >
toPrice
ÈÈ? F
)
ÈÈF G
.
ÈÈG H
ToList
ÈÈH N
(
ÈÈN O
)
ÈÈO P
;
ÈÈP Q
}
ÍÍ 
}
ÎÎ 
if
ÓÓ 
(
ÓÓ 
!
ÓÓ 
string
ÓÓ 
.
ÓÓ 
IsNullOrEmpty
ÓÓ %
(
ÓÓ% &
sortBy
ÓÓ& ,
)
ÓÓ, -
)
ÓÓ- .
{
ÔÔ 
switch
 
(
 
sortBy
 
.
 
Trim
 #
(
# $
)
$ %
.
% &
ToLower
& -
(
- .
)
. /
)
/ 0
{
ÒÒ 
case
ÚÚ 
$str
ÚÚ  
:
ÚÚ  !
{
ÛÛ 
courseVersions
ÙÙ &
=
ÙÙ' (
isAscending
ÙÙ) 4
==
ÙÙ5 7
true
ÙÙ8 <
?
ıı 
[
ıı 
..
ıı !
courseVersions
ıı" 0
.
ıı0 1
OrderBy
ıı1 8
(
ıı8 9
x
ıı9 :
=>
ıı; =
x
ıı> ?
.
ıı? @
Title
ıı@ E
)
ııE F
]
ııF G
:
ˆˆ 
[
ˆˆ 
..
ˆˆ !
courseVersions
ˆˆ" 0
.
ˆˆ0 1
OrderByDescending
ˆˆ1 B
(
ˆˆB C
x
ˆˆC D
=>
ˆˆE G
x
ˆˆH I
.
ˆˆI J
Title
ˆˆJ O
)
ˆˆO P
]
ˆˆP Q
;
ˆˆQ R
break
˜˜ 
;
˜˜ 
}
¯¯ 
case
˘˘ 
$str
˘˘ 
:
˘˘  
{
˙˙ 
courseVersions
˚˚ &
=
˚˚' (
isAscending
˚˚) 4
==
˚˚5 7
true
˚˚8 <
?
¸¸ 
[
¸¸ 
..
¸¸ !
courseVersions
¸¸" 0
.
¸¸0 1
OrderBy
¸¸1 8
(
¸¸8 9
x
¸¸9 :
=>
¸¸; =
x
¸¸> ?
.
¸¸? @
Code
¸¸@ D
)
¸¸D E
]
¸¸E F
:
˝˝ 
[
˝˝ 
..
˝˝ !
courseVersions
˝˝" 0
.
˝˝0 1
OrderByDescending
˝˝1 B
(
˝˝B C
x
˝˝C D
=>
˝˝E G
x
˝˝H I
.
˝˝I J
Code
˝˝J N
)
˝˝N O
]
˝˝O P
;
˝˝P Q
break
˛˛ 
;
˛˛ 
}
ˇˇ 
case
ÄÄ 
$str
ÄÄ &
:
ÄÄ& '
{
ÅÅ 
courseVersions
ÇÇ &
=
ÇÇ' (
isAscending
ÇÇ) 4
==
ÇÇ5 7
true
ÇÇ8 <
?
ÉÉ 
[
ÉÉ 
..
ÉÉ !
courseVersions
ÉÉ" 0
.
ÉÉ0 1
OrderBy
ÉÉ1 8
(
ÉÉ8 9
x
ÉÉ9 :
=>
ÉÉ; =
x
ÉÉ> ?
.
ÉÉ? @
Description
ÉÉ@ K
)
ÉÉK L
]
ÉÉL M
:
ÑÑ 
[
ÑÑ 
..
ÑÑ !
courseVersions
ÑÑ" 0
.
ÑÑ0 1
OrderByDescending
ÑÑ1 B
(
ÑÑB C
x
ÑÑC D
=>
ÑÑE G
x
ÑÑH I
.
ÑÑI J
Description
ÑÑJ U
)
ÑÑU V
]
ÑÑV W
;
ÑÑW X
break
ÖÖ 
;
ÖÖ 
}
ÜÜ 
case
áá 
$str
áá  
:
áá  !
{
àà 
courseVersions
ââ &
=
ââ' (
isAscending
ââ) 4
==
ââ5 7
true
ââ8 <
?
ää 
[
ää 
..
ää !
courseVersions
ää" 0
.
ää0 1
OrderBy
ää1 8
(
ää8 9
x
ää9 :
=>
ää; =
x
ää> ?
.
ää? @
Price
ää@ E
)
ääE F
]
ääF G
:
ãã 
[
ãã 
..
ãã !
courseVersions
ãã" 0
.
ãã0 1
OrderByDescending
ãã1 B
(
ããB C
x
ããC D
=>
ããE G
x
ããH I
.
ããI J
Price
ããJ O
)
ããO P
]
ããP Q
;
ããQ R
break
åå 
;
åå 
}
çç 
default
éé 
:
éé 
{
èè 
break
êê 
;
êê 
}
ëë 
}
íí 
}
ìì 
courseVersions
ññ 
=
ññ 
courseVersions
ññ +
.
ññ+ ,
OrderByDescending
ññ, =
(
ññ= >
cv
ññ> @
=>
ññA C
cv
ññD F
.
ññF G
Course
ññG M
.
ññM N
TotalStudent
ññN Z
)
ññZ [
.
ññ[ \
ToList
ññ\ b
(
ññb c
)
ññc d
;
ññd e
if
ôô 
(
ôô 

pageNumber
ôô 
>
ôô 
$num
ôô 
&&
ôô !
pageSize
ôô" *
>
ôô+ ,
$num
ôô- .
)
ôô. /
{
öö 
var
õõ 

skipResult
õõ 
=
õõ  
(
õõ! "

pageNumber
õõ" ,
-
õõ- .
$num
õõ/ 0
)
õõ0 1
*
õõ2 3
pageSize
õõ4 <
;
õõ< =
courseVersions
úú 
=
úú  
courseVersions
úú! /
.
úú/ 0
Skip
úú0 4
(
úú4 5

skipResult
úú5 ?
)
úú? @
.
úú@ A
Take
úúA E
(
úúE F
pageSize
úúF N
)
úúN O
.
úúO P
ToList
úúP V
(
úúV W
)
úúW X
;
úúX Y
}
ùù 
var
üü 
courseVersionDto
üü  
=
üü! "
_mapper
üü# *
.
üü* +
Map
üü+ .
<
üü. /
List
üü/ 3
<
üü3 4!
GetCourseVersionDTO
üü4 G
>
üüG H
>
üüH I
(
üüI J
courseVersions
üüJ X
)
üüX Y
;
üüY Z
return
°° 
new
°° 
ResponseDTO
°° "
(
°°" #
)
°°# $
{
¢¢ 
Result
££ 
=
££ 
courseVersionDto
££ )
,
££) *
Message
§§ 
=
§§ 
$str
§§ 4
,
§§4 5
	IsSuccess
•• 
=
•• 
true
••  
,
••  !

StatusCode
¶¶ 
=
¶¶ 
$num
¶¶  
}
ßß 
;
ßß 
}
®® 	
catch
©© 
(
©© 
	Exception
©© 
e
©© 
)
©© 
{
™™ 	
return
´´ 
new
´´ 
ResponseDTO
´´ "
(
´´" #
)
´´# $
{
¨¨ 
Message
≠≠ 
=
≠≠ 
e
≠≠ 
.
≠≠ 
Message
≠≠ #
,
≠≠# $

StatusCode
ÆÆ 
=
ÆÆ 
$num
ÆÆ  
,
ÆÆ  !
Result
ØØ 
=
ØØ 
null
ØØ 
,
ØØ 
	IsSuccess
∞∞ 
=
∞∞ 
false
∞∞ !
}
±± 
;
±± 
}
≤≤ 	
}
≥≥ 
public
µµ 

async
µµ 
Task
µµ 
<
µµ 
ResponseDTO
µµ !
>
µµ! "$
GetTopPurchasedCourses
µµ# 9
(
µµ9 :
int
∂∂ 
?
∂∂ 	
year
∂∂
 
=
∂∂ 
null
∂∂ 
,
∂∂ 
int
∑∑ 
?
∑∑ 	
month
∑∑
 
=
∑∑ 
null
∑∑ 
,
∑∑ 
int
∏∏ 
?
∏∏ 	
quarter
∏∏
 
=
∏∏ 
null
∏∏ 
,
∏∏ 
int
ππ 
top
ππ	 
=
ππ 
$num
ππ 
,
ππ 
int
∫∫ 

pageNumber
∫∫	 
=
∫∫ 
$num
∫∫ 
,
∫∫ 
int
ªª 
pageSize
ªª	 
=
ªª 
$num
ªª 
,
ªª 
string
ºº 
?
ºº 
byCategoryName
ºº 
=
ºº 
null
ºº "
)
ΩΩ 
{
ææ 
try
øø 
{
¿¿ 	
var
¬¬ 
coursesQuery
¬¬ 
=
¬¬ 
_unitOfWork
¬¬ *
.
¬¬* +
CourseRepository
¬¬+ ;
.
¬¬; <
GetAllAsync
¬¬< G
(
¬¬G H
c
√√ 
=>
√√ 
c
√√ 
.
√√ 
Status
√√ 
==
√√  
$num
√√! "
)
ƒƒ 
;
ƒƒ 
var
∆∆ 
courses
∆∆ 
=
∆∆ 
(
∆∆ 
await
∆∆  
coursesQuery
∆∆! -
)
∆∆- .
.
∆∆. /
ToList
∆∆/ 5
(
∆∆5 6
)
∆∆6 7
;
∆∆7 8
if
…… 
(
…… 
year
…… 
.
…… 
HasValue
…… 
)
…… 
{
   
courses
ÀÀ 
=
ÀÀ 
courses
ÀÀ !
.
ÃÃ 
Where
ÃÃ 
(
ÃÃ 
c
ÃÃ 
=>
ÃÃ 
c
ÃÃ  !
.
ÃÃ! "
CreatedTime
ÃÃ" -
.
ÃÃ- .
HasValue
ÃÃ. 6
&&
ÃÃ7 9
c
ÃÃ: ;
.
ÃÃ; <
CreatedTime
ÃÃ< G
.
ÃÃG H
Value
ÃÃH M
.
ÃÃM N
Year
ÃÃN R
==
ÃÃS U
year
ÃÃV Z
.
ÃÃZ [
Value
ÃÃ[ `
)
ÃÃ` a
.
ÕÕ 
ToList
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
}
ŒŒ 
if
–– 
(
–– 
month
–– 
.
–– 
HasValue
–– 
)
–– 
{
—— 
courses
““ 
=
““ 
courses
““ !
.
”” 
Where
”” 
(
”” 
c
”” 
=>
”” 
c
””  !
.
””! "
CreatedTime
””" -
.
””- .
HasValue
””. 6
&&
””7 9
c
””: ;
.
””; <
CreatedTime
””< G
.
””G H
Value
””H M
.
””M N
Month
””N S
==
””T V
month
””W \
.
””\ ]
Value
””] b
)
””b c
.
‘‘ 
ToList
‘‘ 
(
‘‘ 
)
‘‘ 
;
‘‘ 
}
’’ 
if
◊◊ 
(
◊◊ 
quarter
◊◊ 
.
◊◊ 
HasValue
◊◊  
)
◊◊  !
{
ÿÿ 
int
ŸŸ 

startMonth
ŸŸ 
=
ŸŸ  
(
ŸŸ! "
quarter
ŸŸ" )
.
ŸŸ) *
Value
ŸŸ* /
-
ŸŸ0 1
$num
ŸŸ2 3
)
ŸŸ3 4
*
ŸŸ5 6
$num
ŸŸ7 8
+
ŸŸ9 :
$num
ŸŸ; <
;
ŸŸ< =
int
⁄⁄ 
endMonth
⁄⁄ 
=
⁄⁄ 

startMonth
⁄⁄ )
+
⁄⁄* +
$num
⁄⁄, -
;
⁄⁄- .
courses
€€ 
=
€€ 
courses
€€ !
.
‹‹ 
Where
‹‹ 
(
‹‹ 
c
‹‹ 
=>
‹‹ 
c
‹‹  !
.
‹‹! "
CreatedTime
‹‹" -
.
‹‹- .
HasValue
‹‹. 6
&&
‹‹7 9
c
››  !
.
››! "
CreatedTime
››" -
.
››- .
Value
››. 3
.
››3 4
Month
››4 9
>=
››: <

startMonth
››= G
&&
››H J
c
ﬁﬁ  !
.
ﬁﬁ! "
CreatedTime
ﬁﬁ" -
.
ﬁﬁ- .
Value
ﬁﬁ. 3
.
ﬁﬁ3 4
Month
ﬁﬁ4 9
<=
ﬁﬁ: <
endMonth
ﬁﬁ= E
)
ﬁﬁE F
.
ﬂﬂ 
ToList
ﬂﬂ 
(
ﬂﬂ 
)
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 
var
„„ 
courseVersionIds
„„  
=
„„! "
courses
„„# *
.
‰‰ 
Select
‰‰ 
(
‰‰ 
c
‰‰ 
=>
‰‰ 
c
‰‰ 
.
‰‰ 
CourseVersionId
‰‰ .
)
‰‰. /
.
ÂÂ 
Distinct
ÂÂ 
(
ÂÂ 
)
ÂÂ 
.
ÊÊ 
ToList
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
var
ÈÈ 
courseVersions
ÈÈ 
=
ÈÈ  
(
ÈÈ! "
await
ÈÈ" '
_unitOfWork
ÈÈ( 3
.
ÈÈ3 4%
CourseVersionRepository
ÈÈ4 K
.
ÈÈK L
GetAllAsync
ÈÈL W
(
ÈÈW X
cv
ÍÍ 
=>
ÍÍ 
courseVersionIds
ÍÍ &
.
ÍÍ& '
Contains
ÍÍ' /
(
ÍÍ/ 0
cv
ÍÍ0 2
.
ÍÍ2 3
Id
ÍÍ3 5
)
ÍÍ5 6
,
ÍÍ6 7
includeProperties
ÎÎ !
:
ÎÎ! "
$str
ÎÎ# -
)
ÏÏ 
)
ÏÏ 
.
ÏÏ 
ToList
ÏÏ 
(
ÏÏ 
)
ÏÏ 
;
ÏÏ 
if
ÔÔ 
(
ÔÔ 
!
ÔÔ 
string
ÔÔ 
.
ÔÔ 
IsNullOrEmpty
ÔÔ %
(
ÔÔ% &
byCategoryName
ÔÔ& 4
)
ÔÔ4 5
)
ÔÔ5 6
{
 
courseVersions
ÒÒ 
=
ÒÒ  
courseVersions
ÒÒ! /
.
ÚÚ 
Where
ÚÚ 
(
ÚÚ 
cv
ÚÚ 
=>
ÚÚ  
cv
ÚÚ! #
.
ÚÚ# $
Category
ÚÚ$ ,
!=
ÚÚ- /
null
ÚÚ0 4
&&
ÚÚ5 7
cv
ÛÛ! #
.
ÛÛ# $
Category
ÛÛ$ ,
.
ÛÛ, -
Name
ÛÛ- 1
.
ÛÛ1 2
Contains
ÛÛ2 :
(
ÛÛ: ;
byCategoryName
ÛÛ; I
,
ÛÛI J
StringComparison
ÛÛK [
.
ÛÛ[ \&
CurrentCultureIgnoreCase
ÛÛ\ t
)
ÛÛt u
)
ÛÛu v
.
ÙÙ 
ToList
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ 
}
ıı 
courses
¯¯ 
=
¯¯ 
courses
¯¯ 
.
˘˘ 
Where
˘˘ 
(
˘˘ 
c
˘˘ 
=>
˘˘ 
courseVersions
˘˘ *
.
˘˘* +
Any
˘˘+ .
(
˘˘. /
cv
˘˘/ 1
=>
˘˘2 4
cv
˘˘5 7
.
˘˘7 8
Id
˘˘8 :
==
˘˘; =
c
˘˘> ?
.
˘˘? @
CourseVersionId
˘˘@ O
)
˘˘O P
)
˘˘P Q
.
˙˙ 
ToList
˙˙ 
(
˙˙ 
)
˙˙ 
;
˙˙ 
courses
˝˝ 
=
˝˝ 
courses
˝˝ 
.
˝˝ 
OrderByDescending
˝˝ /
(
˝˝/ 0
c
˝˝0 1
=>
˝˝2 4
c
˝˝5 6
.
˝˝6 7
TotalStudent
˝˝7 C
)
˝˝C D
.
˝˝D E
ToList
˝˝E K
(
˝˝K L
)
˝˝L M
;
˝˝M N
int
ÄÄ 
skip
ÄÄ 
=
ÄÄ 
(
ÄÄ 

pageNumber
ÄÄ "
-
ÄÄ# $
$num
ÄÄ% &
)
ÄÄ& '
*
ÄÄ( )
pageSize
ÄÄ* 2
;
ÄÄ2 3
courses
ÅÅ 
=
ÅÅ 
courses
ÅÅ 
.
ÇÇ 
Skip
ÇÇ 
(
ÇÇ 
skip
ÇÇ 
)
ÇÇ 
.
ÉÉ 
Take
ÉÉ 
(
ÉÉ 
pageSize
ÉÉ 
>
ÉÉ  
top
ÉÉ! $
?
ÉÉ% &
top
ÉÉ' *
:
ÉÉ+ ,
pageSize
ÉÉ- 5
)
ÉÉ5 6
.
ÑÑ 
ToList
ÑÑ 
(
ÑÑ 
)
ÑÑ 
;
ÑÑ 
var
áá 

courseDtos
áá 
=
áá 
courses
áá $
.
áá$ %
Select
áá% +
(
áá+ ,
c
áá, -
=>
áá. 0
new
áá1 4'
GetTopPurchasedCoursesDTO
áá5 N
{
àà 
Id
ââ 
=
ââ 
c
ââ 
.
ââ 
Id
ââ 
,
ââ 
Title
ää 
=
ää 
courseVersions
ää &
.
ää& '
FirstOrDefault
ää' 5
(
ää5 6
cv
ää6 8
=>
ää9 ;
cv
ää< >
.
ää> ?
Id
ää? A
==
ääB D
c
ääE F
.
ääF G
CourseVersionId
ääG V
)
ääV W
?
ääW X
.
ääX Y
Title
ääY ^
,
ää^ _
Code
ãã 
=
ãã 
c
ãã 
.
ãã 
Code
ãã 
,
ãã 
Description
åå 
=
åå 
courseVersions
åå ,
.
åå, -
FirstOrDefault
åå- ;
(
åå; <
cv
åå< >
=>
åå? A
cv
ååB D
.
ååD E
Id
ååE G
==
ååH J
c
ååK L
.
ååL M
CourseVersionId
ååM \
)
åå\ ]
?
åå] ^
.
åå^ _
Description
åå_ j
,
ååj k
TotalStudent
çç 
=
çç 
c
çç  
.
çç  !
TotalStudent
çç! -
??
çç. 0
$num
çç1 2
,
çç2 3
CategoryName
éé 
=
éé 
courseVersions
éé -
.
éé- .
FirstOrDefault
éé. <
(
éé< =
cv
éé= ?
=>
éé@ B
cv
ééC E
.
ééE F
Id
ééF H
==
ééI K
c
ééL M
.
ééM N
CourseVersionId
ééN ]
)
éé] ^
?
éé^ _
.
éé_ `
Category
éé` h
?
ééh i
.
ééi j
Name
ééj n
}
èè 
)
èè 
.
èè 
ToList
èè 
(
èè 
)
èè 
;
èè 
return
ëë 
new
ëë 
ResponseDTO
ëë "
{
íí 
Result
ìì 
=
ìì 

courseDtos
ìì #
,
ìì# $
Message
îî 
=
îî 
$str
îî B
,
îîB C
	IsSuccess
ïï 
=
ïï 
true
ïï  
,
ïï  !

StatusCode
ññ 
=
ññ 
$num
ññ  
}
óó 
;
óó 
}
òò 	
catch
ôô 
(
ôô 
	Exception
ôô 
ex
ôô 
)
ôô 
{
öö 	
return
õõ 
new
õõ 
ResponseDTO
õõ "
{
úú 
Message
ùù 
=
ùù 
ex
ùù 
.
ùù 
Message
ùù $
,
ùù$ %
	IsSuccess
ûû 
=
ûû 
false
ûû !
,
ûû! "

StatusCode
üü 
=
üü 
$num
üü  
,
üü  !
Result
†† 
=
†† 
null
†† 
}
°° 
;
°° 
}
¢¢ 	
}
££ 
public
ßß 

async
ßß 
Task
ßß 
<
ßß 
ResponseDTO
ßß !
>
ßß! "&
GetLeastPurchasedCourses
ßß# ;
(
ßß; <
int
®® 
?
®® 
year
®®	 
=
®® 
null
®® 
,
®® 
int
©© 
?
©© 
month
©©	 
=
©© 
null
©© 
,
©© 
int
™™ 
?
™™ 
quarter
™™	 
=
™™ 
null
™™ 
,
™™ 
int
´´ 
top
´´ 
=
´´ 
$num
´´ 
,
´´ 
int
¨¨ 

pageNumber
¨¨ 
=
¨¨ 
$num
¨¨ 
,
¨¨ 
int
≠≠ 
pageSize
≠≠ 
=
≠≠ 
$num
≠≠ 
,
≠≠ 
string
ÆÆ 

?
ÆÆ
 
byCategoryName
ÆÆ 
=
ÆÆ 
null
ÆÆ !
)ØØ 
{
∞∞ 
try
±± 
{
≤≤ 	
var
¥¥ 
coursesQuery
¥¥ 
=
¥¥ 
_unitOfWork
¥¥ *
.
¥¥* +
CourseRepository
¥¥+ ;
.
¥¥; <
GetAllAsync
¥¥< G
(
¥¥G H
c
µµ 
=>
µµ 
c
µµ 
.
µµ 
Status
µµ 
==
µµ  
$num
µµ! "
)
∂∂ 
;
∂∂ 
var
∏∏ 
courses
∏∏ 
=
∏∏ 
(
∏∏ 
await
∏∏  
coursesQuery
∏∏! -
)
∏∏- .
.
∏∏. /
ToList
∏∏/ 5
(
∏∏5 6
)
∏∏6 7
;
∏∏7 8
if
ªª 
(
ªª 
year
ªª 
.
ªª 
HasValue
ªª 
)
ªª 
{
ºº 
courses
ΩΩ 
=
ΩΩ 
courses
ΩΩ !
.
ææ 
Where
ææ 
(
ææ 
c
ææ 
=>
ææ 
c
ææ  !
.
ææ! "
CreatedTime
ææ" -
.
ææ- .
HasValue
ææ. 6
&&
ææ7 9
c
ææ: ;
.
ææ; <
CreatedTime
ææ< G
.
ææG H
Value
ææH M
.
ææM N
Year
ææN R
==
ææS U
year
ææV Z
.
ææZ [
Value
ææ[ `
)
ææ` a
.
øø 
ToList
øø 
(
øø 
)
øø 
;
øø 
}
¿¿ 
if
¬¬ 
(
¬¬ 
month
¬¬ 
.
¬¬ 
HasValue
¬¬ 
)
¬¬ 
{
√√ 
courses
ƒƒ 
=
ƒƒ 
courses
ƒƒ !
.
≈≈ 
Where
≈≈ 
(
≈≈ 
c
≈≈ 
=>
≈≈ 
c
≈≈  !
.
≈≈! "
CreatedTime
≈≈" -
.
≈≈- .
HasValue
≈≈. 6
&&
≈≈7 9
c
≈≈: ;
.
≈≈; <
CreatedTime
≈≈< G
.
≈≈G H
Value
≈≈H M
.
≈≈M N
Month
≈≈N S
==
≈≈T V
month
≈≈W \
.
≈≈\ ]
Value
≈≈] b
)
≈≈b c
.
∆∆ 
ToList
∆∆ 
(
∆∆ 
)
∆∆ 
;
∆∆ 
}
«« 
if
…… 
(
…… 
quarter
…… 
.
…… 
HasValue
……  
)
……  !
{
   
int
ÀÀ 

startMonth
ÀÀ 
=
ÀÀ  
(
ÀÀ! "
quarter
ÀÀ" )
.
ÀÀ) *
Value
ÀÀ* /
-
ÀÀ0 1
$num
ÀÀ2 3
)
ÀÀ3 4
*
ÀÀ5 6
$num
ÀÀ7 8
+
ÀÀ9 :
$num
ÀÀ; <
;
ÀÀ< =
int
ÃÃ 
endMonth
ÃÃ 
=
ÃÃ 

startMonth
ÃÃ )
+
ÃÃ* +
$num
ÃÃ, -
;
ÃÃ- .
courses
ÕÕ 
=
ÕÕ 
courses
ÕÕ !
.
ŒŒ 
Where
ŒŒ 
(
ŒŒ 
c
ŒŒ 
=>
ŒŒ 
c
ŒŒ  !
.
ŒŒ! "
CreatedTime
ŒŒ" -
.
ŒŒ- .
HasValue
ŒŒ. 6
&&
ŒŒ7 9
c
œœ  !
.
œœ! "
CreatedTime
œœ" -
.
œœ- .
Value
œœ. 3
.
œœ3 4
Month
œœ4 9
>=
œœ: <

startMonth
œœ= G
&&
œœH J
c
––  !
.
––! "
CreatedTime
––" -
.
––- .
Value
––. 3
.
––3 4
Month
––4 9
<=
––: <
endMonth
––= E
)
––E F
.
—— 
ToList
—— 
(
—— 
)
—— 
;
—— 
}
““ 
var
’’ 
courseVersionIds
’’  
=
’’! "
courses
’’# *
.
÷÷ 
Select
÷÷ 
(
÷÷ 
c
÷÷ 
=>
÷÷ 
c
÷÷ 
.
÷÷ 
CourseVersionId
÷÷ .
)
÷÷. /
.
◊◊ 
Distinct
◊◊ 
(
◊◊ 
)
◊◊ 
.
ÿÿ 
ToList
ÿÿ 
(
ÿÿ 
)
ÿÿ 
;
ÿÿ 
var
€€ 
courseVersions
€€ 
=
€€  
(
€€! "
await
€€" '
_unitOfWork
€€( 3
.
€€3 4%
CourseVersionRepository
€€4 K
.
€€K L
GetAllAsync
€€L W
(
€€W X
cv
‹‹ 
=>
‹‹ 
courseVersionIds
‹‹ &
.
‹‹& '
Contains
‹‹' /
(
‹‹/ 0
cv
‹‹0 2
.
‹‹2 3
Id
‹‹3 5
)
‹‹5 6
,
‹‹6 7
includeProperties
›› !
:
››! "
$str
››# -
)
ﬁﬁ 
)
ﬁﬁ 
.
ﬁﬁ 
ToList
ﬁﬁ 
(
ﬁﬁ 
)
ﬁﬁ 
;
ﬁﬁ 
if
·· 
(
·· 
!
·· 
string
·· 
.
·· 
IsNullOrEmpty
·· %
(
··% &
byCategoryName
··& 4
)
··4 5
)
··5 6
{
‚‚ 
courseVersions
„„ 
=
„„  
courseVersions
„„! /
.
‰‰ 
Where
‰‰ 
(
‰‰ 
cv
‰‰ 
=>
‰‰  
cv
‰‰! #
.
‰‰# $
Category
‰‰$ ,
!=
‰‰- /
null
‰‰0 4
&&
‰‰5 7
cv
ÂÂ! #
.
ÂÂ# $
Category
ÂÂ$ ,
.
ÂÂ, -
Name
ÂÂ- 1
.
ÂÂ1 2
Contains
ÂÂ2 :
(
ÂÂ: ;
byCategoryName
ÂÂ; I
,
ÂÂI J
StringComparison
ÂÂK [
.
ÂÂ[ \&
CurrentCultureIgnoreCase
ÂÂ\ t
)
ÂÂt u
)
ÂÂu v
.
ÊÊ 
ToList
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ÁÁ 
courses
ÍÍ 
=
ÍÍ 
courses
ÍÍ 
.
ÎÎ 
Where
ÎÎ 
(
ÎÎ 
c
ÎÎ 
=>
ÎÎ 
courseVersions
ÎÎ *
.
ÎÎ* +
Any
ÎÎ+ .
(
ÎÎ. /
cv
ÎÎ/ 1
=>
ÎÎ2 4
cv
ÎÎ5 7
.
ÎÎ7 8
Id
ÎÎ8 :
==
ÎÎ; =
c
ÎÎ> ?
.
ÎÎ? @
CourseVersionId
ÎÎ@ O
)
ÎÎO P
)
ÎÎP Q
.
ÏÏ 
ToList
ÏÏ 
(
ÏÏ 
)
ÏÏ 
;
ÏÏ 
courses
ÔÔ 
=
ÔÔ 
courses
ÔÔ 
.
ÔÔ 
OrderBy
ÔÔ %
(
ÔÔ% &
c
ÔÔ& '
=>
ÔÔ( *
c
ÔÔ+ ,
.
ÔÔ, -
TotalStudent
ÔÔ- 9
)
ÔÔ9 :
.
ÔÔ: ;
ToList
ÔÔ; A
(
ÔÔA B
)
ÔÔB C
;
ÔÔC D
int
ÚÚ 
skip
ÚÚ 
=
ÚÚ 
(
ÚÚ 

pageNumber
ÚÚ "
-
ÚÚ# $
$num
ÚÚ% &
)
ÚÚ& '
*
ÚÚ( )
pageSize
ÚÚ* 2
;
ÚÚ2 3
courses
ÛÛ 
=
ÛÛ 
courses
ÛÛ 
.
ÙÙ 
Skip
ÙÙ 
(
ÙÙ 
skip
ÙÙ 
)
ÙÙ 
.
ıı 
Take
ıı 
(
ıı 
pageSize
ıı 
>
ıı  
top
ıı! $
?
ıı% &
top
ıı' *
:
ıı+ ,
pageSize
ıı- 5
)
ıı5 6
.
ˆˆ 
ToList
ˆˆ 
(
ˆˆ 
)
ˆˆ 
;
ˆˆ 
var
˘˘ 

courseDtos
˘˘ 
=
˘˘ 
courses
˘˘ $
.
˘˘$ %
Select
˘˘% +
(
˘˘+ ,
c
˘˘, -
=>
˘˘. 0
new
˘˘1 4'
GetTopPurchasedCoursesDTO
˘˘5 N
{
˙˙ 
Id
˚˚ 
=
˚˚ 
c
˚˚ 
.
˚˚ 
Id
˚˚ 
,
˚˚ 
Title
¸¸ 
=
¸¸ 
courseVersions
¸¸ &
.
¸¸& '
FirstOrDefault
¸¸' 5
(
¸¸5 6
cv
¸¸6 8
=>
¸¸9 ;
cv
¸¸< >
.
¸¸> ?
Id
¸¸? A
==
¸¸B D
c
¸¸E F
.
¸¸F G
CourseVersionId
¸¸G V
)
¸¸V W
?
¸¸W X
.
¸¸X Y
Title
¸¸Y ^
,
¸¸^ _
Code
˝˝ 
=
˝˝ 
c
˝˝ 
.
˝˝ 
Code
˝˝ 
,
˝˝ 
Description
˛˛ 
=
˛˛ 
courseVersions
˛˛ ,
.
˛˛, -
FirstOrDefault
˛˛- ;
(
˛˛; <
cv
˛˛< >
=>
˛˛? A
cv
˛˛B D
.
˛˛D E
Id
˛˛E G
==
˛˛H J
c
˛˛K L
.
˛˛L M
CourseVersionId
˛˛M \
)
˛˛\ ]
?
˛˛] ^
.
˛˛^ _
Description
˛˛_ j
,
˛˛j k
TotalStudent
ˇˇ 
=
ˇˇ 
c
ˇˇ  
.
ˇˇ  !
TotalStudent
ˇˇ! -
??
ˇˇ. 0
$num
ˇˇ1 2
,
ˇˇ2 3
CategoryName
ÄÄ 
=
ÄÄ 
courseVersions
ÄÄ -
.
ÄÄ- .
FirstOrDefault
ÄÄ. <
(
ÄÄ< =
cv
ÄÄ= ?
=>
ÄÄ@ B
cv
ÄÄC E
.
ÄÄE F
Id
ÄÄF H
==
ÄÄI K
c
ÄÄL M
.
ÄÄM N
CourseVersionId
ÄÄN ]
)
ÄÄ] ^
?
ÄÄ^ _
.
ÄÄ_ `
Category
ÄÄ` h
?
ÄÄh i
.
ÄÄi j
Name
ÄÄj n
}
ÅÅ 
)
ÅÅ 
.
ÅÅ 
ToList
ÅÅ 
(
ÅÅ 
)
ÅÅ 
;
ÅÅ 
return
ÉÉ 
new
ÉÉ 
ResponseDTO
ÉÉ "
{
ÑÑ 
Result
ÖÖ 
=
ÖÖ 

courseDtos
ÖÖ #
,
ÖÖ# $
Message
ÜÜ 
=
ÜÜ 
$str
ÜÜ D
,
ÜÜD E
	IsSuccess
áá 
=
áá 
true
áá  
,
áá  !

StatusCode
àà 
=
àà 
$num
àà  
}
ââ 
;
ââ 
}
ää 	
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã 
{
åå 	
return
çç 
new
çç 
ResponseDTO
çç "
{
éé 
Message
èè 
=
èè 
ex
èè 
.
èè 
Message
èè $
,
èè$ %
	IsSuccess
êê 
=
êê 
false
êê !
,
êê! "

StatusCode
ëë 
=
ëë 
$num
ëë  
,
ëë  !
Result
íí 
=
íí 
null
íí 
}
ìì 
;
ìì 
}
îî 	
}
ïï 
public
ôô 

async
ôô 
Task
ôô 
<
ôô 
ResponseDTO
ôô !
>
ôô! "
	GetCourse
ôô# ,
(
ôô, -
ClaimsPrincipal
ôô- <
User
ôô= A
,
ôôA B
Guid
ôôC G
courseId
ôôH P
)
ôôP Q
{
öö 
try
õõ 
{
úú 	
var
ùù 
course
ùù 
=
ùù 
await
ùù 
_unitOfWork
ùù *
.
ùù* +
CourseRepository
ùù+ ;
.
ùù; <
GetAsync
ùù< D
(
ùùD E
x
ùùE F
=>
ùùG I
x
ùùJ K
.
ùùK L
Id
ùùL N
==
ùùO Q
courseId
ùùR Z
)
ùùZ [
;
ùù[ \
if
üü 
(
üü 
course
üü 
is
üü 
null
üü 
)
üü 
{
†† 
return
°° 
new
°° 
ResponseDTO
°° &
(
°°& '
)
°°' (
{
¢¢ 
	IsSuccess
££ 
=
££ 
false
££  %
,
££% &

StatusCode
§§ 
=
§§  
$num
§§! $
,
§§$ %
Result
•• 
=
•• 
null
•• !
,
••! "
Message
¶¶ 
=
¶¶ 
$str
¶¶ 4
}
ßß 
;
ßß 
}
®® 
var
™™ 
courseVersion
™™ 
=
™™ 
await
™™  %
_unitOfWork
™™& 1
.
™™1 2%
CourseVersionRepository
™™2 I
.
™™I J
GetAsync
™™J R
(
™™R S
x
™™S T
=>
™™U W
x
™™X Y
.
™™Y Z
Id
™™Z \
==
™™] _
course
™™` f
.
™™f g
CourseVersionId
™™g v
)
™™v w
;
™™w x
if
¨¨ 
(
¨¨ 
courseVersion
¨¨ 
is
¨¨  
null
¨¨! %
)
¨¨% &
{
≠≠ 
return
ÆÆ 
new
ÆÆ 
ResponseDTO
ÆÆ &
(
ÆÆ& '
)
ÆÆ' (
{
ØØ 
	IsSuccess
∞∞ 
=
∞∞ 
false
∞∞  %
,
∞∞% &

StatusCode
±± 
=
±±  
$num
±±! $
,
±±$ %
Result
≤≤ 
=
≤≤ 
null
≤≤ !
,
≤≤! "
Message
≥≥ 
=
≥≥ 
$str
≥≥ 6
}
¥¥ 
;
¥¥ 
}
µµ 
var
∑∑ 
courseVersionDto
∑∑  
=
∑∑! "
_mapper
∑∑# *
.
∑∑* +
Map
∑∑+ .
<
∑∑. /!
GetCourseVersionDTO
∑∑/ B
>
∑∑B C
(
∑∑C D
courseVersion
∑∑D Q
)
∑∑Q R
;
∑∑R S
return
ππ 
new
ππ 
ResponseDTO
ππ "
(
ππ" #
)
ππ# $
{
∫∫ 
	IsSuccess
ªª 
=
ªª 
true
ªª  
,
ªª  !

StatusCode
ºº 
=
ºº 
$num
ºº  
,
ºº  !
Result
ΩΩ 
=
ΩΩ 
courseVersionDto
ΩΩ )
,
ΩΩ) *
Message
ææ 
=
ææ 
$str
ææ 3
}
øø 
;
øø 
}
¿¿ 	
catch
¡¡ 
(
¡¡ 
	Exception
¡¡ 
e
¡¡ 
)
¡¡ 
{
¬¬ 	
return
√√ 
new
√√ 
ResponseDTO
√√ "
(
√√" #
)
√√# $
{
ƒƒ 
	IsSuccess
≈≈ 
=
≈≈ 
false
≈≈ !
,
≈≈! "

StatusCode
∆∆ 
=
∆∆ 
$num
∆∆  
,
∆∆  !
Result
«« 
=
«« 
null
«« 
,
«« 
Message
»» 
=
»» 
e
»» 
.
»» 
Message
»» #
}
…… 
;
…… 
}
   	
}
ÀÀ 
public
ÕÕ 

async
ÕÕ 
Task
ÕÕ 
<
ÕÕ 
ResponseDTO
ÕÕ !
>
ÕÕ! "
GetCourseInfo
ÕÕ# 0
(
ÕÕ0 1
ClaimsPrincipal
ÕÕ1 @
User
ÕÕA E
,
ÕÕE F
Guid
ÕÕG K
courseId
ÕÕL T
)
ÕÕT U
{
ŒŒ 
try
œœ 
{
–– 	
var
—— 
course
—— 
=
—— 
await
—— 
_unitOfWork
—— *
.
——* +
CourseRepository
——+ ;
.
——; <
GetAsync
——< D
(
——D E
x
——E F
=>
——G I
x
——J K
.
——K L
Id
——L N
==
——O Q
courseId
——R Z
)
——Z [
;
——[ \
if
”” 
(
”” 
course
”” 
is
”” 
null
”” 
)
”” 
{
‘‘ 
return
’’ 
new
’’ 
ResponseDTO
’’ &
(
’’& '
)
’’' (
{
÷÷ 
	IsSuccess
◊◊ 
=
◊◊ 
false
◊◊  %
,
◊◊% &

StatusCode
ÿÿ 
=
ÿÿ  
$num
ÿÿ! $
,
ÿÿ$ %
Result
ŸŸ 
=
ŸŸ 
null
ŸŸ !
,
ŸŸ! "
Message
⁄⁄ 
=
⁄⁄ 
$str
⁄⁄ 4
}
€€ 
;
€€ 
}
‹‹ 
var
ﬁﬁ 
getCourseInfoDto
ﬁﬁ  
=
ﬁﬁ! "
_mapper
ﬁﬁ# *
.
ﬁﬁ* +
Map
ﬁﬁ+ .
<
ﬁﬁ. /
GetCourseInfoDTO
ﬁﬁ/ ?
>
ﬁﬁ? @
(
ﬁﬁ@ A
course
ﬁﬁA G
)
ﬁﬁG H
;
ﬁﬁH I
return
‡‡ 
new
‡‡ 
ResponseDTO
‡‡ "
(
‡‡" #
)
‡‡# $
{
·· 
	IsSuccess
‚‚ 
=
‚‚ 
true
‚‚  
,
‚‚  !

StatusCode
„„ 
=
„„ 
$num
„„  
,
„„  !
Result
‰‰ 
=
‰‰ 
getCourseInfoDto
‰‰ )
,
‰‰) *
Message
ÂÂ 
=
ÂÂ 
$str
ÂÂ ?
}
ÊÊ 
;
ÊÊ 
}
ÁÁ 	
catch
ËË 
(
ËË 
	Exception
ËË 
e
ËË 
)
ËË 
{
ÈÈ 	
return
ÍÍ 
new
ÍÍ 
ResponseDTO
ÍÍ "
(
ÍÍ" #
)
ÍÍ# $
{
ÎÎ 
Message
ÏÏ 
=
ÏÏ 
e
ÏÏ 
.
ÏÏ 
Message
ÏÏ #
,
ÏÏ# $

StatusCode
ÌÌ 
=
ÌÌ 
$num
ÌÌ  
,
ÌÌ  !
Result
ÓÓ 
=
ÓÓ 
null
ÓÓ 
,
ÓÓ 
	IsSuccess
ÔÔ 
=
ÔÔ 
false
ÔÔ !
}
 
;
 
}
ÒÒ 	
}
ÚÚ 
public
ÙÙ 

async
ÙÙ 
Task
ÙÙ 
<
ÙÙ 
ResponseDTO
ÙÙ !
>
ÙÙ! "
ActivateCourse
ÙÙ# 1
(
ÙÙ1 2
ClaimsPrincipal
ÙÙ2 A
User
ÙÙB F
,
ÙÙF G
Guid
ÙÙH L
courseId
ÙÙM U
)
ÙÙU V
{
ıı 
try
ˆˆ 
{
˜˜ 	
var
¯¯ 
course
¯¯ 
=
¯¯ 
await
¯¯ 
_unitOfWork
¯¯ *
.
¯¯* +
CourseRepository
¯¯+ ;
.
¯¯; <
GetAsync
¯¯< D
(
¯¯D E
x
¯¯E F
=>
¯¯G I
x
¯¯J K
.
¯¯K L
Id
¯¯L N
==
¯¯O Q
courseId
¯¯R Z
)
¯¯Z [
;
¯¯[ \
if
˙˙ 
(
˙˙ 
course
˙˙ 
is
˙˙ 
null
˙˙ 
)
˙˙ 
{
˚˚ 
return
¸¸ 
new
¸¸ 
ResponseDTO
¸¸ &
(
¸¸& '
)
¸¸' (
{
˝˝ 
	IsSuccess
˛˛ 
=
˛˛ 
false
˛˛  %
,
˛˛% &

StatusCode
ˇˇ 
=
ˇˇ  
$num
ˇˇ! $
,
ˇˇ$ %
Result
ÄÄ 
=
ÄÄ 
null
ÄÄ !
,
ÄÄ! "
Message
ÅÅ 
=
ÅÅ 
$str
ÅÅ 4
}
ÇÇ 
;
ÇÇ 
}
ÉÉ 
course
ÖÖ 
.
ÖÖ 
Status
ÖÖ 
=
ÖÖ  
StaticCourseStatus
ÖÖ .
.
ÖÖ. /
	Activated
ÖÖ/ 8
;
ÖÖ8 9
_unitOfWork
áá 
.
áá 
CourseRepository
áá (
.
áá( )
Update
áá) /
(
áá/ 0
course
áá0 6
)
áá6 7
;
áá7 8
await
àà 
_unitOfWork
àà 
.
àà 
	SaveAsync
àà '
(
àà' (
)
àà( )
;
àà) *
return
ää 
new
ää 
ResponseDTO
ää "
(
ää" #
)
ää# $
{
ãã 
	IsSuccess
åå 
=
åå 
true
åå  
,
åå  !

StatusCode
çç 
=
çç 
$num
çç  
,
çç  !
Result
éé 
=
éé 
null
éé 
,
éé 
Message
èè 
=
èè 
$str
èè 9
}
êê 
;
êê 
}
ëë 	
catch
íí 
(
íí 
	Exception
íí 
e
íí 
)
íí 
{
ìì 	
return
îî 
new
îî 
ResponseDTO
îî "
(
îî" #
)
îî# $
{
ïï 
Message
ññ 
=
ññ 
e
ññ 
.
ññ 
Message
ññ #
,
ññ# $

StatusCode
óó 
=
óó 
$num
óó  
,
óó  !
Result
òò 
=
òò 
null
òò 
,
òò 
	IsSuccess
ôô 
=
ôô 
false
ôô !
}
öö 
;
öö 
}
õõ 	
}
úú 
public
ûû 

async
ûû 
Task
ûû 
<
ûû 
ResponseDTO
ûû !
>
ûû! "
DeactivateCourse
ûû# 3
(
ûû3 4
ClaimsPrincipal
ûû4 C
User
ûûD H
,
ûûH I
Guid
ûûJ N
courseId
ûûO W
)
ûûW X
{
üü 
try
†† 
{
°° 	
var
¢¢ 
course
¢¢ 
=
¢¢ 
await
¢¢ 
_unitOfWork
¢¢ *
.
¢¢* +
CourseRepository
¢¢+ ;
.
¢¢; <
GetAsync
¢¢< D
(
¢¢D E
x
¢¢E F
=>
¢¢G I
x
¢¢J K
.
¢¢K L
Id
¢¢L N
==
¢¢O Q
courseId
¢¢R Z
)
¢¢Z [
;
¢¢[ \
if
§§ 
(
§§ 
course
§§ 
is
§§ 
null
§§ 
)
§§ 
{
•• 
return
¶¶ 
new
¶¶ 
ResponseDTO
¶¶ &
(
¶¶& '
)
¶¶' (
{
ßß 
	IsSuccess
®® 
=
®® 
false
®®  %
,
®®% &

StatusCode
©© 
=
©©  
$num
©©! $
,
©©$ %
Result
™™ 
=
™™ 
null
™™ !
,
™™! "
Message
´´ 
=
´´ 
$str
´´ 4
}
¨¨ 
;
¨¨ 
}
≠≠ 
course
ØØ 
.
ØØ 
Status
ØØ 
=
ØØ  
StaticCourseStatus
ØØ .
.
ØØ. /
Deactivated
ØØ/ :
;
ØØ: ;
_unitOfWork
∞∞ 
.
∞∞ 
CourseRepository
∞∞ (
.
∞∞( )
Update
∞∞) /
(
∞∞/ 0
course
∞∞0 6
)
∞∞6 7
;
∞∞7 8
await
±± 
_unitOfWork
±± 
.
±± 
	SaveAsync
±± '
(
±±' (
)
±±( )
;
±±) *
BackgroundJob
≥≥ 
.
≥≥ 
Enqueue
≥≥ !
<
≥≥! "
IEmailSender
≥≥" .
>
≥≥. /
(
≥≥/ 0
job
≥≥0 3
=>
≥≥4 6
job
≥≥7 :
.
≥≥: ;3
%SendDeactivatedCourseEmailForStudents
≥≥; `
(
≥≥` a
courseId
≥≥a i
)
≥≥i j
)
≥≥j k
;
≥≥k l
return
µµ 
new
µµ 
ResponseDTO
µµ "
(
µµ" #
)
µµ# $
{
∂∂ 
	IsSuccess
∑∑ 
=
∑∑ 
true
∑∑  
,
∑∑  !

StatusCode
∏∏ 
=
∏∏ 
$num
∏∏  
,
∏∏  !
Result
ππ 
=
ππ 
null
ππ 
,
ππ 
Message
∫∫ 
=
∫∫ 
$str
∫∫ ;
}
ªª 
;
ªª 
}
ºº 	
catch
ΩΩ 
(
ΩΩ 
	Exception
ΩΩ 
e
ΩΩ 
)
ΩΩ 
{
ææ 	
return
øø 
new
øø 
ResponseDTO
øø "
(
øø" #
)
øø# $
{
¿¿ 
Message
¡¡ 
=
¡¡ 
e
¡¡ 
.
¡¡ 
Message
¡¡ #
,
¡¡# $

StatusCode
¬¬ 
=
¬¬ 
$num
¬¬  
,
¬¬  !
Result
√√ 
=
√√ 
null
√√ 
,
√√ 
	IsSuccess
ƒƒ 
=
ƒƒ 
false
ƒƒ !
}
≈≈ 
;
≈≈ 
}
∆∆ 	
}
«« 
public
…… 

async
…… 
Task
…… 
<
…… 
ResponseDTO
…… !
>
……! "
EnrollCourse
……# /
(
……/ 0
ClaimsPrincipal
……0 ?
User
……@ D
,
……D E
EnrollCourseDTO
……F U
enrollCourseDto
……V e
)
……e f
{
   
try
ÀÀ 
{
ÃÃ 	
var
ÕÕ 
studentCourse
ÕÕ 
=
ÕÕ 
await
ÕÕ  %
_unitOfWork
ÕÕ& 1
.
ÕÕ1 2%
StudentCourseRepository
ÕÕ2 I
.
ÕÕI J
GetAsync
ÕÕJ R
(
ŒŒ 
x
œœ 
=>
œœ 
x
œœ 
.
œœ 
	StudentId
œœ  
==
œœ! #
enrollCourseDto
œœ$ 3
.
œœ3 4
	studentId
œœ4 =
&&
œœ> @
x
œœA B
.
œœB C
CourseId
œœC K
==
œœL N
enrollCourseDto
œœO ^
.
œœ^ _
courseId
œœ_ g
)
–– 
;
–– 
var
““ 
course
““ 
=
““ 
await
““ 
_unitOfWork
““ *
.
““* +
CourseRepository
““+ ;
.
““; <
GetAsync
““< D
(
““D E
x
““E F
=>
““G I
x
““J K
.
““K L
Id
““L N
==
““O Q
enrollCourseDto
““R a
.
““a b
courseId
““b j
)
““j k
;
““k l
if
”” 
(
”” 
course
”” 
is
”” 
null
”” 
)
”” 
{
‘‘ 
return
’’ 
new
’’ 
ResponseDTO
’’ &
(
’’& '
)
’’' (
{
÷÷ 
Message
◊◊ 
=
◊◊ 
$str
◊◊ 4
,
◊◊4 5
	IsSuccess
ÿÿ 
=
ÿÿ 
false
ÿÿ  %
,
ÿÿ% &

StatusCode
ŸŸ 
=
ŸŸ  
$num
ŸŸ! $
,
ŸŸ$ %
Result
⁄⁄ 
=
⁄⁄ 
null
⁄⁄ !
}
€€ 
;
€€ 
}
‹‹ 
if
ﬁﬁ 
(
ﬁﬁ 
studentCourse
ﬁﬁ 
is
ﬁﬁ  
null
ﬁﬁ! %
)
ﬁﬁ% &
{
ﬂﬂ 
return
‡‡ 
new
‡‡ 
ResponseDTO
‡‡ &
(
‡‡& '
)
‡‡' (
{
·· 
Message
‚‚ 
=
‚‚ 
$str
‚‚ ?
,
‚‚? @
	IsSuccess
„„ 
=
„„ 
false
„„  %
,
„„% &

StatusCode
‰‰ 
=
‰‰  
$num
‰‰! $
,
‰‰$ %
Result
ÂÂ 
=
ÂÂ 
null
ÂÂ !
}
ÊÊ 
;
ÊÊ 
}
ÁÁ 
if
ÈÈ 
(
ÈÈ 
studentCourse
ÈÈ 
.
ÈÈ 
Status
ÈÈ $
!=
ÈÈ% '
StaticStatus
ÈÈ( 4
.
ÈÈ4 5
StudentCourse
ÈÈ5 B
.
ÈÈB C
Pending
ÈÈC J
)
ÈÈJ K
{
ÍÍ 
return
ÎÎ 
new
ÎÎ 
ResponseDTO
ÎÎ &
(
ÎÎ& '
)
ÎÎ' (
{
ÏÏ 
Message
ÌÌ 
=
ÌÌ 
$str
ÌÌ ?
,
ÌÌ? @
	IsSuccess
ÓÓ 
=
ÓÓ 
false
ÓÓ  %
,
ÓÓ% &

StatusCode
ÔÔ 
=
ÔÔ  
$num
ÔÔ! $
,
ÔÔ$ %
Result
 
=
 
null
 !
}
ÒÒ 
;
ÒÒ 
}
ÚÚ 
await
ÙÙ #
_studentCourseService
ÙÙ '
.
ÙÙ' (!
UpdateStudentCourse
ÙÙ( ;
(
ıı 
User
ˆˆ 
,
ˆˆ 
new
˜˜ $
UpdateStudentCourseDTO
˜˜ *
(
˜˜* +
)
˜˜+ ,
{
¯¯ 
Status
˘˘ 
=
˘˘ 
StaticStatus
˘˘ )
.
˘˘) *
StudentCourse
˘˘* 7
.
˘˘7 8
Enrolled
˘˘8 @
,
˘˘@ A
CourseId
˙˙ 
=
˙˙ 
enrollCourseDto
˙˙ .
.
˙˙. /
courseId
˙˙/ 7
,
˙˙7 8
	StudentId
˚˚ 
=
˚˚ 
enrollCourseDto
˚˚  /
.
˚˚/ 0
	studentId
˚˚0 9
}
¸¸ 
)
˝˝ 
;
˝˝ 
await
ˇˇ $
_courseProgressService
ˇˇ (
.
ˇˇ( )
CreateProgress
ˇˇ) 7
(
ÄÄ 
new
ÅÅ 
CreateProgressDTO
ÅÅ %
(
ÅÅ% &
)
ÅÅ& '
{
ÇÇ 
StudentCourseId
ÉÉ #
=
ÉÉ$ %
studentCourse
ÉÉ& 3
.
ÉÉ3 4
Id
ÉÉ4 6
}
ÑÑ 
)
ÖÖ 
;
ÖÖ 
return
áá 
new
áá 
ResponseDTO
áá "
(
áá" #
)
áá# $
{
àà 
Message
ââ 
=
ââ 
$str
ââ 6
,
ââ6 7
	IsSuccess
ää 
=
ää 
true
ää  
,
ää  !

StatusCode
ãã 
=
ãã 
$num
ãã  
,
ãã  !
Result
åå 
=
åå 
null
åå 
}
çç 
;
çç 
}
éé 	
catch
èè 
(
èè 
	Exception
èè 
e
èè 
)
èè 
{
êê 	
return
ëë 
new
ëë 
ResponseDTO
ëë "
(
ëë" #
)
ëë# $
{
íí 
Message
ìì 
=
ìì 
e
ìì 
.
ìì 
Message
ìì #
,
ìì# $

StatusCode
îî 
=
îî 
$num
îî  
,
îî  !
Result
ïï 
=
ïï 
null
ïï 
,
ïï 
	IsSuccess
ññ 
=
ññ 
true
ññ  
}
óó 
;
óó 
}
òò 	
}
ôô 
public
õõ 

async
õõ 
Task
õõ 
<
õõ 
ResponseDTO
õõ !
>
õõ! "
SuggestCourse
õõ# 0
(
õõ0 1
Guid
õõ1 5
	studentId
õõ6 ?
)
õõ? @
{
úú 
try
ùù 
{
ûû 	
var
†† 
id
†† 
=
†† 
await
°° 
_unitOfWork
°° !
.
°°! "%
StudentCourseRepository
°°" 9
.
°°9 :
GetAsync
°°: B
(
°°B C
i
°°C D
=>
°°E G
i
°°H I
.
°°I J
	StudentId
°°J S
==
°°T V
	studentId
°°W `
)
°°` a
;
°°a b
if
¢¢ 
(
¢¢ 
id
¢¢ 
==
¢¢ 
null
¢¢ 
)
¢¢ 
{
££ 
return
§§ 
new
§§ 
ResponseDTO
§§ &
(
§§& '
)
§§' (
{
•• 
Message
¶¶ 
=
¶¶ 
$str
¶¶ 1
,
¶¶1 2
	IsSuccess
ßß 
=
ßß 
false
ßß  %
,
ßß% &

StatusCode
®® 
=
®®  
$num
®®! $
,
®®$ %
Result
©© 
=
©© 
null
©© !
}
™™ 
;
™™ 
}
´´ 
var
ÆÆ 
courses
ÆÆ 
=
ÆÆ 
await
ÆÆ 
_unitOfWork
ÆÆ  +
.
ÆÆ+ ,%
StudentCourseRepository
ÆÆ, C
.
ÆÆC D
GetAllAsync
ÆÆD O
(
ØØ 
c
ØØ 
=>
ØØ 
c
ØØ 
.
ØØ 
	StudentId
ØØ !
==
ØØ" $
	studentId
ØØ% .
&&
ØØ/ 1
c
ØØ2 3
.
ØØ3 4
Status
ØØ4 :
==
ØØ; =
$num
ØØ> ?
||
ØØ@ B
c
ØØC D
.
ØØD E
Status
ØØE K
==
ØØL N
$num
ØØO P
||
ØØQ S
c
ØØT U
.
ØØU V
Status
ØØV \
==
ØØ] _
$num
ØØ` a
)
ØØa b
;
ØØb c
var
∞∞ 
coursesEnroll
∞∞ 
=
∞∞ 
courses
∞∞  '
.
∞∞' (
Select
∞∞( .
(
∞∞. /
c
∞∞/ 0
=>
∞∞1 3
c
∞∞4 5
.
∞∞5 6
CourseId
∞∞6 >
)
∞∞> ?
.
∞∞? @
Distinct
∞∞@ H
(
∞∞H I
)
∞∞I J
.
∞∞J K
ToList
∞∞K Q
(
∞∞Q R
)
∞∞R S
;
∞∞S T
if
≤≤ 
(
≤≤ 
courses
≤≤ 
==
≤≤ 
null
≤≤ 
||
≤≤  "
!
≤≤# $
courses
≤≤$ +
.
≤≤+ ,
Any
≤≤, /
(
≤≤/ 0
)
≤≤0 1
)
≤≤1 2
{
≥≥ 
return
¥¥ 
new
¥¥ 
ResponseDTO
¥¥ &
(
¥¥& '
)
¥¥' (
{
µµ 
Message
∂∂ 
=
∂∂ 
$str
∂∂ G
,
∂∂G H
	IsSuccess
∑∑ 
=
∑∑ 
false
∑∑  %
,
∑∑% &

StatusCode
∏∏ 
=
∏∏  
$num
∏∏! $
,
∏∏$ %
Result
ππ 
=
ππ 
null
ππ !
}
∫∫ 
;
∫∫ 
}
ªª 
var
ææ 
suggestCourse
ææ 
=
ææ 
new
ææ  #
List
ææ$ (
<
ææ( )
Course
ææ) /
>
ææ/ 0
(
ææ0 1
)
ææ1 2
;
ææ2 3
var
øø 
redFlag
øø 
=
øø 
$num
øø 
;
øø 
foreach
¡¡ 
(
¡¡ 
var
¡¡ 
course
¡¡ 
in
¡¡  "
courses
¡¡# *
)
¡¡* +
{
¬¬ 
if
√√ 
(
√√ 
redFlag
√√ 
>=
√√ 
$num
√√  
)
√√  !
break
√√" '
;
√√' (
var
ƒƒ 
courseId
ƒƒ 
=
ƒƒ 
course
ƒƒ %
.
ƒƒ% &
CourseId
ƒƒ& .
;
ƒƒ. /
var
≈≈ 
courseVersions
≈≈ "
=
≈≈# $
await
≈≈% *
_unitOfWork
≈≈+ 6
.
≈≈6 7%
CourseVersionRepository
≈≈7 N
.
≈≈N O
GetAllAsync
≈≈O Z
(
≈≈Z [
cv
∆∆ 
=>
∆∆ 
cv
∆∆ 
.
∆∆ 
CourseId
∆∆ %
==
∆∆& (
courseId
∆∆) 1
,
∆∆1 2
includeProperties
«« %
:
««% &
$str
««' 1
)
««1 2
;
««2 3
foreach
…… 
(
…… 
var
…… 
courseVersion
…… *
in
……+ -
courseVersions
……. <
)
……< =
{
   
var
ÀÀ 

categoryId
ÀÀ "
=
ÀÀ# $
courseVersion
ÀÀ% 2
.
ÀÀ2 3

CategoryId
ÀÀ3 =
;
ÀÀ= >
var
ŒŒ #
relatedCourseVersions
ŒŒ -
=
ŒŒ. /
await
ŒŒ0 5
_unitOfWork
ŒŒ6 A
.
ŒŒA B%
CourseVersionRepository
ŒŒB Y
.
ŒŒY Z
GetAllAsync
ŒŒZ e
(
ŒŒe f
cv
ŒŒf h
=>
ŒŒi k
cv
œœ 
.
œœ 

CategoryId
œœ %
==
œœ& (

categoryId
œœ) 3
&&
œœ4 6
!
œœ7 8
coursesEnroll
œœ8 E
.
œœE F
Contains
œœF N
(
œœN O
cv
œœO Q
.
œœQ R
CourseId
œœR Z
)
œœZ [
)
œœ[ \
;
œœ\ ]
foreach
““ 
(
““ 
var
““  "
relatedCourseVersion
““! 5
in
““6 8#
relatedCourseVersions
““9 N
)
““N O
{
”” 
var
‘‘ 
relatedCourse
‘‘ )
=
‘‘* +
await
’’ !
_unitOfWork
’’" -
.
’’- .
CourseRepository
’’. >
.
’’> ?
GetAsync
’’? G
(
’’G H
c
’’H I
=>
’’J L
c
’’M N
.
’’N O
Id
’’O Q
==
’’R T"
relatedCourseVersion
’’U i
.
’’i j
CourseId
’’j r
)
’’r s
;
’’s t
if
÷÷ 
(
÷÷ 
relatedCourse
÷÷ )
!=
÷÷* ,
null
÷÷- 1
)
÷÷1 2
{
◊◊ 
suggestCourse
ÿÿ )
.
ÿÿ) *
Add
ÿÿ* -
(
ÿÿ- .
relatedCourse
ÿÿ. ;
)
ÿÿ; <
;
ÿÿ< =
}
ŸŸ 
}
⁄⁄ 
}
€€ 
}
‹‹ 
var
ﬁﬁ 
distinctCourses
ﬁﬁ 
=
ﬁﬁ  !
suggestCourse
ﬁﬁ" /
.
ﬁﬁ/ 0
Distinct
ﬁﬁ0 8
(
ﬁﬁ8 9
)
ﬁﬁ9 :
.
ﬁﬁ: ;
ToList
ﬁﬁ; A
(
ﬁﬁA B
)
ﬁﬁB C
;
ﬁﬁC D
return
‡‡ 
new
‡‡ 
ResponseDTO
‡‡ "
(
‡‡" #
)
‡‡# $
{
·· 
Message
‚‚ 
=
‚‚ 
$str
‚‚ 7
,
‚‚7 8
	IsSuccess
„„ 
=
„„ 
true
„„  
,
„„  !

StatusCode
‰‰ 
=
‰‰ 
$num
‰‰  
,
‰‰  !
Result
ÂÂ 
=
ÂÂ 
distinctCourses
ÂÂ (
}
ÊÊ 
;
ÊÊ 
}
ÁÁ 	
catch
ËË 
(
ËË 
	Exception
ËË 
e
ËË 
)
ËË 
{
ÈÈ 	
return
ÍÍ 
new
ÍÍ 
ResponseDTO
ÍÍ "
(
ÍÍ" #
)
ÍÍ# $
{
ÎÎ 
Message
ÏÏ 
=
ÏÏ 
e
ÏÏ 
.
ÏÏ 
Message
ÏÏ #
,
ÏÏ# $

StatusCode
ÌÌ 
=
ÌÌ 
$num
ÌÌ  
,
ÌÌ  !
Result
ÓÓ 
=
ÓÓ 
null
ÓÓ 
,
ÓÓ 
	IsSuccess
ÔÔ 
=
ÔÔ 
true
ÔÔ  
}
 
;
 
}
ÒÒ 	
}
ÚÚ 
public
ÙÙ 

async
ÙÙ 
Task
ÙÙ 
<
ÙÙ 
ResponseDTO
ÙÙ !
>
ÙÙ! "
UpsertCourseTotal
ÙÙ# 4
(
ÙÙ4 5"
UpsertCourseTotalDTO
ÙÙ5 I"
upsertCourseTotalDto
ÙÙJ ^
)
ÙÙ^ _
{
ıı 
try
ˆˆ 
{
˜˜ 	
var
¯¯ 
course
¯¯ 
=
¯¯ 
await
¯¯ 
_unitOfWork
¯¯ *
.
¯¯* +
CourseRepository
¯¯+ ;
.
¯¯; <
GetAsync
¯¯< D
(
¯¯D E
x
¯¯E F
=>
¯¯G I
x
¯¯J K
.
¯¯K L
Id
¯¯L N
==
¯¯O Q"
upsertCourseTotalDto
¯¯R f
.
¯¯f g
CourseId
¯¯g o
)
¯¯o p
;
¯¯p q
if
˙˙ 
(
˙˙ 
course
˙˙ 
is
˙˙ 
null
˙˙ 
)
˙˙ 
{
˚˚ 
return
¸¸ 
new
¸¸ 
ResponseDTO
¸¸ &
(
¸¸& '
)
¸¸' (
{
˝˝ 
Message
˛˛ 
=
˛˛ 
$str
˛˛ 4
,
˛˛4 5
	IsSuccess
ˇˇ 
=
ˇˇ 
false
ˇˇ  %
,
ˇˇ% &

StatusCode
ÄÄ 
=
ÄÄ  
$num
ÄÄ! $
,
ÄÄ$ %
Result
ÅÅ 
=
ÅÅ 
null
ÅÅ !
}
ÇÇ 
;
ÇÇ 
}
ÉÉ 
if
ÖÖ 
(
ÖÖ "
upsertCourseTotalDto
ÖÖ $
.
ÖÖ$ %
TotalStudent
ÖÖ% 1
is
ÖÖ2 4
not
ÖÖ5 8
null
ÖÖ9 =
)
ÖÖ= >
{
ÜÜ 
course
áá 
.
áá 
TotalStudent
áá #
+=
áá$ &"
upsertCourseTotalDto
áá' ;
.
áá; <
TotalStudent
áá< H
;
ááH I
}
àà 
if
ää 
(
ää "
upsertCourseTotalDto
ää $
.
ää$ %
TotalEarned
ää% 0
is
ää1 3
not
ää4 7
null
ää8 <
)
ää< =
{
ãã 
course
åå 
.
åå 
TotalEarned
åå "
+=
åå# %"
upsertCourseTotalDto
åå& :
.
åå: ;
TotalEarned
åå; F
;
ååF G
course
çç 
.
çç 
TotalStudent
çç #
+=
çç$ &
$num
çç' (
;
çç( )
}
éé 
if
êê 
(
êê "
upsertCourseTotalDto
êê $
.
êê$ %
UpdateTotalRate
êê% 4
)
êê4 5
{
ëë 
var
íí 
courseReviews
íí !
=
íí" #
_unitOfWork
íí$ /
.
íí/ 0$
CourseReviewRepository
íí0 F
.
ìì 
GetAllAsync
ìì  
(
ìì  !
x
ìì! "
=>
ìì# %
x
ìì& '
.
ìì' (
CourseId
ìì( 0
==
ìì1 3"
upsertCourseTotalDto
ìì4 H
.
ììH I
CourseId
ììI Q
)
ììQ R
.
îî 

GetAwaiter
îî 
(
îî  
)
îî  !
.
ïï 
	GetResult
ïï 
(
ïï 
)
ïï  
.
ññ 
ToList
ññ 
(
ññ 
)
ññ 
;
ññ 
var
òò 
	totalRate
òò 
=
òò 
courseReviews
òò  -
.
òò- .
ToList
òò. 4
(
òò4 5
)
òò5 6
.
òò6 7
Sum
òò7 :
(
òò: ;
x
òò; <
=>
òò= ?
x
òò@ A
.
òòA B
Rate
òòB F
)
òòF G
;
òòG H
var
ôô 
avgRate
ôô 
=
ôô 
	totalRate
ôô '
/
ôô( )
courseReviews
ôô* 7
.
ôô7 8
Count
ôô8 =
;
ôô= >
course
õõ 
.
õõ 
	TotalRate
õõ  
=
õõ! "
avgRate
õõ# *
;
õõ* +
}
úú 
await
ûû 
_unitOfWork
ûû 
.
ûû 
	SaveAsync
ûû '
(
ûû' (
)
ûû( )
;
ûû) *
return
†† 
new
†† 
ResponseDTO
†† "
(
††" #
)
††# $
{
°° 
Message
¢¢ 
=
¢¢ 
$str
¢¢ <
,
¢¢< =
	IsSuccess
££ 
=
££ 
true
££  
,
££  !

StatusCode
§§ 
=
§§ 
$num
§§  
,
§§  !
Result
•• 
=
•• 
course
•• 
}
¶¶ 
;
¶¶ 
}
ßß 	
catch
®® 
(
®® 
	Exception
®® 
e
®® 
)
®® 
{
©© 	
return
™™ 
new
™™ 
ResponseDTO
™™ "
(
™™" #
)
™™# $
{
´´ 
Message
¨¨ 
=
¨¨ 
e
¨¨ 
.
¨¨ 
Message
¨¨ #
,
¨¨# $
	IsSuccess
≠≠ 
=
≠≠ 
false
≠≠ !
,
≠≠! "

StatusCode
ÆÆ 
=
ÆÆ 
$num
ÆÆ  
,
ÆÆ  !
Result
ØØ 
=
ØØ 
null
ØØ 
}
∞∞ 
;
∞∞ 
}
±± 	
}
≤≤ 
public
¥¥ 

async
¥¥ 
Task
¥¥ 
<
¥¥ 
ResponseDTO
¥¥ !
>
¥¥! ")
GetAllBookMarkedCoursesById
¥¥# >
(
¥¥> ?
Guid
¥¥? C
	studentId
¥¥D M
,
¥¥M N
string
¥¥O U
	sortOrder
¥¥V _
=
¥¥` a
$str
¥¥b h
)
¥¥h i
{
µµ 
try
∂∂ 
{
∑∑ 	
var
ππ 
studentExists
ππ 
=
ππ 
await
ππ  %
_unitOfWork
ππ& 1
.
ππ1 2
StudentRepository
ππ2 C
.
ππC D
GetAsync
ππD L
(
ππL M
s
ππM N
=>
ππO Q
s
ππR S
.
ππS T
	StudentId
ππT ]
==
ππ^ `
	studentId
ππa j
)
ππj k
!=
ππl n
null
ππo s
;
ππs t
if
∫∫ 
(
∫∫ 
!
∫∫ 
studentExists
∫∫ 
)
∫∫ 
{
ªª 
return
ºº 
new
ºº 
ResponseDTO
ºº &
{
ΩΩ 
Message
ææ 
=
ææ 
$str
ææ 1
,
ææ1 2
	IsSuccess
øø 
=
øø 
false
øø  %
,
øø% &

StatusCode
¿¿ 
=
¿¿  
$num
¿¿! $
}
¡¡ 
;
¡¡ 
}
¬¬ 
var
≈≈ "
courseBookmarksQuery
≈≈ $
=
≈≈% &
_unitOfWork
∆∆ 
.
∆∆ &
CourseBookmarkRepository
∆∆ 4
.
∆∆4 5
GetAllAsync
∆∆5 @
(
∆∆@ A
cb
∆∆A C
=>
∆∆D F
cb
∆∆G I
.
∆∆I J
	StudentId
∆∆J S
==
∆∆T V
	studentId
∆∆W `
)
∆∆` a
;
∆∆a b
var
»» 
courseBookmarks
»» 
=
»»  !
(
»»" #
await
»»# ("
courseBookmarksQuery
»») =
)
»»= >
.
»»> ?
ToList
»»? E
(
»»E F
)
»»F G
;
»»G H
switch
ÀÀ 
(
ÀÀ 
	sortOrder
ÀÀ 
.
ÀÀ 
Trim
ÀÀ "
(
ÀÀ" #
)
ÀÀ# $
.
ÀÀ$ %
ToLower
ÀÀ% ,
(
ÀÀ, -
)
ÀÀ- .
)
ÀÀ. /
{
ÃÃ 
case
ÕÕ 
$str
ÕÕ 
:
ÕÕ 
courseBookmarks
ŒŒ #
=
ŒŒ$ %
courseBookmarks
ŒŒ& 5
.
ŒŒ5 6
OrderBy
ŒŒ6 =
(
ŒŒ= >
cb
ŒŒ> @
=>
ŒŒA C
cb
ŒŒD F
.
ŒŒF G
CreatedTime
ŒŒG R
)
ŒŒR S
.
ŒŒS T
ToList
ŒŒT Z
(
ŒŒZ [
)
ŒŒ[ \
;
ŒŒ\ ]
break
œœ 
;
œœ 
case
–– 
$str
–– 
:
–– 
courseBookmarks
—— #
=
——$ %
courseBookmarks
——& 5
.
——5 6
OrderByDescending
——6 G
(
——G H
cb
——H J
=>
——K M
cb
——N P
.
——P Q
CreatedTime
——Q \
)
——\ ]
.
——] ^
ToList
——^ d
(
——d e
)
——e f
;
——f g
break
““ 
;
““ 
default
”” 
:
”” 
courseBookmarks
’’ #
=
’’$ %
courseBookmarks
’’& 5
.
’’5 6
OrderByDescending
’’6 G
(
’’G H
cb
’’H J
=>
’’K M
cb
’’N P
.
’’P Q
CreatedTime
’’Q \
)
’’\ ]
.
’’] ^
ToList
’’^ d
(
’’d e
)
’’e f
;
’’f g
break
÷÷ 
;
÷÷ 
}
◊◊ 
return
ŸŸ 
new
ŸŸ 
ResponseDTO
ŸŸ "
{
⁄⁄ 
Message
€€ 
=
€€ 
$str
€€ Q
,
€€Q R
	IsSuccess
‹‹ 
=
‹‹ 
true
‹‹  
,
‹‹  !

StatusCode
›› 
=
›› 
$num
››  
,
››  !
Result
ﬁﬁ 
=
ﬁﬁ 
courseBookmarks
ﬁﬁ (
}
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 	
catch
·· 
(
·· 
	Exception
·· 
ex
·· 
)
·· 
{
‚‚ 	
return
„„ 
new
„„ 
ResponseDTO
„„ "
{
‰‰ 
Message
ÂÂ 
=
ÂÂ 
ex
ÂÂ 
.
ÂÂ 
Message
ÂÂ $
,
ÂÂ$ %
	IsSuccess
ÊÊ 
=
ÊÊ 
false
ÊÊ !
,
ÊÊ! "

StatusCode
ÁÁ 
=
ÁÁ 
$num
ÁÁ  
}
ËË 
;
ËË 
}
ÈÈ 	
}
ÍÍ 
public
ÏÏ 

async
ÏÏ 
Task
ÏÏ 
<
ÏÏ 
ResponseDTO
ÏÏ !
>
ÏÏ! "$
CreateBookMarkedCourse
ÏÏ# 9
(
ÏÏ9 :
ClaimsPrincipal
ÏÏ: I
User
ÏÏJ N
,
ÏÏN O%
CreateCourseBookmarkDTO
ÌÌ %
createCourseBookmarkDTO
ÌÌ  7
)
ÌÌ7 8
{
ÓÓ 
try
ÔÔ 
{
 	
var
ÚÚ 
id
ÚÚ 
=
ÚÚ 
await
ÚÚ 
_unitOfWork
ÚÚ &
.
ÚÚ& '
StudentRepository
ÚÚ' 8
.
ÚÚ8 9
GetAsync
ÚÚ9 A
(
ÚÚA B
i
ÚÚB C
=>
ÚÚD F
i
ÛÛ 
.
ÛÛ 
	StudentId
ÛÛ 
==
ÛÛ %
createCourseBookmarkDTO
ÛÛ 6
.
ÛÛ6 7
	StudentId
ÛÛ7 @
)
ÛÛ@ A
;
ÛÛA B
if
ÙÙ 
(
ÙÙ 
id
ÙÙ 
==
ÙÙ 
null
ÙÙ 
)
ÙÙ 
{
ıı 
return
ˆˆ 
new
ˆˆ 
ResponseDTO
ˆˆ &
(
ˆˆ& '
)
ˆˆ' (
{
˜˜ 
Message
¯¯ 
=
¯¯ 
$str
¯¯ 1
,
¯¯1 2
	IsSuccess
˘˘ 
=
˘˘ 
false
˘˘  %
,
˘˘% &

StatusCode
˙˙ 
=
˙˙  
$num
˙˙! $
,
˙˙$ %
Result
˚˚ 
=
˚˚ 
null
˚˚ !
}
¸¸ 
;
¸¸ 
}
˝˝ 
var
ÄÄ 
course
ÄÄ 
=
ÄÄ 
await
ÄÄ 
_unitOfWork
ÄÄ *
.
ÄÄ* +&
CourseBookmarkRepository
ÄÄ+ C
.
ÄÄC D
GetAsync
ÄÄD L
(
ÄÄL M
c
ÄÄM N
=>
ÄÄO Q
c
ÅÅ 
.
ÅÅ 
CourseId
ÅÅ 
==
ÅÅ %
createCourseBookmarkDTO
ÅÅ 5
.
ÅÅ5 6
CourseId
ÅÅ6 >
&&
ÅÅ? A
c
ÅÅB C
.
ÅÅC D
	StudentId
ÅÅD M
==
ÅÅN P%
createCourseBookmarkDTO
ÅÅQ h
.
ÅÅh i
	StudentId
ÅÅi r
)
ÅÅr s
;
ÅÅs t
if
ÇÇ 
(
ÇÇ 
course
ÇÇ 
!=
ÇÇ 
null
ÇÇ 
)
ÇÇ 
{
ÉÉ 
return
ÑÑ 
new
ÑÑ 
ResponseDTO
ÑÑ &
(
ÑÑ& '
)
ÑÑ' (
{
ÖÖ 
Message
ÜÜ 
=
ÜÜ 
$str
ÜÜ <
,
ÜÜ< =
	IsSuccess
áá 
=
áá 
false
áá  %
,
áá% &

StatusCode
àà 
=
àà  
$num
àà! $
,
àà$ %
Result
ââ 
=
ââ 
null
ââ !
}
ää 
;
ää 
}
ãã 
var
éé 
courseBookmark
éé 
=
éé  
new
éé! $
CourseBookmark
éé% 3
(
éé3 4
)
éé4 5
{
èè 
	StudentId
êê 
=
êê %
createCourseBookmarkDTO
êê 3
.
êê3 4
	StudentId
êê4 =
,
êê= >
CourseId
ëë 
=
ëë %
createCourseBookmarkDTO
ëë 2
.
ëë2 3
CourseId
ëë3 ;
,
ëë; <
CreatedTime
íí 
=
íí 
DateTime
íí &
.
íí& '
UtcNow
íí' -
,
íí- .
	CreatedBy
ìì 
=
ìì 
User
ìì  
.
ìì  !
Identity
ìì! )
.
ìì) *
Name
ìì* .
,
ìì. /
}
îî 
;
îî 
await
ññ 
_unitOfWork
ññ 
.
ññ &
CourseBookmarkRepository
ññ 6
.
ññ6 7
AddAsync
ññ7 ?
(
ññ? @
courseBookmark
ññ@ N
)
ññN O
;
ññO P
await
óó 
_unitOfWork
óó 
.
óó 
	SaveAsync
óó '
(
óó' (
)
óó( )
;
óó) *
return
ôô 
new
ôô 
ResponseDTO
ôô "
(
ôô" #
)
ôô# $
{
öö 
Message
õõ 
=
õõ 
$str
õõ ;
,
õõ; <
Result
úú 
=
úú 
null
úú 
,
úú 
	IsSuccess
ùù 
=
ùù 
true
ùù  
,
ùù  !

StatusCode
ûû 
=
ûû 
$num
ûû  
}
üü 
;
üü 
}
†† 	
catch
°° 
(
°° 
	Exception
°° 
ex
°° 
)
°° 
{
¢¢ 	
return
££ 
new
££ 
ResponseDTO
££ "
{
§§ 
Message
•• 
=
•• 
ex
•• 
.
•• 
Message
•• $
,
••$ %
	IsSuccess
¶¶ 
=
¶¶ 
false
¶¶ !
,
¶¶! "

StatusCode
ßß 
=
ßß 
$num
ßß  
}
®® 
;
®® 
}
©© 	
}
™™ 
public
¨¨ 

async
¨¨ 
Task
¨¨ 
<
¨¨ 
ResponseDTO
¨¨ !
>
¨¨! "$
DeleteBookMarkedCourse
¨¨# 9
(
¨¨9 :
Guid
¨¨: >
Id
¨¨? A
)
¨¨A B
{
≠≠ 
try
ÆÆ 
{
ØØ 	
var
∞∞ 
courseBookmark
∞∞ 
=
∞∞  
await
∞∞! &
_unitOfWork
∞∞' 2
.
∞∞2 3&
CourseBookmarkRepository
∞∞3 K
.
∞∞K L
GetAsync
∞∞L T
(
∞∞T U
x
±± 
=>
±± 
x
±± 
.
±± 
Id
±± 
==
±± 
Id
±± 
)
±±  
;
±±  !
if
≥≥ 
(
≥≥ 
courseBookmark
≥≥ 
is
≥≥ !
null
≥≥" &
)
≥≥& '
{
¥¥ 
return
µµ 
new
µµ 
ResponseDTO
µµ &
{
∂∂ 
Message
∑∑ 
=
∑∑ 
$str
∑∑ :
,
∑∑: ;
	IsSuccess
∏∏ 
=
∏∏ 
false
∏∏  %
,
∏∏% &

StatusCode
ππ 
=
ππ  
$num
ππ! $
}
∫∫ 
;
∫∫ 
}
ªª 
_unitOfWork
ΩΩ 
.
ΩΩ &
CourseBookmarkRepository
ΩΩ 0
.
ΩΩ0 1
Remove
ΩΩ1 7
(
ΩΩ7 8
courseBookmark
ΩΩ8 F
)
ΩΩF G
;
ΩΩG H
await
ææ 
_unitOfWork
ææ 
.
ææ 
	SaveAsync
ææ '
(
ææ' (
)
ææ( )
;
ææ) *
return
¿¿ 
new
¿¿ 
ResponseDTO
¿¿ "
{
¡¡ 
Message
¬¬ 
=
¬¬ 
$str
¬¬ A
,
¬¬A B
	IsSuccess
√√ 
=
√√ 
true
√√  
,
√√  !

StatusCode
ƒƒ 
=
ƒƒ 
$num
ƒƒ  
}
≈≈ 
;
≈≈ 
}
∆∆ 	
catch
«« 
(
«« 
	Exception
«« 
ex
«« 
)
«« 
{
»» 	
return
…… 
new
…… 
ResponseDTO
…… "
{
   
Message
ÀÀ 
=
ÀÀ 
ex
ÀÀ 
.
ÀÀ 
Message
ÀÀ $
,
ÀÀ$ %
	IsSuccess
ÃÃ 
=
ÃÃ 
false
ÃÃ !
,
ÃÃ! "

StatusCode
ÕÕ 
=
ÕÕ 
$num
ÕÕ  
}
ŒŒ 
;
ŒŒ 
}
œœ 	
}
–– 
public
‘‘ 

async
‘‘ 
Task
‘‘ 
<
‘‘ 
ResponseDTO
‘‘ !
>
‘‘! "&
GetBestCoursesSuggestion
‘‘# ;
(
‘‘; <
)
‘‘< =
{
’’ 
try
÷÷ 
{
◊◊ 	
var
ŸŸ 
courses
ŸŸ 
=
ŸŸ 
await
ŸŸ 
_unitOfWork
ŸŸ  +
.
ŸŸ+ ,
CourseRepository
ŸŸ, <
.
ŸŸ< =
GetAllAsync
ŸŸ= H
(
ŸŸH I
)
ŸŸI J
;
ŸŸJ K
var
€€ 
bestCourses
€€ 
=
€€ 
courses
€€ %
.
‹‹ 
OrderByDescending
‹‹ "
(
‹‹" #
c
‹‹# $
=>
‹‹% '
c
‹‹( )
.
‹‹) *
TotalStudent
‹‹* 6
)
‹‹6 7
.
›› 
Take
›› 
(
›› 
$num
›› 
)
›› 
.
ﬁﬁ 
ToList
ﬁﬁ 
(
ﬁﬁ 
)
ﬁﬁ 
;
ﬁﬁ 
return
‡‡ 
new
‡‡ 
ResponseDTO
‡‡ "
{
·· 
Result
‚‚ 
=
‚‚ 
bestCourses
‚‚ $
,
‚‚$ %
Message
„„ 
=
„„ 
$str
„„ D
,
„„D E
	IsSuccess
‰‰ 
=
‰‰ 
true
‰‰  
,
‰‰  !

StatusCode
ÂÂ 
=
ÂÂ 
$num
ÂÂ  
}
ÊÊ 
;
ÊÊ 
}
ÁÁ 	
catch
ËË 
(
ËË 
	Exception
ËË 
ex
ËË 
)
ËË 
{
ÈÈ 	
return
ÍÍ 
new
ÍÍ 
ResponseDTO
ÍÍ "
{
ÎÎ 
Message
ÏÏ 
=
ÏÏ 
ex
ÏÏ 
.
ÏÏ 
Message
ÏÏ $
,
ÏÏ$ %
	IsSuccess
ÌÌ 
=
ÌÌ 
false
ÌÌ !
,
ÌÌ! "

StatusCode
ÓÓ 
=
ÓÓ 
$num
ÓÓ  
,
ÓÓ  !
Result
ÔÔ 
=
ÔÔ 
null
ÔÔ 
}
 
;
 
}
ÒÒ 	
}
ÚÚ 
public
ÙÙ 

async
ÙÙ 
Task
ÙÙ 
<
ÙÙ 
List
ÙÙ 
<
ÙÙ 
Category
ÙÙ #
>
ÙÙ# $
>
ÙÙ$ %&
GetTopTrendingCategories
ÙÙ& >
(
ÙÙ> ?
)
ÙÙ? @
{
ıı 
try
ˆˆ 
{
˜˜ 	
var
˘˘ 
courses
˘˘ 
=
˘˘ 
await
˘˘ 
_unitOfWork
˘˘  +
.
˘˘+ ,
CourseRepository
˘˘, <
.
˘˘< =
GetAllAsync
˘˘= H
(
˘˘H I
filter
˙˙ 
:
˙˙ 
x
˙˙ 
=>
˙˙ 
x
˙˙ 
.
˙˙ 
TotalStudent
˙˙ +
.
˙˙+ ,
HasValue
˙˙, 4
)
˚˚ 
;
˚˚ 
var
˛˛ 
courseVersionIds
˛˛  
=
˛˛! "
courses
˛˛# *
.
˛˛* +
Select
˛˛+ 1
(
˛˛1 2
c
˛˛2 3
=>
˛˛4 6
c
˛˛7 8
.
˛˛8 9
CourseVersionId
˛˛9 H
)
˛˛H I
.
˛˛I J
Distinct
˛˛J R
(
˛˛R S
)
˛˛S T
;
˛˛T U
var
ˇˇ 
courseVersions
ˇˇ 
=
ˇˇ  
await
ˇˇ! &
_unitOfWork
ˇˇ' 2
.
ˇˇ2 3%
CourseVersionRepository
ˇˇ3 J
.
ˇˇJ K
GetAllAsync
ˇˇK V
(
ˇˇV W
filter
Ä	Ä	 
:
Ä	Ä	 
cv
Ä	Ä	 
=>
Ä	Ä	 
courseVersionIds
Ä	Ä	 .
.
Ä	Ä	. /
Contains
Ä	Ä	/ 7
(
Ä	Ä	7 8
cv
Ä	Ä	8 :
.
Ä	Ä	: ;
Id
Ä	Ä	; =
)
Ä	Ä	= >
,
Ä	Ä	> ?
includeProperties
Å	Å	 !
:
Å	Å	! "
$str
Å	Å	# -
)
Ç	Ç	 
;
Ç	Ç	 
var
Ö	Ö	 #
categoryStudentCounts
Ö	Ö	 %
=
Ö	Ö	& '
courseVersions
Ö	Ö	( 6
.
Ü	Ü	 
GroupBy
Ü	Ü	 
(
Ü	Ü	 
cv
Ü	Ü	 
=>
Ü	Ü	 
cv
Ü	Ü	 !
.
Ü	Ü	! "

CategoryId
Ü	Ü	" ,
)
Ü	Ü	, -
.
á	á	 
Select
á	á	 
(
á	á	 
g
á	á	 
=>
á	á	 
new
á	á	  
{
à	à	 

CategoryId
â	â	 
=
â	â	  
g
â	â	! "
.
â	â	" #
Key
â	â	# &
,
â	â	& '
TotalStudents
ä	ä	 !
=
ä	ä	" #
courses
ä	ä	$ +
.
ã	ã	 
Where
ã	ã	 
(
ã	ã	 
c
ã	ã	  
=>
ã	ã	! #
c
ã	ã	$ %
.
ã	ã	% &
CourseVersionId
ã	ã	& 5
.
ã	ã	5 6
HasValue
ã	ã	6 >
&&
ã	ã	? A
g
ã	ã	B C
.
ã	ã	C D
Select
ã	ã	D J
(
ã	ã	J K
cv
ã	ã	K M
=>
ã	ã	N P
cv
ã	ã	Q S
.
ã	ã	S T
Id
ã	ã	T V
)
ã	ã	V W
.
ã	ã	W X
Contains
ã	ã	X `
(
ã	ã	` a
c
ã	ã	a b
.
ã	ã	b c
CourseVersionId
ã	ã	c r
.
ã	ã	r s
Value
ã	ã	s x
)
ã	ã	x y
)
ã	ã	y z
.
å	å	 
Sum
å	å	 
(
å	å	 
c
å	å	 
=>
å	å	 !
c
å	å	" #
.
å	å	# $
TotalStudent
å	å	$ 0
.
å	å	0 1
GetValueOrDefault
å	å	1 B
(
å	å	B C
)
å	å	C D
)
å	å	D E
}
ç	ç	 
)
ç	ç	 
.
é	é	 
OrderByDescending
é	é	 "
(
é	é	" #
x
é	é	# $
=>
é	é	% '
x
é	é	( )
.
é	é	) *
TotalStudents
é	é	* 7
)
é	é	7 8
.
è	è	 
Take
è	è	 
(
è	è	 
$num
è	è	 
)
è	è	 
.
ê	ê	 
ToList
ê	ê	 
(
ê	ê	 
)
ê	ê	 
;
ê	ê	 
var
ì	ì	 
categoryIds
ì	ì	 
=
ì	ì	 #
categoryStudentCounts
ì	ì	 3
.
ì	ì	3 4
Select
ì	ì	4 :
(
ì	ì	: ;
x
ì	ì	; <
=>
ì	ì	= ?
x
ì	ì	@ A
.
ì	ì	A B

CategoryId
ì	ì	B L
)
ì	ì	L M
.
ì	ì	M N
ToList
ì	ì	N T
(
ì	ì	T U
)
ì	ì	U V
;
ì	ì	V W
var
î	î	 

categories
î	î	 
=
î	î	 
await
î	î	 "
_unitOfWork
î	î	# .
.
î	î	. / 
CategoryRepository
î	î	/ A
.
î	î	A B
GetAllAsync
î	î	B M
(
î	î	M N
filter
ï	ï	 
:
ï	ï	 
c
ï	ï	 
=>
ï	ï	 
categoryIds
ï	ï	 (
.
ï	ï	( )
Contains
ï	ï	) 1
(
ï	ï	1 2
c
ï	ï	2 3
.
ï	ï	3 4
Id
ï	ï	4 6
)
ï	ï	6 7
)
ñ	ñ	 
;
ñ	ñ	 
return
ò	ò	 

categories
ò	ò	 
.
ò	ò	 
ToList
ò	ò	 $
(
ò	ò	$ %
)
ò	ò	% &
;
ò	ò	& '
}
ô	ô	 	
catch
ö	ö	 
(
ö	ö	 
	Exception
ö	ö	 
ex
ö	ö	 
)
ö	ö	 
{
õ	õ	 	
throw
ù	ù	 
new
ù	ù	 
	Exception
ù	ù	 
(
ù	ù	  
$str
ù	ù	  V
,
ù	ù	V W
ex
ù	ù	X Z
)
ù	ù	Z [
;
ù	ù	[ \
}
û	û	 	
}
ü	ü	 
public
†	†	 

async
†	†	 
Task
†	†	 
<
†	†	 
ResponseDTO
†	†	 !
>
†	†	! "/
!GetTopCoursesByTrendingCategories
†	†	# D
(
†	†	D E
)
†	†	E F
{
°	°	 
try
¢	¢	 
{
£	£	 	
var
•	•	  
trendingCategories
•	•	 "
=
•	•	# $
await
•	•	% *&
GetTopTrendingCategories
•	•	+ C
(
•	•	C D
)
•	•	D E
;
•	•	E F
var
ß	ß	 
coursesByCategory
ß	ß	 !
=
ß	ß	" #
new
ß	ß	$ '

Dictionary
ß	ß	( 2
<
ß	ß	2 3
string
ß	ß	3 9
,
ß	ß	9 :
List
ß	ß	; ?
<
ß	ß	? @
Course
ß	ß	@ F
>
ß	ß	F G
>
ß	ß	G H
(
ß	ß	H I
)
ß	ß	I J
;
ß	ß	J K
foreach
©	©	 
(
©	©	 
var
©	©	 
category
©	©	 !
in
©	©	" $ 
trendingCategories
©	©	% 7
)
©	©	7 8
{
™	™	 
var
¨	¨	 &
courseVersionsInCategory
¨	¨	 ,
=
¨	¨	- .
await
¨	¨	/ 4
_unitOfWork
¨	¨	5 @
.
¨	¨	@ A%
CourseVersionRepository
¨	¨	A X
.
¨	¨	X Y
GetAllAsync
¨	¨	Y d
(
¨	¨	d e
filter
≠	≠	 
:
≠	≠	 
cv
≠	≠	 
=>
≠	≠	 !
cv
≠	≠	" $
.
≠	≠	$ %

CategoryId
≠	≠	% /
==
≠	≠	0 2
category
≠	≠	3 ;
.
≠	≠	; <
Id
≠	≠	< >
)
Æ	Æ	 
;
Æ	Æ	 
var
∞	∞	 
courseVersionIds
∞	∞	 $
=
∞	∞	% &&
courseVersionsInCategory
∞	∞	' ?
.
±	±	 
Select
±	±	 
(
±	±	 
cv
±	±	 
=>
±	±	 !
cv
±	±	" $
.
±	±	$ %
Id
±	±	% '
)
±	±	' (
.
≤	≤	 
Distinct
≤	≤	 
(
≤	≤	 
)
≤	≤	 
.
≥	≥	 
ToList
≥	≥	 
(
≥	≥	 
)
≥	≥	 
;
≥	≥	 
var
∑	∑	 

allCourses
∑	∑	 
=
∑	∑	  
await
∑	∑	! &
_unitOfWork
∑	∑	' 2
.
∑	∑	2 3
CourseRepository
∑	∑	3 C
.
∑	∑	C D
GetAllAsync
∑	∑	D O
(
∑	∑	O P
filter
∏	∏	 
:
∏	∏	 
c
∏	∏	 
=>
∏	∏	  
c
∏	∏	! "
.
∏	∏	" #
TotalStudent
∏	∏	# /
.
∏	∏	/ 0
HasValue
∏	∏	0 8
)
π	π	 
;
π	π	 
var
º	º	 "
topCoursesInCategory
º	º	 (
=
º	º	) *

allCourses
º	º	+ 5
.
Ω	Ω	 
OrderByDescending
Ω	Ω	 &
(
Ω	Ω	& '
c
Ω	Ω	' (
=>
Ω	Ω	) +
c
Ω	Ω	, -
.
Ω	Ω	- .
TotalStudent
Ω	Ω	. :
.
Ω	Ω	: ;
GetValueOrDefault
Ω	Ω	; L
(
Ω	Ω	L M
)
Ω	Ω	M N
)
Ω	Ω	N O
.
æ	æ	 
Take
æ	æ	 
(
æ	æ	 
$num
æ	æ	 
)
æ	æ	 
.
ø	ø	 
ToList
ø	ø	 
(
ø	ø	 
)
ø	ø	 
;
ø	ø	 
coursesByCategory
¡	¡	 !
[
¡	¡	! "
category
¡	¡	" *
.
¡	¡	* +
Name
¡	¡	+ /
]
¡	¡	/ 0
=
¡	¡	1 2"
topCoursesInCategory
¡	¡	3 G
;
¡	¡	G H
}
¬	¬	 
return
ƒ	ƒ	 
new
ƒ	ƒ	 
ResponseDTO
ƒ	ƒ	 "
{
≈	≈	 
Result
∆	∆	 
=
∆	∆	 
coursesByCategory
∆	∆	 *
,
∆	∆	* +
Message
«	«	 
=
«	«	 
$str
«	«	 O
,
«	«	O P
	IsSuccess
»	»	 
=
»	»	 
true
»	»	  
,
»	»	  !

StatusCode
…	…	 
=
…	…	 
$num
…	…	  
}
 	 	 
;
 	 	 
}
À	À	 	
catch
Ã	Ã	 
(
Ã	Ã	 
	Exception
Ã	Ã	 
ex
Ã	Ã	 
)
Ã	Ã	 
{
Õ	Õ	 	
return
Œ	Œ	 
new
Œ	Œ	 
ResponseDTO
Œ	Œ	 "
{
œ	œ	 
Message
–	–	 
=
–	–	 
ex
–	–	 
.
–	–	 
Message
–	–	 $
,
–	–	$ %
	IsSuccess
—	—	 
=
—	—	 
false
—	—	 !
,
—	—	! "

StatusCode
“	“	 
=
“	“	 
$num
“	“	  
,
“	“	  !
Result
”	”	 
=
”	”	 
null
”	”	 
}
‘	‘	 
;
‘	‘	 
}
’	’	 	
}
÷	÷	 
public
◊	◊	 

async
◊	◊	 
Task
◊	◊	 
<
◊	◊	 
ResponseDTO
◊	◊	 !
>
◊	◊	! " 
GetTopRatedCourses
◊	◊	# 5
(
◊	◊	5 6
)
◊	◊	6 7
{
ÿ	ÿ	 
try
Ÿ	Ÿ	 
{
⁄	⁄	 	
var
‹	‹	 
courses
‹	‹	 
=
‹	‹	 
await
‹	‹	 
_unitOfWork
‹	‹	  +
.
‹	‹	+ ,
CourseRepository
‹	‹	, <
.
‹	‹	< =
GetAllAsync
‹	‹	= H
(
‹	‹	H I
filter
›	›	 
:
›	›	 
c
›	›	 
=>
›	›	 
c
›	›	 
.
›	›	 
	TotalRate
›	›	 (
.
›	›	( )
HasValue
›	›	) 1
)
ﬁ	ﬁ	 
;
ﬁ	ﬁ	 
var
·	·	 
topRatedCourses
·	·	 
=
·	·	  !
courses
·	·	" )
.
‚	‚	 
OrderByDescending
‚	‚	 "
(
‚	‚	" #
c
‚	‚	# $
=>
‚	‚	% '
c
‚	‚	( )
.
‚	‚	) *
	TotalRate
‚	‚	* 3
.
‚	‚	3 4
GetValueOrDefault
‚	‚	4 E
(
‚	‚	E F
)
‚	‚	F G
)
‚	‚	G H
.
„	„	 
Take
„	„	 
(
„	„	 
$num
„	„	 
)
„	„	 
.
‰	‰	 
ToList
‰	‰	 
(
‰	‰	 
)
‰	‰	 
;
‰	‰	 
return
Ê	Ê	 
new
Ê	Ê	 
ResponseDTO
Ê	Ê	 "
{
Á	Á	 
Result
Ë	Ë	 
=
Ë	Ë	 
topRatedCourses
Ë	Ë	 (
,
Ë	Ë	( )
Message
È	È	 
=
È	È	 
$str
È	È	 >
,
È	È	> ?
	IsSuccess
Í	Í	 
=
Í	Í	 
true
Í	Í	  
,
Í	Í	  !

StatusCode
Î	Î	 
=
Î	Î	 
$num
Î	Î	  
}
Ï	Ï	 
;
Ï	Ï	 
}
Ì	Ì	 	
catch
Ó	Ó	 
(
Ó	Ó	 
	Exception
Ó	Ó	 
ex
Ó	Ó	 
)
Ó	Ó	 
{
Ô	Ô	 	
return
		 
new
		 
ResponseDTO
		 "
{
Ò	Ò	 
Message
Ú	Ú	 
=
Ú	Ú	 
ex
Ú	Ú	 
.
Ú	Ú	 
Message
Ú	Ú	 $
,
Ú	Ú	$ %
	IsSuccess
Û	Û	 
=
Û	Û	 
false
Û	Û	 !
,
Û	Û	! "

StatusCode
Ù	Ù	 
=
Ù	Ù	 
$num
Ù	Ù	  
,
Ù	Ù	  !
Result
ı	ı	 
=
ı	ı	 
null
ı	ı	 
}
ˆ	ˆ	 
;
ˆ	ˆ	 
}
˜	˜	 	
}
¯	¯	 
}˝	˝	 ‡ˆ
tD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\CourseSectionVersionService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class '
CourseSectionVersionService (
:) *(
ICourseSectionVersionService+ G
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly )
ISectionDetailsVersionService 2)
_sectionDetailsVersionService3 P
;P Q
private 
IMapper 
_mapper 
; 
public 
'
CourseSectionVersionService &
( 
IUnitOfWork 

unitOfWork 
, 
IMapper 
mapper 
, )
ISectionDetailsVersionService %(
sectionDetailsVersionService& B
) 
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; )
_sectionDetailsVersionService %
=& '(
sectionDetailsVersionService( D
;D E
} 
public   

async   
Task   
<   
ResponseDTO   !
>  ! "%
CloneCourseSectionVersion  # <
(!! 
ClaimsPrincipal"" 
User"" 
,"" (
CloneCourseSectionVersionDTO## $(
cloneCourseSectionVersionDto##% A
)$$ 
{%% 
try&& 
{'' 	
var(( !
courseSectionVersions(( %
=((& '
await)) 
_unitOfWork)) !
.))! "*
CourseSectionVersionRepository))" @
.))@ A8
,GetCourseSectionVersionsOfCourseVersionAsync))A m
(** (
cloneCourseSectionVersionDto++ 0
.++0 1
OldCourseVersionId++1 C
,++C D
asNoTracking,,  
:,,  !
true,," &
)-- 
;-- 
if// 
(// !
courseSectionVersions// %
.//% &
IsNullOrEmpty//& 3
(//3 4
)//4 5
)//5 6
{00 
return11 
new11 
ResponseDTO11 &
(11& '
)11' (
{22 
	IsSuccess33 
=33 
false33  %
,33% &

StatusCode44 
=44  
$num44! $
,44$ %
Result55 
=55 
null55 !
,55! "
Message66 
=66 
$str66 G
}77 
;77 
}88 
var:: +
cloneSectionsDetailsVersionsDto:: /
=::0 1
new::2 5
List::6 :
<::: ;*
CloneSectionsDetailsVersionDTO::; Y
>::Y Z
(::Z [
)::[ \
;::\ ]
foreach<< 
(<< 
var<<  
courseSectionVersion<< -
in<<. 0!
courseSectionVersions<<1 F
)<<F G
{== 
var>> *
cloneSectionsDetailsVersionDto>> 2
=>>3 4
new>>5 8*
CloneSectionsDetailsVersionDTO>>9 W
(>>W X
)>>X Y
;>>Y Z*
cloneSectionsDetailsVersionDto@@ .
.@@. /%
OldCourseSectionVersionId@@/ H
=@@I J 
courseSectionVersion@@K _
.@@_ `
Id@@` b
;@@b c 
courseSectionVersionAA $
.AA$ %
IdAA% '
=AA( )
GuidAA* .
.AA. /
NewGuidAA/ 6
(AA6 7
)AA7 8
;AA8 9*
cloneSectionsDetailsVersionDtoBB .
.BB. /%
NewCourseSectionVersionIdBB/ H
=BBI J 
courseSectionVersionBBK _
.BB_ `
IdBB` b
;BBb c 
courseSectionVersionDD $
.DD$ %
CourseVersionIdDD% 4
=DD5 6(
cloneCourseSectionVersionDtoDD7 S
.DDS T
NewCourseVersionIdDDT f
;DDf g+
cloneSectionsDetailsVersionsDtoFF /
.FF/ 0
AddFF0 3
(FF3 4*
cloneSectionsDetailsVersionDtoFF4 R
)FFR S
;FFS T
}GG 
awaitII 
_unitOfWorkII 
.II *
CourseSectionVersionRepositoryII <
.II< =
AddRangeAsyncII= J
(IIJ K!
courseSectionVersionsIIK `
)II` a
;IIa b
awaitJJ 
_unitOfWorkJJ 
.JJ 
	SaveAsyncJJ '
(JJ' (
)JJ( )
;JJ) *
foreachMM 
(MM 
varMM *
cloneSectionsDetailsVersionDtoMM 7
inMM8 :+
cloneSectionsDetailsVersionsDtoMM; Z
)MMZ [
{NN 
varOO 
responseDtoOO 
=OO  !
awaitPP )
_sectionDetailsVersionServicePP 7
.PP7 8'
CloneSectionsDetailsVersionPP8 S
(QQ 
UserRR 
,RR 
newSS *
CloneSectionsDetailsVersionDTOSS :
(SS: ;
)SS; <
{TT %
OldCourseSectionVersionIdUU 5
=UU6 7*
cloneSectionsDetailsVersionDtoUU8 V
.UUV W%
OldCourseSectionVersionIdUUW p
,UUp q%
NewCourseSectionVersionIdVV 5
=VV6 7*
cloneSectionsDetailsVersionDtoVV8 V
.VVV W%
NewCourseSectionVersionIdVVW p
,VVp q
}WW 
)XX 
;XX 
ifYY 
(YY 
responseDtoYY 
.YY  

StatusCodeYY  *
==YY+ -
$numYY. 1
)YY1 2
{ZZ 
return[[ 
responseDto[[ &
;[[& '
}\\ 
}]] 
return__ 
new__ 
ResponseDTO__ "
(__" #
)__# $
{`` 
	IsSuccessaa 
=aa 
trueaa  
,aa  !

StatusCodebb 
=bb 
$numbb  
,bb  !
Messagecc 
=cc 
$strcc O
,ccO P
Resultdd 
=dd 
nulldd 
}ee 
;ee 
}ff 	
catchgg 
(gg 
	Exceptiongg 
egg 
)gg 
{hh 	
returnii 
newii 
ResponseDTOii "
(ii" #
)ii# $
{jj 
	IsSuccesskk 
=kk 
falsekk !
,kk! "

StatusCodell 
=ll 
$numll  
,ll  !
Messagemm 
=mm 
emm 
.mm 
Messagemm #
,mm# $
Resultnn 
=nn 
nullnn 
}oo 
;oo 
}pp 	
}qq 
publicss 

asyncss 
Taskss 
<ss 
ResponseDTOss !
>ss! "
GetCourseSectionsss# 4
(tt 
ClaimsPrincipaluu 
Useruu 
,uu 
Guidvv 
?vv 
courseVersionIdvv 
,vv 
stringww 
?ww 
filterOnww 
,ww 
stringxx 
?xx 
filterQueryxx 
,xx 
stringyy 
?yy 
sortByyy 
,yy 
intzz 

pageNumberzz 
,zz 
int{{ 
pageSize{{ 
)|| 
{}} 
try~~ 
{ 	
var
ÅÅ 
userRole
ÅÅ 
=
ÅÅ 
User
ÅÅ 
.
ÅÅ  
Claims
ÅÅ  &
.
ÅÅ& '
FirstOrDefault
ÅÅ' 5
(
ÅÅ5 6
x
ÅÅ6 7
=>
ÅÅ8 :
x
ÅÅ; <
.
ÅÅ< =
Type
ÅÅ= A
==
ÅÅB D

ClaimTypes
ÅÅE O
.
ÅÅO P
Role
ÅÅP T
)
ÅÅT U
?
ÅÅU V
.
ÅÅV W
Value
ÅÅW \
;
ÅÅ\ ]
IEnumerable
ÉÉ 
<
ÉÉ "
CourseSectionVersion
ÉÉ ,
>
ÉÉ, -
sectionVersions
ÉÉ. =
;
ÉÉ= >
if
ÖÖ 
(
ÖÖ 
userRole
ÖÖ 
==
ÖÖ 
StaticUserRoles
ÖÖ +
.
ÖÖ+ ,
Admin
ÖÖ, 1
)
ÖÖ1 2
{
ÜÜ 
sectionVersions
àà 
=
àà  !
await
àà" '
_unitOfWork
àà( 3
.
àà3 4,
CourseSectionVersionRepository
àà4 R
.
ààR S
GetAllAsync
ààS ^
(
àà^ _
x
àà_ `
=>
ààa c
x
ââ 
.
ââ 
CourseVersionId
ââ %
==
ââ& (
courseVersionId
ââ) 8
)
ââ8 9
;
ââ9 :
}
ää 
else
ãã 
{
åå 
sectionVersions
éé 
=
éé  !
await
éé" '
_unitOfWork
éé( 3
.
éé3 4,
CourseSectionVersionRepository
éé4 R
.
ééR S
GetAllAsync
ééS ^
(
éé^ _
x
éé_ `
=>
ééa c
x
èè 
.
èè 
CourseVersionId
èè %
==
èè& (
courseVersionId
èè) 8
&&
èè9 ;
x
èè< =
.
èè= >
CurrentStatus
èè> K
<=
èèL N
StaticStatus
èèO [
.
èè[ \
Category
èè\ d
.
èèd e
	Activated
èèe n
)
èèn o
;
èèo p
}
êê 
if
ìì 
(
ìì 
!
ìì 
sectionVersions
ìì  
.
ìì  !
Any
ìì! $
(
ìì$ %
)
ìì% &
)
ìì& '
{
îî 
return
ïï 
new
ïï 
ResponseDTO
ïï &
(
ïï& '
)
ïï' (
{
ññ 
Message
óó 
=
óó 
$str
óó <
,
óó< =
	IsSuccess
òò 
=
òò 
true
òò  $
,
òò$ %

StatusCode
ôô 
=
ôô  
$num
ôô! $
,
ôô$ %
Result
öö 
=
öö 
sectionVersions
öö ,
}
õõ 
;
õõ 
}
úú 
var
ûû 
listSections
ûû 
=
ûû 
sectionVersions
ûû .
.
ûû. /
ToList
ûû/ 5
(
ûû5 6
)
ûû6 7
;
ûû7 8
if
°° 
(
°° 
!
°° 
string
°° 
.
°° 
IsNullOrEmpty
°° %
(
°°% &
filterOn
°°& .
)
°°. /
&&
°°0 2
!
°°3 4
string
°°4 :
.
°°: ;
IsNullOrEmpty
°°; H
(
°°H I
filterQuery
°°I T
)
°°T U
)
°°U V
{
¢¢ 
switch
££ 
(
££ 
filterOn
££  
.
££  !
Trim
££! %
(
££% &
)
££& '
.
££' (
ToLower
££( /
(
££/ 0
)
££0 1
)
££1 2
{
§§ 
case
•• 
$str
••  
:
••  !
listSections
¶¶ $
=
¶¶% &
listSections
¶¶' 3
.
¶¶3 4
Where
¶¶4 9
(
¶¶9 :
x
¶¶: ;
=>
¶¶< >
x
ßß 
.
ßß 
Title
ßß #
.
ßß# $
Contains
ßß$ ,
(
ßß, -
filterQuery
ßß- 8
,
ßß8 9
StringComparison
ßß: J
.
ßßJ K&
CurrentCultureIgnoreCase
ßßK c
)
ßßc d
)
ßßd e
.
ßße f
ToList
ßßf l
(
ßßl m
)
ßßm n
;
ßßn o
break
®® 
;
®® 
case
©© 
$str
©© &
:
©©& '
listSections
™™ $
=
™™% &
listSections
™™' 3
.
™™3 4
Where
™™4 9
(
™™9 :
x
™™: ;
=>
™™< >
x
´´ 
.
´´ 
Description
´´ )
.
´´) *
Contains
´´* 2
(
´´2 3
filterQuery
´´3 >
,
´´> ?
StringComparison
´´@ P
.
´´P Q&
CurrentCultureIgnoreCase
´´Q i
)
´´i j
)
´´j k
.
´´k l
ToList
´´l r
(
´´r s
)
´´s t
;
´´t u
break
¨¨ 
;
¨¨ 
case
≠≠ 
$str
≠≠ (
:
≠≠( )
if
ÆÆ 
(
ÆÆ 
int
ÆÆ 
.
ÆÆ  
TryParse
ÆÆ  (
(
ÆÆ( )
filterQuery
ÆÆ) 4
,
ÆÆ4 5
out
ÆÆ6 9
var
ÆÆ: =
status
ÆÆ> D
)
ÆÆD E
)
ÆÆE F
{
ØØ 
listSections
∞∞ (
=
∞∞) *
listSections
∞∞+ 7
.
∞∞7 8
Where
∞∞8 =
(
∞∞= >
x
∞∞> ?
=>
∞∞@ B
x
∞∞C D
.
∞∞D E
CurrentStatus
∞∞E R
==
∞∞S U
status
∞∞V \
)
∞∞\ ]
.
∞∞] ^
ToList
∞∞^ d
(
∞∞d e
)
∞∞e f
;
∞∞f g
}
±± 
break
≥≥ 
;
≥≥ 
default
¥¥ 
:
¥¥ 
break
µµ 
;
µµ 
}
∂∂ 
}
∑∑ 
if
∫∫ 
(
∫∫ 
!
∫∫ 
string
∫∫ 
.
∫∫ 
IsNullOrEmpty
∫∫ %
(
∫∫% &
sortBy
∫∫& ,
)
∫∫, -
)
∫∫- .
{
ªª 
switch
ºº 
(
ºº 
sortBy
ºº 
.
ºº 
Trim
ºº #
(
ºº# $
)
ºº$ %
.
ºº% &
ToLower
ºº& -
(
ºº- .
)
ºº. /
)
ºº/ 0
{
ΩΩ 
case
ææ 
$str
ææ  
:
ææ  !
listSections
øø $
=
øø% &
listSections
øø' 3
.
øø3 4
OrderBy
øø4 ;
(
øø; <
x
øø< =
=>
øø> @
x
øøA B
.
øøB C
Title
øøC H
)
øøH I
.
øøI J
ToList
øøJ P
(
øøP Q
)
øøQ R
;
øøR S
break
¿¿ 
;
¿¿ 
case
¡¡ 
$str
¡¡ &
:
¡¡& '
listSections
¬¬ $
=
¬¬% &
listSections
¬¬' 3
.
¬¬3 4
OrderBy
¬¬4 ;
(
¬¬; <
x
¬¬< =
=>
¬¬> @
x
¬¬A B
.
¬¬B C
Description
¬¬C N
)
¬¬N O
.
¬¬O P
ToList
¬¬P V
(
¬¬V W
)
¬¬W X
;
¬¬X Y
break
√√ 
;
√√ 
case
ƒƒ 
$str
ƒƒ (
:
ƒƒ( )
listSections
≈≈ $
=
≈≈% &
listSections
≈≈' 3
.
≈≈3 4
OrderBy
≈≈4 ;
(
≈≈; <
x
≈≈< =
=>
≈≈> @
x
≈≈A B
.
≈≈B C
CurrentStatus
≈≈C P
)
≈≈P Q
.
≈≈Q R
ToList
≈≈R X
(
≈≈X Y
)
≈≈Y Z
;
≈≈Z [
break
∆∆ 
;
∆∆ 
default
«« 
:
«« 
break
»» 
;
»» 
}
…… 
}
   
else
ÀÀ 
{
ÃÃ 
listSections
ŒŒ 
=
ŒŒ 
listSections
ŒŒ +
.
ŒŒ+ ,
OrderBy
ŒŒ, 3
(
ŒŒ3 4
x
ŒŒ4 5
=>
ŒŒ6 8
x
ŒŒ9 :
.
ŒŒ: ;
Title
ŒŒ; @
)
ŒŒ@ A
.
ŒŒA B
ToList
ŒŒB H
(
ŒŒH I
)
ŒŒI J
;
ŒŒJ K
}
œœ 
if
““ 
(
““ 

pageNumber
““ 
>
““ 
$num
““ 
&&
““ !
pageSize
““" *
>
““+ ,
$num
““- .
)
““. /
{
”” 
var
‘‘ 

skipResult
‘‘ 
=
‘‘  
(
‘‘! "

pageNumber
‘‘" ,
-
‘‘- .
$num
‘‘/ 0
)
‘‘0 1
*
‘‘2 3
pageSize
‘‘4 <
;
‘‘< =
listSections
’’ 
=
’’ 
listSections
’’ +
.
’’+ ,
Skip
’’, 0
(
’’0 1

skipResult
’’1 ;
)
’’; <
.
’’< =
Take
’’= A
(
’’A B
pageSize
’’B J
)
’’J K
.
’’K L
ToList
’’L R
(
’’R S
)
’’S T
;
’’T U
}
÷÷ 
var
ŸŸ 
sectionsDto
ŸŸ 
=
ŸŸ 
listSections
ŸŸ *
.
ŸŸ* +
Select
ŸŸ+ 1
(
ŸŸ1 2
section
ŸŸ2 9
=>
ŸŸ: <
new
ŸŸ= @
GetAllSectionsDTO
ŸŸA R
{
⁄⁄ 
Id
€€ 
=
€€ 
section
€€ 
.
€€ 
Id
€€ 
,
€€  
Title
‹‹ 
=
‹‹ 
section
‹‹ 
.
‹‹  
Title
‹‹  %
,
‹‹% &
Description
›› 
=
›› 
section
›› %
.
››% &
Description
››& 1
,
››1 2
CurrentStatus
ﬁﬁ 
=
ﬁﬁ 
(
ﬁﬁ  !
int
ﬁﬁ! $
)
ﬁﬁ$ %
section
ﬁﬁ% ,
.
ﬁﬁ, -
CurrentStatus
ﬁﬁ- :
}
ﬂﬂ 
)
ﬂﬂ 
.
ﬂﬂ 
ToList
ﬂﬂ 
(
ﬂﬂ 
)
ﬂﬂ 
;
ﬂﬂ 
return
·· 
new
·· 
ResponseDTO
·· "
(
··" #
)
··# $
{
‚‚ 
Message
„„ 
=
„„ 
$str
„„ D
,
„„D E
	IsSuccess
‰‰ 
=
‰‰ 
true
‰‰  
,
‰‰  !

StatusCode
ÂÂ 
=
ÂÂ 
$num
ÂÂ  
,
ÂÂ  !
Result
ÊÊ 
=
ÊÊ 
sectionsDto
ÊÊ $
}
ÁÁ 
;
ÁÁ 
}
ËË 	
catch
ÈÈ 
(
ÈÈ 
	Exception
ÈÈ 
e
ÈÈ 
)
ÈÈ 
{
ÍÍ 	
return
ÎÎ 
new
ÎÎ 
ResponseDTO
ÎÎ "
(
ÎÎ" #
)
ÎÎ# $
{
ÏÏ 
Message
ÌÌ 
=
ÌÌ 
e
ÌÌ 
.
ÌÌ 
Message
ÌÌ #
,
ÌÌ# $
Result
ÓÓ 
=
ÓÓ 
null
ÓÓ 
,
ÓÓ 
	IsSuccess
ÔÔ 
=
ÔÔ 
false
ÔÔ !
,
ÔÔ! "

StatusCode
 
=
 
$num
  
}
ÒÒ 
;
ÒÒ 
}
ÚÚ 	
}
ÛÛ 
public
ıı 

async
ıı 
Task
ıı 
<
ıı 
ResponseDTO
ıı !
>
ıı! "
GetCourseSection
ıı# 3
(
ˆˆ 
ClaimsPrincipal
˜˜ 
User
˜˜ 
,
˜˜ 
Guid
¯¯ $
courseSectionVersionId
¯¯ #
)
˘˘ 
{
˙˙ 
try
˚˚ 
{
¸¸ 	
var
˝˝ "
courseSectionVersion
˝˝ $
=
˝˝% &
await
˛˛ 
_unitOfWork
˛˛ !
.
˛˛! ",
CourseSectionVersionRepository
˛˛" @
.
˛˛@ A
GetAsync
˛˛A I
(
˛˛I J
c
˛˛J K
=>
˛˛L N
c
ˇˇ 
.
ˇˇ 
Id
ˇˇ 
==
ˇˇ $
courseSectionVersionId
ˇˇ 2
)
ˇˇ2 3
;
ˇˇ3 4
if
ÅÅ 
(
ÅÅ "
courseSectionVersion
ÅÅ $
is
ÅÅ% '
null
ÅÅ( ,
)
ÅÅ, -
{
ÇÇ 
return
ÉÉ 
new
ÉÉ 
ResponseDTO
ÉÉ &
(
ÉÉ& '
)
ÉÉ' (
{
ÑÑ 
Result
ÖÖ 
=
ÖÖ 
$str
ÖÖ 
,
ÖÖ  
Message
ÜÜ 
=
ÜÜ 
$str
ÜÜ C
,
ÜÜC D
	IsSuccess
áá 
=
áá 
true
áá  $
,
áá$ %

StatusCode
àà 
=
àà  
$num
àà! $
}
ââ 
;
ââ 
}
ää 
var
åå %
courseSectionVersionDto
åå '
=
åå( )
_mapper
åå* 1
.
åå1 2
Map
åå2 5
<
åå5 6!
GetCourseSectionDTO
åå6 I
>
ååI J
(
ååJ K"
courseSectionVersion
ååK _
)
åå_ `
;
åå` a
return
éé 
new
éé 
ResponseDTO
éé "
(
éé" #
)
éé# $
{
èè 
Result
êê 
=
êê %
courseSectionVersionDto
êê 0
,
êê0 1
Message
ëë 
=
ëë 
$str
ëë C
,
ëëC D
	IsSuccess
íí 
=
íí 
true
íí  
,
íí  !

StatusCode
ìì 
=
ìì 
$num
ìì  
}
îî 
;
îî 
}
ïï 	
catch
ññ 
(
ññ 
	Exception
ññ 
e
ññ 
)
ññ 
{
óó 	
return
òò 
new
òò 
ResponseDTO
òò "
(
òò" #
)
òò# $
{
ôô 
Result
öö 
=
öö 
null
öö 
,
öö 
Message
õõ 
=
õõ 
e
õõ 
.
õõ 
Message
õõ #
,
õõ# $
	IsSuccess
úú 
=
úú 
true
úú  
,
úú  !

StatusCode
ùù 
=
ùù 
$num
ùù  
}
ûû 
;
ûû 
}
üü 	
}
†† 
public
¢¢ 

async
¢¢ 
Task
¢¢ 
<
¢¢ 
ResponseDTO
¢¢ !
>
¢¢! "!
CreateCourseSection
¢¢# 6
(
££ 
ClaimsPrincipal
§§ 
User
§§ 
,
§§ +
CreateCourseSectionVersionDTO
•• %+
createCourseSectionVersionDTO
••& C
)
¶¶ 
{
ßß 
try
®® 
{
©© 	
var
™™ 
courseVersionId
™™ 
=
™™  !
await
´´ 
_unitOfWork
´´ !
.
´´! "%
CourseVersionRepository
´´" 9
.
´´9 :
GetAsync
´´: B
(
´´B C
c
´´C D
=>
´´E G
c
¨¨ 
.
¨¨ 
Id
¨¨ 
==
¨¨ +
createCourseSectionVersionDTO
¨¨ 9
.
¨¨9 :
CourseVersionId
¨¨: I
)
¨¨I J
;
¨¨J K
if
≠≠ 
(
≠≠ 
courseVersionId
≠≠ 
==
≠≠  "
null
≠≠# '
)
≠≠' (
{
ÆÆ 
return
ØØ 
new
ØØ 
ResponseDTO
ØØ &
(
ØØ& '
)
ØØ' (
{
∞∞ 
Message
±± 
=
±± 
$str
±± 7
,
±±7 8
Result
≤≤ 
=
≤≤ 
null
≤≤ !
,
≤≤! "
	IsSuccess
≥≥ 
=
≥≥ 
false
≥≥  %
,
≥≥% &

StatusCode
¥¥ 
=
¥¥  
$num
¥¥! $
}
µµ 
;
µµ 
}
∂∂ 
var
ππ "
courseSectionVersion
ππ $
=
ππ% &
new
ππ' *"
CourseSectionVersion
ππ+ ?
(
ππ? @
)
ππ@ A
{
∫∫ 
Id
ªª 
=
ªª 
Guid
ªª 
.
ªª 
NewGuid
ªª !
(
ªª! "
)
ªª" #
,
ªª# $
CourseVersionId
ºº 
=
ºº  !+
createCourseSectionVersionDTO
ºº" ?
.
ºº? @
CourseVersionId
ºº@ O
,
ººO P
Title
ΩΩ 
=
ΩΩ +
createCourseSectionVersionDTO
ΩΩ 5
.
ΩΩ5 6
Title
ΩΩ6 ;
,
ΩΩ; <
Description
ææ 
=
ææ +
createCourseSectionVersionDTO
ææ ;
.
ææ; <
Description
ææ< G
,
ææG H
CurrentStatus
øø 
=
øø 
$num
øø  !
}
¿¿ 
;
¿¿ 
await
√√ 
_unitOfWork
√√ 
.
√√ ,
CourseSectionVersionRepository
√√ <
.
√√< =
AddAsync
√√= E
(
√√E F"
courseSectionVersion
√√F Z
)
√√Z [
;
√√[ \
await
ƒƒ 
_unitOfWork
ƒƒ 
.
ƒƒ 
	SaveAsync
ƒƒ '
(
ƒƒ' (
)
ƒƒ( )
;
ƒƒ) *
return
∆∆ 
new
∆∆ 
ResponseDTO
∆∆ "
(
∆∆" #
)
∆∆# $
{
«« 
Result
»» 
=
»» "
courseSectionVersion
»» -
.
»»- .
Id
»». 0
,
»»0 1
Message
…… 
=
…… 
$str
…… J
,
……J K
	IsSuccess
   
=
   
true
    
,
    !

StatusCode
ÀÀ 
=
ÀÀ 
$num
ÀÀ  
}
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
catch
ŒŒ 
(
ŒŒ 
	Exception
ŒŒ 
e
ŒŒ 
)
ŒŒ 
{
œœ 	
return
–– 
new
–– 
ResponseDTO
–– "
(
––" #
)
––# $
{
—— 
Result
““ 
=
““ 
null
““ 
,
““ 
	IsSuccess
”” 
=
”” 
false
”” !
,
””! "
Message
‘‘ 
=
‘‘ 
e
‘‘ 
.
‘‘ 
Message
‘‘ #
,
‘‘# $

StatusCode
’’ 
=
’’ 
$num
’’  
}
÷÷ 
;
÷÷ 
}
◊◊ 	
}
ÿÿ 
public
⁄⁄ 

async
⁄⁄ 
Task
⁄⁄ 
<
⁄⁄ 
ResponseDTO
⁄⁄ !
>
⁄⁄! "
EditCourseSection
⁄⁄# 4
(
€€ 
ClaimsPrincipal
‹‹ 
User
‹‹ 
,
‹‹ )
EditCourseSectionVersionDTO
›› #)
editCourseSectionVersionDTO
››$ ?
)
ﬁﬁ 
{
ﬂﬂ 
try
‡‡ 
{
·· 	
var
„„ $
courseSectionVersionId
„„ &
=
„„' (
await
‰‰ 
_unitOfWork
‰‰ !
.
‰‰! ",
CourseSectionVersionRepository
‰‰" @
.
‰‰@ A
GetAsync
‰‰A I
(
‰‰I J
c
‰‰J K
=>
‰‰L N
c
ÂÂ 
.
ÂÂ 
Id
ÂÂ 
==
ÂÂ )
editCourseSectionVersionDTO
ÂÂ 7
.
ÂÂ7 8$
CourseSectionVersionId
ÂÂ8 N
)
ÂÂN O
;
ÂÂO P
if
ÊÊ 
(
ÊÊ $
courseSectionVersionId
ÊÊ &
==
ÊÊ' )
null
ÊÊ* .
)
ÊÊ. /
{
ÁÁ 
return
ËË 
new
ËË 
ResponseDTO
ËË &
(
ËË& '
)
ËË' (
{
ÈÈ 
Message
ÍÍ 
=
ÍÍ 
$str
ÍÍ >
,
ÍÍ> ?
Result
ÎÎ 
=
ÎÎ 
null
ÎÎ !
,
ÎÎ! "
	IsSuccess
ÏÏ 
=
ÏÏ 
false
ÏÏ  %
,
ÏÏ% &

StatusCode
ÌÌ 
=
ÌÌ  
$num
ÌÌ! $
}
ÓÓ 
;
ÓÓ 
}
ÔÔ $
courseSectionVersionId
ıı "
.
ıı" #
Title
ıı# (
=
ıı) *)
editCourseSectionVersionDTO
ıı+ F
.
ııF G
Title
ııG L
;
ııL M$
courseSectionVersionId
ˆˆ "
.
ˆˆ" #
Description
ˆˆ# .
=
ˆˆ/ 0)
editCourseSectionVersionDTO
ˆˆ1 L
.
ˆˆL M
Description
ˆˆM X
;
ˆˆX Y$
courseSectionVersionId
˜˜ "
.
˜˜" #
CurrentStatus
˜˜# 0
=
˜˜1 2
$num
˜˜3 4
;
˜˜4 5
_unitOfWork
˘˘ 
.
˘˘ ,
CourseSectionVersionRepository
˘˘ 6
.
˘˘6 7
Update
˘˘7 =
(
˘˘= >$
courseSectionVersionId
˘˘> T
)
˘˘T U
;
˘˘U V
await
˙˙ 
_unitOfWork
˙˙ 
.
˙˙ 
	SaveAsync
˙˙ '
(
˙˙' (
)
˙˙( )
;
˙˙) *
return
¸¸ 
new
¸¸ 
ResponseDTO
¸¸ "
(
¸¸" #
)
¸¸# $
{
˝˝ 
Message
˛˛ 
=
˛˛ 
$str
˛˛ D
,
˛˛D E
Result
ˇˇ 
=
ˇˇ 
null
ˇˇ 
,
ˇˇ 
	IsSuccess
ÄÄ 
=
ÄÄ 
true
ÄÄ  
,
ÄÄ  !

StatusCode
ÅÅ 
=
ÅÅ 
$num
ÅÅ  
,
ÅÅ  !
}
ÇÇ 
;
ÇÇ 
}
ÉÉ 	
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ 
e
ÑÑ 
)
ÑÑ 
{
ÖÖ 	
return
ÜÜ 
new
ÜÜ 
ResponseDTO
ÜÜ "
{
áá 
Message
àà 
=
àà 
e
àà 
.
àà 
Message
àà #
,
àà# $
Result
ââ 
=
ââ 
null
ââ 
,
ââ 
	IsSuccess
ää 
=
ää 
false
ää !
,
ää! "

StatusCode
ãã 
=
ãã 
$num
ãã  
}
åå 
;
åå 
}
çç 	
}
éé 
public
êê 

async
êê 
Task
êê 
<
êê 
ResponseDTO
êê !
>
êê! "!
RemoveCourseSection
êê# 6
(
ëë 
ClaimsPrincipal
íí 
User
íí 
,
íí 
Guid
ìì 
sectionVersionId
ìì 
)
îî 
{
ïï 
try
ññ 
{
óó 	
var
ôô "
courseSectionVersion
ôô $
=
ôô% &
await
öö 
_unitOfWork
öö !
.
öö! ",
CourseSectionVersionRepository
öö" @
.
öö@ A
GetAsync
ööA I
(
ööI J
c
ööJ K
=>
ööL N
c
õõ 
.
õõ 
Id
õõ 
==
õõ 
sectionVersionId
õõ ,
)
õõ, -
;
õõ- .
if
úú 
(
úú "
courseSectionVersion
úú $
==
úú% '
null
úú( ,
)
úú, -
{
ùù 
return
ûû 
new
ûû 
ResponseDTO
ûû &
(
ûû& '
)
ûû' (
{
üü 
Message
†† 
=
†† 
$str
†† D
,
††D E
Result
°° 
=
°° 
null
°° !
,
°°! "
	IsSuccess
¢¢ 
=
¢¢ 
false
¢¢  %
,
¢¢% &

StatusCode
££ 
=
££  
$num
££! $
}
§§ 
;
§§ 
}
•• 
var
™™ "
sectionDetailVersion
™™ $
=
™™% &
await
´´ 
_unitOfWork
´´ !
.
´´! "-
SectionDetailsVersionRepository
´´" A
.
´´A B
GetAllAsync
´´B M
(
´´M N
x
´´N O
=>
´´P R
x
¨¨ 
.
¨¨ $
CourseSectionVersionId
¨¨ ,
==
¨¨- /"
courseSectionVersion
¨¨0 D
.
¨¨D E
Id
¨¨E G
)
¨¨G H
;
¨¨H I
_unitOfWork
ÆÆ 
.
ÆÆ -
SectionDetailsVersionRepository
ÆÆ 7
.
ÆÆ7 8
RemoveRange
ÆÆ8 C
(
ÆÆC D"
sectionDetailVersion
ÆÆD X
)
ÆÆX Y
;
ÆÆY Z
_unitOfWork
ØØ 
.
ØØ ,
CourseSectionVersionRepository
ØØ 6
.
ØØ6 7
Remove
ØØ7 =
(
ØØ= >"
courseSectionVersion
ØØ> R
)
ØØR S
;
ØØS T
await
∞∞ 
_unitOfWork
∞∞ 
.
∞∞ 
	SaveAsync
∞∞ '
(
∞∞' (
)
∞∞( )
;
∞∞) *
return
≤≤ 
new
≤≤ 
ResponseDTO
≤≤ "
(
≤≤" #
)
≤≤# $
{
≥≥ 
Message
¥¥ 
=
¥¥ 
$str
¥¥ G
,
¥¥G H
Result
µµ 
=
µµ 
null
µµ 
,
µµ 
	IsSuccess
∂∂ 
=
∂∂ 
true
∂∂  
,
∂∂  !

StatusCode
∑∑ 
=
∑∑ 
$num
∑∑  
,
∑∑  !
}
∏∏ 
;
∏∏ 
}
ππ 	
catch
∫∫ 
(
∫∫ 
	Exception
∫∫ 
e
∫∫ 
)
∫∫ 
{
ªª 	
return
ºº 
new
ºº 
ResponseDTO
ºº "
{
ΩΩ 
Message
ææ 
=
ææ 
e
ææ 
.
ææ 
Message
ææ #
,
ææ# $
Result
øø 
=
øø 
null
øø 
,
øø 
	IsSuccess
¿¿ 
=
¿¿ 
false
¿¿ !
,
¿¿! "

StatusCode
¡¡ 
=
¡¡ 
$num
¡¡  
}
¬¬ 
;
¬¬ 
}
√√ 	
}
ƒƒ 
}≈≈ õ⁄
lD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\CourseReviewService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
{		 
public

 

class

 
CourseReviewService

 $
:

% & 
ICourseReviewService

' ;
{ 
private 
readonly 
IUnitOfWork $
_unitOfWork% 0
;0 1
private 
readonly 
ICourseService '
_courseService( 6
;6 7
private 
readonly 
IMapper  
_mapper! (
;( )
public 
CourseReviewService "
(" #
IUnitOfWork# .

unitOfWork/ 9
,9 :
IMapper; B
mapperC I
,I J
ICourseServiceK Y
courseServiceZ g
)g h
{ 	
_unitOfWork 
= 

unitOfWork $
;$ %
_mapper 
= 
mapper 
; 
_courseService 
= 
courseService *
;* +
} 	
public 
async 
Task 
< 
ResponseDTO %
>% &
GetCourseReviews' 7
( 	
ClaimsPrincipal 
User  
,  !
Guid 
? 
courseId 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
,  
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
, 
int   
pageSize   
)!! 	
{"" 	
try## 
{$$ 
if%% 
(%% 
courseId%% 
==%% 
null%%  $
)%%$ %
{&& 
return'' 
new'' 
ResponseDTO'' *
(''* +
)''+ ,
{(( 
Message)) 
=))  !
$str))" 9
,))9 :
	IsSuccess** !
=**" #
false**$ )
,**) *

StatusCode++ "
=++# $
$num++% (
,++( )
Result,, 
=,,  
null,,! %
}-- 
;-- 
}.. 
var00 
courseReviews00 !
=00" #
await00$ )
_unitOfWork00* 5
.005 6"
CourseReviewRepository006 L
.00L M
GetAllAsync00M X
(00X Y
filter11 
:11 
x11 
=>11  
x11! "
.11" #
CourseId11# +
==11, .
courseId11/ 7
)22 
;22 
if44 
(44 
!44 
courseReviews44 "
.44" #
Any44# &
(44& '
)44' (
)44( )
{55 
return66 
new66 
ResponseDTO66 *
(66* +
)66+ ,
{77 
Message88 
=88  !
$str88" ?
,88? @
Result99 
=99  
courseReviews99! .
,99. /
	IsSuccess:: !
=::" #
false::$ )
,::) *

StatusCode;; "
=;;# $
$num;;% (
}<< 
;<< 
}== 
if@@ 
(@@ 
!@@ 
string@@ 
.@@ 
IsNullOrEmpty@@ )
(@@) *
filterOn@@* 2
)@@2 3
&&@@4 6
!@@7 8
string@@8 >
.@@> ?
IsNullOrEmpty@@? L
(@@L M
filterQuery@@M X
)@@X Y
)@@Y Z
{AA 
switchBB 
(BB 
filterOnBB $
.BB$ %
TrimBB% )
(BB) *
)BB* +
.BB+ ,
ToLowerBB, 3
(BB3 4
)BB4 5
)BB5 6
{CC 
caseDD 
$strDD &
:DD& '
courseReviewsEE )
=EE* +
courseReviewsEE, 9
.EE9 :
WhereEE: ?
(EE? @
xEE@ A
=>EEB D
xFF  !
.FF! "
MessageFF" )
.FF) *
ContainsFF* 2
(FF2 3
filterQueryFF3 >
,FF> ?
StringComparisonFF@ P
.FFP Q$
CurrentCultureIgnoreCaseFFQ i
)FFi j
)FFj k
.FFk l
ToListFFl r
(FFr s
)FFs t
;FFt u
breakGG !
;GG! "
caseHH 
$strHH #
:HH# $
courseReviewsII )
=II* +
courseReviewsII, 9
.II9 :
WhereII: ?
(II? @
xII@ A
=>IIB D
xJJ  !
.JJ! "
RateJJ" &
.JJ& '
ToStringJJ' /
(JJ/ 0
)JJ0 1
==JJ2 4
filterQueryJJ5 @
)JJ@ A
.JJA B
ToListJJB H
(JJH I
)JJI J
;JJJ K
breakKK !
;KK! "
}LL 
}MM 
ifPP 
(PP 
!PP 
stringPP 
.PP 
IsNullOrEmptyPP )
(PP) *
sortByPP* 0
)PP0 1
)PP1 2
{QQ 
switchRR 
(RR 
sortByRR "
.RR" #
TrimRR# '
(RR' (
)RR( )
.RR) *
ToLowerRR* 1
(RR1 2
)RR2 3
)RR3 4
{SS 
caseTT 
$strTT &
:TT& '
courseReviewsUU )
=UU* +
isAscendingUU, 7
==UU8 :
trueUU; ?
?VV  !
courseReviewsVV" /
.VV/ 0
OrderByVV0 7
(VV7 8
xVV8 9
=>VV: <
xVV= >
.VV> ?
MessageVV? F
)VVF G
.VVG H
ToListVVH N
(VVN O
)VVO P
:WW  !
courseReviewsWW" /
.WW/ 0
OrderByDescendingWW0 A
(WWA B
xWWB C
=>WWD F
xWWG H
.WWH I
MessageWWI P
)WWP Q
.WWQ R
ToListWWR X
(WWX Y
)WWY Z
;WWZ [
breakXX !
;XX! "
caseYY 
$strYY #
:YY# $
courseReviewsZZ )
=ZZ* +
isAscendingZZ, 7
==ZZ8 :
trueZZ; ?
?[[  !
courseReviews[[" /
.[[/ 0
OrderBy[[0 7
([[7 8
x[[8 9
=>[[: <
x[[= >
.[[> ?
Rate[[? C
)[[C D
.[[D E
ToList[[E K
([[K L
)[[L M
:\\  !
courseReviews\\" /
.\\/ 0
OrderByDescending\\0 A
(\\A B
x\\B C
=>\\D F
x\\G H
.\\H I
Rate\\I M
)\\M N
.\\N O
ToList\\O U
(\\U V
)\\V W
;\\W X
break]] !
;]]! "
default^^ 
:^^  
break__ !
;__! "
}`` 
}aa 
ifdd 
(dd 

pageNumberdd 
>dd  
$numdd! "
&&dd# %
pageSizedd& .
>dd/ 0
$numdd1 2
)dd2 3
{ee 
varff 

skipResultff "
=ff# $
(ff% &

pageNumberff& 0
-ff1 2
$numff3 4
)ff4 5
*ff6 7
pageSizeff8 @
;ff@ A
courseReviewsgg !
=gg" #
courseReviewsgg$ 1
.gg1 2
Skipgg2 6
(gg6 7

skipResultgg7 A
)ggA B
.ggB C
TakeggC G
(ggG H
pageSizeggH P
)ggP Q
.ggQ R
ToListggR X
(ggX Y
)ggY Z
;ggZ [
}hh 
ifjj 
(jj 
!jj 
courseReviewsjj "
.jj" #
Anyjj# &
(jj& '
)jj' (
)jj( )
{kk 
returnll 
newll 
ResponseDTOll *
(ll* +
)ll+ ,
{mm 
Messagenn 
=nn  !
$strnn" ?
,nn? @
Resultoo 
=oo  
courseReviewsoo! .
,oo. /
	IsSuccesspp !
=pp" #
falsepp$ )
,pp) *

StatusCodeqq "
=qq# $
$numqq% (
}rr 
;rr 
}ss 
varuu 
courseReviewDtouu #
=uu$ %
_mapperuu& -
.uu- .
Mapuu. 1
<uu1 2
Listuu2 6
<uu6 7
GetCourseReviewDTOuu7 I
>uuI J
>uuJ K
(uuK L
courseReviewsuuL Y
)uuY Z
;uuZ [
returnww 
newww 
ResponseDTOww &
(ww& '
)ww' (
{xx 
Resultyy 
=yy 
courseReviewDtoyy ,
,yy, -
Messagezz 
=zz 
$strzz ?
,zz? @
	IsSuccess{{ 
={{ 
true{{  $
,{{$ %

StatusCode|| 
=||  
$num||! $
}}} 
;}} 
}~~ 
catch 
( 
	Exception 
ex 
)  
{
ÄÄ 
return
ÅÅ 
new
ÅÅ 
ResponseDTO
ÅÅ &
(
ÅÅ& '
)
ÅÅ' (
{
ÇÇ 
Result
ÉÉ 
=
ÉÉ 
null
ÉÉ !
,
ÉÉ! "
Message
ÑÑ 
=
ÑÑ 
ex
ÑÑ  
.
ÑÑ  !
Message
ÑÑ! (
,
ÑÑ( )
	IsSuccess
ÖÖ 
=
ÖÖ 
false
ÖÖ  %
,
ÖÖ% &

StatusCode
ÜÜ 
=
ÜÜ  
$num
ÜÜ! $
}
áá 
;
áá 
}
àà 
}
ââ 	
public
ãã 
async
ãã 
Task
ãã 
<
ãã 
ResponseDTO
ãã %
>
ãã% &!
GetCourseReviewById
ãã' :
(
ãã: ;
Guid
ãã; ?
id
ãã@ B
)
ããB C
{
åå 	
try
çç 
{
éé 
var
èè 
courseReview
èè  
=
èè! "
await
èè# (
_unitOfWork
èè) 4
.
èè4 5$
CourseReviewRepository
èè5 K
.
èèK L
GetById
èèL S
(
èèS T
id
èèT V
)
èèV W
;
èèW X
if
êê 
(
êê 
courseReview
êê  
==
êê! #
null
êê$ (
)
êê( )
{
ëë 
return
íí 
new
íí 
ResponseDTO
íí *
{
ìì 
Message
îî 
=
îî  !
$str
îî" ;
,
îî; <
	IsSuccess
ïï !
=
ïï" #
false
ïï$ )
,
ïï) *

StatusCode
ññ "
=
ññ# $
$num
ññ% (
,
ññ( )
Result
óó 
=
óó  
null
óó! %
}
òò 
;
òò 
}
ôô 
return
õõ 
new
õõ 
ResponseDTO
õõ &
{
úú 
Message
ùù 
=
ùù 
$str
ùù D
,
ùùD E
	IsSuccess
ûû 
=
ûû 
true
ûû  $
,
ûû$ %

StatusCode
üü 
=
üü  
$num
üü! $
,
üü$ %
Result
†† 
=
†† 
courseReview
†† )
}
°° 
;
°° 
}
¢¢ 
catch
££ 
(
££ 
	Exception
££ 
ex
££ 
)
££  
{
§§ 
return
•• 
new
•• 
ResponseDTO
•• &
{
¶¶ 
Message
ßß 
=
ßß 
ex
ßß  
.
ßß  !
Message
ßß! (
,
ßß( )
	IsSuccess
®® 
=
®® 
false
®®  %
,
®®% &

StatusCode
©© 
=
©©  
$num
©©! $
,
©©$ %
Result
™™ 
=
™™ 
null
™™ !
}
´´ 
;
´´ 
}
¨¨ 
}
≠≠ 	
public
ØØ 
async
ØØ 
Task
ØØ 
<
ØØ 
ResponseDTO
ØØ %
>
ØØ% & 
CreateCourseReview
ØØ' 9
(
ØØ9 :#
CreateCourseReviewDTO
ØØ: O#
createCourseReviewDTO
ØØP e
)
ØØe f
{
∞∞ 	
try
±± 
{
≤≤ 
var
¥¥ 
course
¥¥ 
=
¥¥ 
await
¥¥ "
_unitOfWork
¥¥# .
.
¥¥. /
CourseRepository
¥¥/ ?
.
¥¥? @
GetById
¥¥@ G
(
¥¥G H#
createCourseReviewDTO
¥¥H ]
.
¥¥] ^
CourseId
¥¥^ f
)
¥¥f g
;
¥¥g h
if
µµ 
(
µµ 
course
µµ 
==
µµ 
null
µµ "
)
µµ" #
{
∂∂ 
return
∑∑ 
new
∑∑ 
ResponseDTO
∑∑ *
{
∏∏ 
Message
ππ 
=
ππ  !
$str
ππ" 4
,
ππ4 5
	IsSuccess
∫∫ !
=
∫∫" #
false
∫∫$ )
,
∫∫) *

StatusCode
ªª "
=
ªª# $
$num
ªª% (
,
ªª( )
Result
ºº 
=
ºº  
null
ºº! %
}
ΩΩ 
;
ΩΩ 
}
ææ 
var
¡¡ 
student
¡¡ 
=
¡¡ 
await
¡¡ #
_unitOfWork
¡¡$ /
.
¡¡/ 0
StudentRepository
¡¡0 A
.
¡¡A B
GetById
¡¡B I
(
¡¡I J#
createCourseReviewDTO
¡¡J _
.
¡¡_ `
	StudentId
¡¡` i
)
¡¡i j
;
¡¡j k
if
¬¬ 
(
¬¬ 
student
¬¬ 
==
¬¬ 
null
¬¬ #
)
¬¬# $
{
√√ 
return
ƒƒ 
new
ƒƒ 
ResponseDTO
ƒƒ *
{
≈≈ 
Message
∆∆ 
=
∆∆  !
$str
∆∆" 5
,
∆∆5 6
	IsSuccess
«« !
=
««" #
false
««$ )
,
««) *

StatusCode
»» "
=
»»# $
$num
»»% (
,
»»( )
Result
…… 
=
……  
null
……! %
}
   
;
   
}
ÀÀ 
var
ŒŒ 
courseReview
ŒŒ  
=
ŒŒ! "
new
ŒŒ# &
CourseReview
ŒŒ' 3
{
œœ 
Id
–– 
=
–– 
Guid
–– 
.
–– 
NewGuid
–– %
(
––% &
)
––& '
,
––' (
CourseId
—— 
=
—— #
createCourseReviewDTO
—— 4
.
——4 5
CourseId
——5 =
,
——= >
	StudentId
““ 
=
““ #
createCourseReviewDTO
““  5
.
““5 6
	StudentId
““6 ?
,
““? @
Rate
”” 
=
”” #
createCourseReviewDTO
”” 0
.
””0 1
Rate
””1 5
,
””5 6
Message
‘‘ 
=
‘‘ #
createCourseReviewDTO
‘‘ 3
.
‘‘3 4
Message
‘‘4 ;
,
‘‘; <
	CreatedBy
’’ 
=
’’ #
createCourseReviewDTO
’’  5
.
’’5 6
	StudentId
’’6 ?
.
’’? @
ToString
’’@ H
(
’’H I
)
’’I J
,
’’J K
CreatedTime
÷÷ 
=
÷÷  !
DateTime
÷÷" *
.
÷÷* +
UtcNow
÷÷+ 1
,
÷÷1 2
Status
◊◊ 
=
◊◊ 
$num
◊◊ 
}
ÿÿ 
;
ÿÿ 
await
⁄⁄ 
_unitOfWork
⁄⁄ !
.
⁄⁄! "$
CourseReviewRepository
⁄⁄" 8
.
⁄⁄8 9
AddAsync
⁄⁄9 A
(
⁄⁄A B
courseReview
⁄⁄B N
)
⁄⁄N O
;
⁄⁄O P
await
€€ 
_unitOfWork
€€ !
.
€€! "
	SaveAsync
€€" +
(
€€+ ,
)
€€, -
;
€€- .
await
›› 
_courseService
›› $
.
››$ %
UpsertCourseTotal
››% 6
(
ﬁﬁ 
new
ﬂﬂ "
UpsertCourseTotalDTO
ﬂﬂ ,
(
ﬂﬂ, -
)
ﬂﬂ- .
{
‡‡ 
CourseId
··  
=
··! "
course
··# )
.
··) *
Id
··* ,
,
··, -
UpdateTotalRate
‚‚ '
=
‚‚( )
true
‚‚* .
}
„„ 
)
‰‰ 
;
‰‰ 
return
ÊÊ 
new
ÊÊ 
ResponseDTO
ÊÊ &
{
ÁÁ 
Message
ËË 
=
ËË 
$str
ËË B
,
ËËB C
	IsSuccess
ÈÈ 
=
ÈÈ 
true
ÈÈ  $
,
ÈÈ$ %

StatusCode
ÍÍ 
=
ÍÍ  
$num
ÍÍ! $
,
ÍÍ$ %
Result
ÎÎ 
=
ÎÎ 
courseReview
ÎÎ )
.
ÎÎ) *
Id
ÎÎ* ,
}
ÏÏ 
;
ÏÏ 
}
ÌÌ 
catch
ÓÓ 
(
ÓÓ 
	Exception
ÓÓ 
ex
ÓÓ 
)
ÓÓ  
{
ÔÔ 
return
 
new
 
ResponseDTO
 &
{
ÒÒ 
Message
ÚÚ 
=
ÚÚ 
ex
ÚÚ  
.
ÚÚ  !
Message
ÚÚ! (
,
ÚÚ( )
	IsSuccess
ÛÛ 
=
ÛÛ 
false
ÛÛ  %
,
ÛÛ% &

StatusCode
ÙÙ 
=
ÙÙ  
$num
ÙÙ! $
,
ÙÙ$ %
Result
ıı 
=
ıı 
null
ıı !
}
ˆˆ 
;
ˆˆ 
}
˜˜ 
}
¯¯ 	
public
˙˙ 
async
˙˙ 
Task
˙˙ 
<
˙˙ 
ResponseDTO
˙˙ %
>
˙˙% & 
UpdateCourseReview
˙˙' 9
(
˙˙9 :
ClaimsPrincipal
˙˙: I
User
˙˙J N
,
˙˙N O#
UpdateCourseReviewDTO
˚˚ !#
updateCourseReviewDTO
˚˚" 7
)
˚˚7 8
{
¸¸ 	
try
˝˝ 
{
˛˛ 
var
ˇˇ 
userId
ˇˇ 
=
ˇˇ 
User
ˇˇ !
.
ˇˇ! "
Claims
ˇˇ" (
.
ˇˇ( )
FirstOrDefault
ˇˇ) 7
(
ˇˇ7 8
x
ˇˇ8 9
=>
ˇˇ: <
x
ˇˇ= >
.
ˇˇ> ?
Type
ˇˇ? C
==
ˇˇD F

ClaimTypes
ˇˇG Q
.
ˇˇQ R
NameIdentifier
ˇˇR `
)
ˇˇ` a
?
ˇˇa b
.
ˇˇb c
Value
ˇˇc h
;
ˇˇh i
if
ÅÅ 
(
ÅÅ 
userId
ÅÅ 
is
ÅÅ 
null
ÅÅ "
)
ÅÅ" #
{
ÇÇ 
return
ÉÉ 
new
ÉÉ 
ResponseDTO
ÉÉ *
{
ÑÑ 
Message
ÖÖ 
=
ÖÖ  !
$str
ÖÖ" 2
,
ÖÖ2 3
Result
ÜÜ 
=
ÜÜ  
null
ÜÜ! %
,
ÜÜ% &
	IsSuccess
áá !
=
áá" #
false
áá$ )
,
áá) *

StatusCode
àà "
=
àà# $
$num
àà% (
}
ââ 
;
ââ 
}
ää 
var
åå 
courseReview
åå  
=
åå! "
await
åå# (
_unitOfWork
åå) 4
.
åå4 5$
CourseReviewRepository
åå5 K
.
ååK L
GetById
ååL S
(
ååS T#
updateCourseReviewDTO
ååT i
.
ååi j
Id
ååj l
)
åål m
;
ååm n
if
çç 
(
çç 
courseReview
çç  
==
çç! #
null
çç$ (
)
çç( )
{
éé 
return
èè 
new
èè 
ResponseDTO
èè *
{
êê 
Message
ëë 
=
ëë  !
$str
ëë" ;
,
ëë; <
	IsSuccess
íí !
=
íí" #
false
íí$ )
,
íí) *

StatusCode
ìì "
=
ìì# $
$num
ìì% (
,
ìì( )
Result
îî 
=
îî  
null
îî! %
}
ïï 
;
ïï 
}
ññ 
courseReview
òò 
.
òò 
Rate
òò !
=
òò" ##
updateCourseReviewDTO
òò$ 9
.
òò9 :
Rate
òò: >
;
òò> ?
courseReview
ôô 
.
ôô 
Message
ôô $
=
ôô% &#
updateCourseReviewDTO
ôô' <
.
ôô< =
Message
ôô= D
;
ôôD E
courseReview
öö 
.
öö 
	UpdatedBy
öö &
=
öö' (
userId
öö) /
;
öö/ 0
courseReview
õõ 
.
õõ 
UpdatedTime
õõ (
=
õõ) *
DateTime
õõ+ 3
.
õõ3 4
UtcNow
õõ4 :
;
õõ: ;
_unitOfWork
ùù 
.
ùù $
CourseReviewRepository
ùù 2
.
ùù2 3
Update
ùù3 9
(
ùù9 :
courseReview
ùù: F
)
ùùF G
;
ùùG H
await
ûû 
_unitOfWork
ûû !
.
ûû! "
	SaveAsync
ûû" +
(
ûû+ ,
)
ûû, -
;
ûû- .
await
†† 
_courseService
†† $
.
††$ %
UpsertCourseTotal
††% 6
(
°° 
new
¢¢ "
UpsertCourseTotalDTO
¢¢ ,
(
¢¢, -
)
¢¢- .
{
££ 
CourseId
§§  
=
§§! "
courseReview
§§# /
.
§§/ 0
CourseId
§§0 8
,
§§8 9
UpdateTotalRate
•• '
=
••( )
true
••* .
}
¶¶ 
)
ßß 
;
ßß 
return
©© 
new
©© 
ResponseDTO
©© &
{
™™ 
Message
´´ 
=
´´ 
$str
´´ B
,
´´B C
	IsSuccess
¨¨ 
=
¨¨ 
true
¨¨  $
,
¨¨$ %

StatusCode
≠≠ 
=
≠≠  
$num
≠≠! $
,
≠≠$ %
Result
ÆÆ 
=
ÆÆ 
courseReview
ÆÆ )
.
ÆÆ) *
Id
ÆÆ* ,
}
ØØ 
;
ØØ 
}
∞∞ 
catch
±± 
(
±± 
	Exception
±± 
ex
±± 
)
±±  
{
≤≤ 
return
≥≥ 
new
≥≥ 
ResponseDTO
≥≥ &
{
¥¥ 
Message
µµ 
=
µµ 
ex
µµ  
.
µµ  !
Message
µµ! (
,
µµ( )
	IsSuccess
∂∂ 
=
∂∂ 
false
∂∂  %
,
∂∂% &

StatusCode
∑∑ 
=
∑∑  
$num
∑∑! $
,
∑∑$ %
Result
∏∏ 
=
∏∏ 
null
∏∏ !
}
ππ 
;
ππ 
}
∫∫ 
}
ªª 	
public
ΩΩ 
async
ΩΩ 
Task
ΩΩ 
<
ΩΩ 
ResponseDTO
ΩΩ %
>
ΩΩ% & 
DeleteCourseReview
ΩΩ' 9
(
ΩΩ9 :
Guid
ΩΩ: >
id
ΩΩ? A
)
ΩΩA B
{
ææ 	
try
øø 
{
¿¿ 
var
¡¡ 
courseReview
¡¡  
=
¡¡! "
await
¡¡# (
_unitOfWork
¡¡) 4
.
¡¡4 5$
CourseReviewRepository
¡¡5 K
.
¡¡K L
GetById
¡¡L S
(
¡¡S T
id
¡¡T V
)
¡¡V W
;
¡¡W X
if
¬¬ 
(
¬¬ 
courseReview
¬¬  
==
¬¬! #
null
¬¬$ (
)
¬¬( )
{
√√ 
return
ƒƒ 
new
ƒƒ 
ResponseDTO
ƒƒ *
{
≈≈ 
Message
∆∆ 
=
∆∆  !
$str
∆∆" ;
,
∆∆; <
	IsSuccess
«« !
=
««" #
false
««$ )
,
««) *

StatusCode
»» "
=
»»# $
$num
»»% (
,
»»( )
Result
…… 
=
……  
null
……! %
}
   
;
   
}
ÀÀ 
_unitOfWork
ÕÕ 
.
ÕÕ $
CourseReviewRepository
ÕÕ 2
.
ÕÕ2 3
Remove
ÕÕ3 9
(
ÕÕ9 :
courseReview
ÕÕ: F
)
ÕÕF G
;
ÕÕG H
await
ŒŒ 
_unitOfWork
ŒŒ !
.
ŒŒ! "
	SaveAsync
ŒŒ" +
(
ŒŒ+ ,
)
ŒŒ, -
;
ŒŒ- .
await
–– 
_courseService
–– $
.
––$ %
UpsertCourseTotal
––% 6
(
—— 
new
““ "
UpsertCourseTotalDTO
““ ,
(
““, -
)
““- .
{
”” 
CourseId
‘‘  
=
‘‘! "
courseReview
‘‘# /
.
‘‘/ 0
CourseId
‘‘0 8
,
‘‘8 9
UpdateTotalRate
’’ '
=
’’( )
true
’’* .
}
÷÷ 
)
◊◊ 
;
◊◊ 
return
ŸŸ 
new
ŸŸ 
ResponseDTO
ŸŸ &
{
⁄⁄ 
Message
€€ 
=
€€ 
$str
€€ B
,
€€B C
	IsSuccess
‹‹ 
=
‹‹ 
true
‹‹  $
,
‹‹$ %

StatusCode
›› 
=
››  
$num
››! $
,
››$ %
Result
ﬁﬁ 
=
ﬁﬁ 
null
ﬁﬁ !
}
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 
catch
·· 
(
·· 
	Exception
·· 
ex
·· 
)
··  
{
‚‚ 
return
„„ 
new
„„ 
ResponseDTO
„„ &
{
‰‰ 
Message
ÂÂ 
=
ÂÂ 
ex
ÂÂ  
.
ÂÂ  !
Message
ÂÂ! (
,
ÂÂ( )
	IsSuccess
ÊÊ 
=
ÊÊ 
false
ÊÊ  %
,
ÊÊ% &

StatusCode
ÁÁ 
=
ÁÁ  
$num
ÁÁ! $
,
ÁÁ$ %
Result
ËË 
=
ËË 
null
ËË !
}
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}
ÎÎ 	
public
ÌÌ 
async
ÌÌ 
Task
ÌÌ 
<
ÌÌ 
ResponseDTO
ÌÌ %
>
ÌÌ% &
MarkCourseReview
ÌÌ' 7
(
ÌÌ7 8
Guid
ÌÌ8 <
id
ÌÌ= ?
)
ÌÌ? @
{
ÓÓ 	
try
ÔÔ 
{
 
var
ÒÒ 
courseReview
ÒÒ  
=
ÒÒ! "
await
ÒÒ# (
_unitOfWork
ÒÒ) 4
.
ÒÒ4 5$
CourseReviewRepository
ÒÒ5 K
.
ÒÒK L
GetById
ÒÒL S
(
ÒÒS T
id
ÒÒT V
)
ÒÒV W
;
ÒÒW X
if
ÚÚ 
(
ÚÚ 
courseReview
ÚÚ  
==
ÚÚ! #
null
ÚÚ$ (
)
ÚÚ( )
{
ÛÛ 
return
ÙÙ 
new
ÙÙ 
ResponseDTO
ÙÙ *
{
ıı 
Message
ˆˆ 
=
ˆˆ  !
$str
ˆˆ" ;
,
ˆˆ; <
	IsSuccess
˜˜ !
=
˜˜" #
false
˜˜$ )
,
˜˜) *

StatusCode
¯¯ "
=
¯¯# $
$num
¯¯% (
,
¯¯( )
Result
˘˘ 
=
˘˘  
null
˘˘! %
}
˙˙ 
;
˙˙ 
}
˚˚ 
courseReview
˝˝ 
.
˝˝ 
IsMarked
˝˝ %
=
˝˝& '
!
˝˝( )
courseReview
˝˝) 5
.
˝˝5 6
IsMarked
˝˝6 >
;
˝˝> ?
_unitOfWork
ˇˇ 
.
ˇˇ $
CourseReviewRepository
ˇˇ 2
.
ˇˇ2 3
Update
ˇˇ3 9
(
ˇˇ9 :
courseReview
ˇˇ: F
)
ˇˇF G
;
ˇˇG H
await
ÄÄ 
_unitOfWork
ÄÄ !
.
ÄÄ! "
	SaveAsync
ÄÄ" +
(
ÄÄ+ ,
)
ÄÄ, -
;
ÄÄ- .
string
ÇÇ 
message
ÇÇ 
=
ÇÇ  
courseReview
ÇÇ! -
.
ÇÇ- .
IsMarked
ÇÇ. 6
?
ÉÉ 
$str
ÉÉ 6
:
ÑÑ 
$str
ÑÑ 8
;
ÑÑ8 9
return
ÜÜ 
new
ÜÜ 
ResponseDTO
ÜÜ &
{
áá 
Message
àà 
=
àà 
message
àà %
,
àà% &
	IsSuccess
ââ 
=
ââ 
true
ââ  $
,
ââ$ %

StatusCode
ää 
=
ää  
$num
ää! $
,
ää$ %
Result
ãã 
=
ãã 
courseReview
ãã )
.
ãã) *
Id
ãã* ,
}
åå 
;
åå 
}
çç 
catch
éé 
(
éé 
	Exception
éé 
ex
éé 
)
éé  
{
èè 
return
êê 
new
êê 
ResponseDTO
êê &
{
ëë 
Message
íí 
=
íí 
ex
íí  
.
íí  !
Message
íí! (
,
íí( )
	IsSuccess
ìì 
=
ìì 
false
ìì  %
,
ìì% &

StatusCode
îî 
=
îî  
$num
îî! $
,
îî$ %
Result
ïï 
=
ïï 
null
ïï !
}
ññ 
;
ññ 
}
óó 
}
òò 	
}
ôô 
}öö Ëö
lD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\CourseReportService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
{ 
public 

class 
CourseReportService $
:% & 
ICourseReportService' ;
{ 
private 
readonly 
IUnitOfWork $
_unitOfWork% 0
;0 1
private 
readonly 
IMapper  
_mapper! (
;( )
public 
CourseReportService "
(" #
IUnitOfWork# .

unitOfWork/ 9
,9 :
IMapper; B
mapperC I
)I J
{ 	
_unitOfWork 
= 

unitOfWork $
;$ %
_mapper 
= 
mapper 
; 
} 	
public 
async 
Task 
< 
ResponseDTO %
>% &
GetCourseReports' 7
(7 8
ClaimsPrincipal8 G
UserH L
,L M
GuidN R
?R S
courseIdT \
,\ ]
string^ d
?d e
filterOnf n
,n o
stringp v
?v w
filterQuery	x É
,
É Ñ
string
Ö ã
?
ã å
sortBy
ç ì
,
ì î
bool
ï ô
?
ô ö
isAscending
õ ¶
,
¶ ß
int
® ´

pageNumber
¨ ∂
,
∂ ∑
int
∏ ª
pageSize
º ƒ
)
ƒ ≈
{ 	
try 
{ 
var 
courseReports !
=" #
await$ )
_unitOfWork* 5
.5 6"
CourseReportRepository6 L
.L M
GetAllAsyncM X
(X Y
filter   
:   
x   
=>    
!  ! "
courseId  " *
.  * +
HasValue  + 3
||  4 6
x  7 8
.  8 9
CourseId  9 A
==  B D
courseId  E M
,  M N
includeProperties!! %
:!!% &
$str!!' /
)"" 
;"" 
if%% 
(%% 
!%% 
string%% 
.%% 
IsNullOrEmpty%% )
(%%) *
filterOn%%* 2
)%%2 3
&&%%4 6
!%%7 8
string%%8 >
.%%> ?
IsNullOrEmpty%%? L
(%%L M
filterQuery%%M X
)%%X Y
)%%Y Z
{&& 
courseReports'' !
=''" #
courseReports''$ 1
.''1 2
Where''2 7
(''7 8
cr''8 :
=>''; =
((( 
filterOn(( !
.((! "
ToLower((" )
((() *
)((* +
==((, .
$str((/ 8
&&((9 ;
cr((< >
.((> ?
Message((? F
.((F G
Contains((G O
(((O P
filterQuery((P [
,(([ \
StringComparison((] m
.((m n
OrdinalIgnoreCase((n 
)	(( Ä
)
((Ä Å
))) 
.)) 
ToList)) 
()) 
))) 
;)) 
}** 
if-- 
(-- 
!-- 
string-- 
.-- 
IsNullOrEmpty-- )
(--) *
sortBy--* 0
)--0 1
)--1 2
{.. 
courseReports// !
=//" #
isAscending//$ /
==//0 2
true//3 7
?00 
courseReports00 '
.00' (
OrderBy00( /
(00/ 0
cr000 2
=>003 5
EF006 8
.008 9
Property009 A
<00A B
object00B H
>00H I
(00I J
cr00J L
,00L M
sortBy00N T
)00T U
)00U V
.00V W
ToList00W ]
(00] ^
)00^ _
:11 
courseReports11 '
.11' (
OrderByDescending11( 9
(119 :
cr11: <
=>11= ?
EF11@ B
.11B C
Property11C K
<11K L
object11L R
>11R S
(11S T
cr11T V
,11V W
sortBy11X ^
)11^ _
)11_ `
.11` a
ToList11a g
(11g h
)11h i
;11i j
}22 
courseReports55 
=55 
courseReports55  -
.55- .
Skip55. 2
(552 3
(553 4

pageNumber554 >
-55? @
$num55A B
)55B C
*55D E
pageSize55F N
)55N O
.55O P
Take55P T
(55T U
pageSize55U ]
)55] ^
.55^ _
ToList55_ e
(55e f
)55f g
;55g h
var77 
courseReportDTOs77 $
=77% &
_mapper77' .
.77. /
Map77/ 2
<772 3
List773 7
<777 8
CourseReportDTO778 G
>77G H
>77H I
(77I J
courseReports77J W
)77W X
;77X Y
return99 
new99 
ResponseDTO99 &
{:: 
Message;; 
=;; 
$str;; E
,;;E F
	IsSuccess<< 
=<< 
true<<  $
,<<$ %

StatusCode== 
===  
$num==! $
,==$ %
Result>> 
=>> 
courseReportDTOs>> -
}?? 
;?? 
}@@ 
catchAA 
(AA 
	ExceptionAA 
exAA 
)AA  
{BB 
returnCC 
newCC 
ResponseDTOCC &
{DD 
MessageEE 
=EE 
exEE  
.EE  !
MessageEE! (
,EE( )
	IsSuccessFF 
=FF 
falseFF  %
,FF% &

StatusCodeGG 
=GG  
$numGG! $
,GG$ %
ResultHH 
=HH 
nullHH !
}II 
;II 
}JJ 
}KK 	
publicMM 
asyncMM 
TaskMM 
<MM 
ResponseDTOMM %
>MM% &
GetCourseReportByIdMM' :
(MM: ;
GuidMM; ?
idMM@ B
)MMB C
{NN 	
tryOO 
{PP 
varQQ 
courseReportQQ  
=QQ! "
awaitQQ# (
_unitOfWorkQQ) 4
.QQ4 5"
CourseReportRepositoryQQ5 K
.QQK L
GetByIdQQL S
(QQS T
idQQT V
)QQV W
;QQW X
ifRR 
(RR 
courseReportRR  
==RR! #
nullRR$ (
)RR( )
{SS 
returnTT 
newTT 
ResponseDTOTT *
{UU 
MessageVV 
=VV  !
$strVV" ;
,VV; <
	IsSuccessWW !
=WW" #
falseWW$ )
,WW) *

StatusCodeXX "
=XX# $
$numXX% (
,XX( )
ResultYY 
=YY  
nullYY! %
}ZZ 
;ZZ 
}[[ 
var]] 
courseReportDTO]] #
=]]$ %
_mapper]]& -
.]]- .
Map]]. 1
<]]1 2
CourseReportDTO]]2 A
>]]A B
(]]B C
courseReport]]C O
)]]O P
;]]P Q
return__ 
new__ 
ResponseDTO__ &
{`` 
Messageaa 
=aa 
$straa D
,aaD E
	IsSuccessbb 
=bb 
truebb  $
,bb$ %

StatusCodecc 
=cc  
$numcc! $
,cc$ %
Resultdd 
=dd 
courseReportDTOdd ,
}ee 
;ee 
}ff 
catchgg 
(gg 
	Exceptiongg 
exgg 
)gg  
{hh 
returnii 
newii 
ResponseDTOii &
{jj 
Messagekk 
=kk 
exkk  
.kk  !
Messagekk! (
,kk( )
	IsSuccessll 
=ll 
falsell  %
,ll% &

StatusCodemm 
=mm  
$nummm! $
,mm$ %
Resultnn 
=nn 
nullnn !
}oo 
;oo 
}pp 
}qq 	
publicss 
asyncss 
Taskss 
<ss 
ResponseDTOss %
>ss% &
CreateCourseReportss' 9
(ss9 :!
CreateCourseReportDTOss: O!
createCourseReportDTOssP e
)sse f
{tt 	
tryuu 
{vv 
varww 
courseww 
=ww 
awaitww "
_unitOfWorkww# .
.ww. /
CourseRepositoryww/ ?
.ww? @
GetByIdww@ G
(wwG H!
createCourseReportDTOwwH ]
.ww] ^
CourseIdww^ f
)wwf g
;wwg h
ifxx 
(xx 
coursexx 
==xx 
nullxx "
)xx" #
{yy 
returnzz 
newzz 
ResponseDTOzz *
{{{ 
Message|| 
=||  !
$str||" 4
,||4 5
	IsSuccess}} !
=}}" #
false}}$ )
,}}) *

StatusCode~~ "
=~~# $
$num~~% (
,~~( )
Result 
=  
null! %
}
ÄÄ 
;
ÄÄ 
}
ÅÅ 
var
ÉÉ 
student
ÉÉ 
=
ÉÉ 
await
ÉÉ #
_unitOfWork
ÉÉ$ /
.
ÉÉ/ 0
StudentRepository
ÉÉ0 A
.
ÉÉA B
GetById
ÉÉB I
(
ÉÉI J#
createCourseReportDTO
ÉÉJ _
.
ÉÉ_ `
	StudentId
ÉÉ` i
)
ÉÉi j
;
ÉÉj k
if
ÑÑ 
(
ÑÑ 
student
ÑÑ 
==
ÑÑ 
null
ÑÑ #
)
ÑÑ# $
{
ÖÖ 
return
ÜÜ 
new
ÜÜ 
ResponseDTO
ÜÜ *
{
áá 
Message
àà 
=
àà  !
$str
àà" 5
,
àà5 6
	IsSuccess
ââ !
=
ââ" #
false
ââ$ )
,
ââ) *

StatusCode
ää "
=
ää# $
$num
ää% (
,
ää( )
Result
ãã 
=
ãã  
null
ãã! %
}
åå 
;
åå 
}
çç 
var
èè 
courseReport
èè  
=
èè! "
new
èè# &
CourseReport
èè' 3
{
êê 
Id
ëë 
=
ëë 
Guid
ëë 
.
ëë 
NewGuid
ëë %
(
ëë% &
)
ëë& '
,
ëë' (
CourseId
íí 
=
íí #
createCourseReportDTO
íí 4
.
íí4 5
CourseId
íí5 =
,
íí= >
	StudentId
ìì 
=
ìì #
createCourseReportDTO
ìì  5
.
ìì5 6
	StudentId
ìì6 ?
,
ìì? @
Message
îî 
=
îî #
createCourseReportDTO
îî 3
.
îî3 4
Message
îî4 ;
,
îî; <
	CreatedBy
ïï 
=
ïï #
createCourseReportDTO
ïï  5
.
ïï5 6
	StudentId
ïï6 ?
.
ïï? @
ToString
ïï@ H
(
ïïH I
)
ïïI J
,
ïïJ K
CreatedTime
ññ 
=
ññ  !
DateTime
ññ" *
.
ññ* +
UtcNow
ññ+ 1
,
ññ1 2
Status
óó 
=
óó 
$num
óó 
}
òò 
;
òò 
await
öö 
_unitOfWork
öö !
.
öö! "$
CourseReportRepository
öö" 8
.
öö8 9
AddAsync
öö9 A
(
ööA B
courseReport
ööB N
)
ööN O
;
ööO P
await
õõ 
_unitOfWork
õõ !
.
õõ! "
	SaveAsync
õõ" +
(
õõ+ ,
)
õõ, -
;
õõ- .
return
ùù 
new
ùù 
ResponseDTO
ùù &
{
ûû 
Message
üü 
=
üü 
$str
üü B
,
üüB C
	IsSuccess
†† 
=
†† 
true
††  $
,
††$ %

StatusCode
°° 
=
°°  
$num
°°! $
,
°°$ %
Result
¢¢ 
=
¢¢ 
courseReport
¢¢ )
.
¢¢) *
Id
¢¢* ,
}
££ 
;
££ 
}
§§ 
catch
•• 
(
•• 
	Exception
•• 
ex
•• 
)
••  
{
¶¶ 
return
ßß 
new
ßß 
ResponseDTO
ßß &
{
®® 
Message
©© 
=
©© 
ex
©©  
.
©©  !
Message
©©! (
,
©©( )
	IsSuccess
™™ 
=
™™ 
false
™™  %
,
™™% &

StatusCode
´´ 
=
´´  
$num
´´! $
,
´´$ %
Result
¨¨ 
=
¨¨ 
null
¨¨ !
}
≠≠ 
;
≠≠ 
}
ÆÆ 
}
ØØ 	
public
±± 
async
±± 
Task
±± 
<
±± 
ResponseDTO
±± %
>
±±% & 
UpdateCourseReport
±±' 9
(
±±9 :
ClaimsPrincipal
±±: I
User
±±J N
,
±±N O#
UpdateCourseReportDTO
±±O d#
updateCourseReportDTO
±±e z
)
±±z {
{
≤≤ 	
try
≥≥ 
{
¥¥ 
var
µµ 
userId
µµ 
=
µµ 
User
µµ !
.
µµ! "
Claims
µµ" (
.
µµ( )
FirstOrDefault
µµ) 7
(
µµ7 8
x
µµ8 9
=>
µµ: <
x
µµ= >
.
µµ> ?
Type
µµ? C
==
µµD F

ClaimTypes
µµG Q
.
µµQ R
NameIdentifier
µµR `
)
µµ` a
?
µµa b
.
µµb c
Value
µµc h
;
µµh i
if
∑∑ 
(
∑∑ 
userId
∑∑ 
is
∑∑ 
null
∑∑ "
)
∑∑" #
{
∏∏ 
return
ππ 
new
ππ 
ResponseDTO
ππ *
{
∫∫ 
Message
ªª 
=
ªª  !
$str
ªª" 2
,
ªª2 3
Result
ºº 
=
ºº  
null
ºº! %
,
ºº% &
	IsSuccess
ΩΩ !
=
ΩΩ" #
false
ΩΩ$ )
,
ΩΩ) *

StatusCode
ææ "
=
ææ# $
$num
ææ% (
}
øø 
;
øø 
}
¿¿ 
var
¬¬ 
courseReport
¬¬  
=
¬¬! "
await
¬¬# (
_unitOfWork
¬¬) 4
.
¬¬4 5$
CourseReportRepository
¬¬5 K
.
¬¬K L
GetById
¬¬L S
(
¬¬S T#
updateCourseReportDTO
¬¬T i
.
¬¬i j
Id
¬¬j l
)
¬¬l m
;
¬¬m n
if
√√ 
(
√√ 
courseReport
√√  
==
√√! #
null
√√$ (
)
√√( )
{
ƒƒ 
return
≈≈ 
new
≈≈ 
ResponseDTO
≈≈ *
{
∆∆ 
Message
«« 
=
««  !
$str
««" ;
,
««; <
	IsSuccess
»» !
=
»»" #
false
»»$ )
,
»») *

StatusCode
…… "
=
……# $
$num
……% (
,
……( )
Result
   
=
    
null
  ! %
}
ÀÀ 
;
ÀÀ 
}
ÃÃ 
courseReport
ŒŒ 
.
ŒŒ 
Message
ŒŒ $
=
ŒŒ% &#
updateCourseReportDTO
ŒŒ' <
.
ŒŒ< =
Message
ŒŒ= D
;
ŒŒD E
courseReport
œœ 
.
œœ 
	UpdatedBy
œœ &
=
œœ' (
userId
œœ) /
;
œœ/ 0
courseReport
–– 
.
–– 
UpdatedTime
–– (
=
––) *
DateTime
––+ 3
.
––3 4
UtcNow
––4 :
;
––: ;
_unitOfWork
““ 
.
““ $
CourseReportRepository
““ 2
.
““2 3
Update
““3 9
(
““9 :
courseReport
““: F
)
““F G
;
““G H
await
”” 
_unitOfWork
”” !
.
””! "
	SaveAsync
””" +
(
””+ ,
)
””, -
;
””- .
return
’’ 
new
’’ 
ResponseDTO
’’ &
{
÷÷ 
Message
◊◊ 
=
◊◊ 
$str
◊◊ B
,
◊◊B C
	IsSuccess
ÿÿ 
=
ÿÿ 
true
ÿÿ  $
,
ÿÿ$ %

StatusCode
ŸŸ 
=
ŸŸ  
$num
ŸŸ! $
,
ŸŸ$ %
Result
⁄⁄ 
=
⁄⁄ 
courseReport
⁄⁄ )
.
⁄⁄) *
Id
⁄⁄* ,
}
€€ 
;
€€ 
}
‹‹ 
catch
›› 
(
›› 
	Exception
›› 
ex
›› 
)
››  
{
ﬁﬁ 
return
ﬂﬂ 
new
ﬂﬂ 
ResponseDTO
ﬂﬂ &
{
‡‡ 
Message
·· 
=
·· 
ex
··  
.
··  !
Message
··! (
,
··( )
	IsSuccess
‚‚ 
=
‚‚ 
false
‚‚  %
,
‚‚% &

StatusCode
„„ 
=
„„  
$num
„„! $
,
„„$ %
Result
‰‰ 
=
‰‰ 
null
‰‰ !
}
ÂÂ 
;
ÂÂ 
}
ÊÊ 
}
ÁÁ 	
public
ÈÈ 
async
ÈÈ 
Task
ÈÈ 
<
ÈÈ 
ResponseDTO
ÈÈ %
>
ÈÈ% & 
DeleteCourseReport
ÈÈ' 9
(
ÈÈ9 :
Guid
ÈÈ: >
id
ÈÈ? A
)
ÈÈA B
{
ÍÍ 	
try
ÎÎ 
{
ÏÏ 
var
ÌÌ 
courseReport
ÌÌ  
=
ÌÌ! "
await
ÌÌ# (
_unitOfWork
ÌÌ) 4
.
ÌÌ4 5$
CourseReportRepository
ÌÌ5 K
.
ÌÌK L
GetById
ÌÌL S
(
ÌÌS T
id
ÌÌT V
)
ÌÌV W
;
ÌÌW X
if
ÓÓ 
(
ÓÓ 
courseReport
ÓÓ  
==
ÓÓ! #
null
ÓÓ$ (
)
ÓÓ( )
{
ÔÔ 
return
 
new
 
ResponseDTO
 *
{
ÒÒ 
Message
ÚÚ 
=
ÚÚ  !
$str
ÚÚ" ;
,
ÚÚ; <
	IsSuccess
ÛÛ !
=
ÛÛ" #
false
ÛÛ$ )
,
ÛÛ) *

StatusCode
ÙÙ "
=
ÙÙ# $
$num
ÙÙ% (
,
ÙÙ( )
Result
ıı 
=
ıı  
null
ıı! %
}
ˆˆ 
;
ˆˆ 
}
˜˜ 
courseReport
˘˘ 
.
˘˘ 
Status
˘˘ #
=
˘˘$ %
$num
˘˘& '
;
˘˘' (
courseReport
˙˙ 
.
˙˙ 
UpdatedTime
˙˙ (
=
˙˙) *
DateTime
˙˙+ 3
.
˙˙3 4
UtcNow
˙˙4 :
;
˙˙: ;
_unitOfWork
¸¸ 
.
¸¸ $
CourseReportRepository
¸¸ 2
.
¸¸2 3
Update
¸¸3 9
(
¸¸9 :
courseReport
¸¸: F
)
¸¸F G
;
¸¸G H
await
˝˝ 
_unitOfWork
˝˝ !
.
˝˝! "
	SaveAsync
˝˝" +
(
˝˝+ ,
)
˝˝, -
;
˝˝- .
return
ˇˇ 
new
ˇˇ 
ResponseDTO
ˇˇ &
{
ÄÄ 
Message
ÅÅ 
=
ÅÅ 
$str
ÅÅ B
,
ÅÅB C
	IsSuccess
ÇÇ 
=
ÇÇ 
true
ÇÇ  $
,
ÇÇ$ %

StatusCode
ÉÉ 
=
ÉÉ  
$num
ÉÉ! $
,
ÉÉ$ %
Result
ÑÑ 
=
ÑÑ 
null
ÑÑ !
}
ÖÖ 
;
ÖÖ 
}
ÜÜ 
catch
áá 
(
áá 
	Exception
áá 
ex
áá 
)
áá  
{
àà 
return
ââ 
new
ââ 
ResponseDTO
ââ &
{
ää 
Message
ãã 
=
ãã 
ex
ãã  
.
ãã  !
Message
ãã! (
,
ãã( )
	IsSuccess
åå 
=
åå 
false
åå  %
,
åå% &

StatusCode
çç 
=
çç  
$num
çç! $
,
çç$ %
Result
éé 
=
éé 
null
éé !
}
èè 
;
èè 
}
êê 
}
ëë 	
}
íí 
}îî ‘î
nD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\CourseProgressService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class !
CourseProgressService "
:# $"
ICourseProgressService% ;
{		 
private

 
readonly

 
IUnitOfWork

  
_unitOfWork

! ,
;

, -
public 
!
CourseProgressService  
( 
IUnitOfWork 

unitOfWork 
) 
{ 
_unitOfWork 
= 

unitOfWork  
;  !
} 
public 

async 
Task 
< 
ResponseDTO !
>! "
CreateProgress# 1
(1 2
CreateProgressDTO2 C
createProgressDtoD U
)U V
{ 
try 
{ 	
var 
studentCourse 
= 
await 
_unitOfWork !
.! "#
StudentCourseRepository" 9
.9 :
GetAsync: B
(B C
xC D
=>E G
xH I
.I J
IdJ L
==M O
createProgressDtoP a
.a b
StudentCourseIdb q
)q r
;r s
if 
( 
studentCourse 
is  
null! %
)% &
{ 
return 
new 
ResponseDTO &
(& '
)' (
{ 
Message 
= 
$str <
,< =
	IsSuccess   
=   
false    %
,  % &

StatusCode!! 
=!!  
$num!!! $
,!!$ %
Result"" 
="" 
null"" !
}## 
;## 
}$$ 
var&& 
courseProgress&& 
=&&  
await&&! &
_unitOfWork&&' 2
.&&2 3$
CourseProgressRepository&&3 K
.'' 
GetAsync'' 
('' 
x'' 
=>'' 
x''  
.''  !
StudentCourseId''! 0
==''1 3
studentCourse''4 A
.''A B
Id''B D
)''D E
;''E F
if)) 
()) 
courseProgress)) 
is)) !
not))" %
null))& *
)))* +
{** 
return++ 
new++ 
ResponseDTO++ &
(++& '
)++' (
{,, 
Message-- 
=-- 
$str-- @
,--@ A
	IsSuccess.. 
=.. 
false..  %
,..% &

StatusCode// 
=//  
$num//! $
,//$ %
Result00 
=00 
null00 !
}11 
;11 
}22 
var44 
courseVersionId44 
=44  !
_unitOfWork44" -
.44- .
CourseRepository44. >
.55 
GetAsync55 
(55 
x55 
=>55 
x55  
.55  !
Id55! #
==55$ &
studentCourse55' 4
.554 5
CourseId555 =
)55= >
.66 

GetAwaiter66 
(66 
)66 
.77 
	GetResult77 
(77 
)77 
!77 
.88 
CourseVersionId88  
;88  !
var:: 
sectionVersions:: 
=::  !
await::" '
_unitOfWork::( 3
.::3 4*
CourseSectionVersionRepository::4 R
.;; 
GetAllAsync;; 
(;; 
x;; 
=>;; !
x;;" #
.;;# $
CourseVersionId;;$ 3
==;;4 6
courseVersionId;;7 F
);;F G
;;;G H
var== 
rootSectionsDetails== #
===$ %
new==& )
List==* .
<==. /!
SectionDetailsVersion==/ D
>==D E
(==E F
)==F G
;==G H
foreach>> 
(>> 
var>> 
sectionVersion>> '
in>>( *
sectionVersions>>+ :
)>>: ;
{?? 
var@@ 
sectionsDetails@@ #
=@@$ %
await@@& +
_unitOfWork@@, 7
.@@7 8+
SectionDetailsVersionRepository@@8 W
.AA 
GetAllAsyncAA  
(AA  !
xAA! "
=>AA# %
xAA& '
.AA' ("
CourseSectionVersionIdAA( >
==AA? A
sectionVersionAAB P
.AAP Q
IdAAQ S
)AAS T
;AAT U
rootSectionsDetailsBB #
.BB# $
AddRangeBB$ ,
(BB, -
sectionsDetailsBB- <
)BB< =
;BB= >
}CC 
varEE 
coursesProgressesEE !
=EE" #
rootSectionsDetailsEE$ 7
.EE7 8
SelectEE8 >
(EE> ?
xEE? @
=>EEA C
newEED G
CourseProgressEEH V
(EEV W
)EEW X
{FF 
IdGG 
=GG 
GuidGG 
.GG 
NewGuidGG !
(GG! "
)GG" #
,GG# $
CourseIdHH 
=HH 
studentCourseHH (
.HH( )
CourseIdHH) 1
,HH1 2
CompletedTimeII 
=II 
nullII  $
,II$ %
	DetailsIdJJ 
=JJ 
xJJ 
.JJ 
IdJJ  
,JJ  !
IsCompletedKK 
=KK 
falseKK #
,KK# $
	SectionIdLL 
=LL 
xLL 
.LL "
CourseSectionVersionIdLL 4
,LL4 5
StudentCourseIdMM 
=MM  !
studentCourseMM" /
.MM/ 0
IdMM0 2
,MM2 3
}NN 
)NN 
;NN 
awaitPP 
_unitOfWorkPP 
.PP $
CourseProgressRepositoryPP 6
.PP6 7
AddRangeAsyncPP7 D
(PPD E
coursesProgressesPPE V
)PPV W
;PPW X
awaitQQ 
_unitOfWorkQQ 
.QQ 
	SaveAsyncQQ '
(QQ' (
)QQ( )
;QQ) *
returnSS 
newSS 
ResponseDTOSS "
(SS" #
)SS# $
{TT 
	IsSuccessUU 
=UU 
trueUU  
,UU  !

StatusCodeVV 
=VV 
$numVV  
,VV  !
ResultWW 
=WW 
nullWW 
,WW 
MessageXX 
=XX 
$strXX ?
}YY 
;YY 
}ZZ 	
catch[[ 
([[ 
	Exception[[ 
e[[ 
)[[ 
{\\ 	
return]] 
new]] 
ResponseDTO]] "
(]]" #
)]]# $
{^^ 
	IsSuccess__ 
=__ 
false__ !
,__! "

StatusCode`` 
=`` 
$num``  
,``  !
Resultaa 
=aa 
nullaa 
,aa 
Messagebb 
=bb 
ebb 
.bb 
Messagebb #
}cc 
;cc 
}dd 	
}ee 
publicgg 

asyncgg 
Taskgg 
<gg 
ResponseDTOgg !
>gg! "
UpdateProgressgg# 1
(gg1 2
UpdateProgressDTOgg2 C
updateProgressDtoggD U
)ggU V
{hh 
tryii 
{jj 	
varkk 
studentCoursekk 
=kk 
awaitkk  %
_unitOfWorkkk& 1
.kk1 2#
StudentCourseRepositorykk2 I
.ll 
GetAsyncll 
(ll 
xmm 
=>mm 
xmm 
.mm 
CourseIdmm #
==mm$ &
updateProgressDtomm' 8
.mm8 9
CourseIdmm9 A
&&nn 
xnn 
.nn 
	StudentIdnn '
==nn( *
updateProgressDtonn+ <
.nn< =
	StudentIdnn= F
)oo 
;oo 
ifqq 
(qq 
studentCourseqq 
isqq  
nullqq! %
)qq% &
{rr 
returnss 
newss 
ResponseDTOss &
(ss& '
)ss' (
{tt 
Messageuu 
=uu 
$struu <
,uu< =
	IsSuccessvv 
=vv 
falsevv  %
,vv% &

StatusCodeww 
=ww  
$numww! $
,ww$ %
Resultxx 
=xx 
nullxx !
}yy 
;yy 
}zz 
var|| 
courseProgress|| 
=||  
await||! &
_unitOfWork||' 2
.||2 3$
CourseProgressRepository||3 K
.||K L
GetAsync||L T
(}} 
x~~ 
=>~~ 
x~~ 
.~~ 
StudentCourseId~~ &
==~~' )
studentCourse~~* 7
.~~7 8
Id~~8 :
&& 
x 
. 
CourseId "
==# %
studentCourse& 3
.3 4
CourseId4 <
&&
ÄÄ 
x
ÄÄ 
.
ÄÄ 
	SectionId
ÄÄ #
==
ÄÄ$ &
updateProgressDto
ÄÄ' 8
.
ÄÄ8 9
	SectionId
ÄÄ9 B
&&
ÅÅ 
x
ÅÅ 
.
ÅÅ 
	DetailsId
ÅÅ #
==
ÅÅ$ &
updateProgressDto
ÅÅ' 8
.
ÅÅ8 9
	DetailsId
ÅÅ9 B
)
ÇÇ 
;
ÇÇ 
if
ÑÑ 
(
ÑÑ 
courseProgress
ÑÑ 
is
ÑÑ !
null
ÑÑ" &
)
ÑÑ& '
{
ÖÖ 
return
ÜÜ 
new
ÜÜ 
ResponseDTO
ÜÜ &
(
ÜÜ& '
)
ÜÜ' (
{
áá 
Message
àà 
=
àà 
$str
àà =
,
àà= >
Result
ââ 
=
ââ 
null
ââ !
,
ââ! "
	IsSuccess
ää 
=
ää 
false
ää  %
,
ää% &

StatusCode
ãã 
=
ãã  
$num
ãã! $
}
åå 
;
åå 
}
çç 
courseProgress
èè 
.
èè 
IsCompleted
èè &
=
èè' (
true
èè) -
;
èè- .
courseProgress
êê 
.
êê 
CompletedTime
êê (
=
êê) *
DateTime
êê+ 3
.
êê3 4
Now
êê4 7
;
êê7 8
await
íí 
_unitOfWork
íí 
.
íí 
	SaveAsync
íí '
(
íí' (
)
íí( )
;
íí) *
return
îî 
new
îî 
ResponseDTO
îî "
(
îî" #
)
îî# $
{
ïï 
Message
ññ 
=
ññ 
$str
ññ 8
,
ññ8 9
	IsSuccess
óó 
=
óó 
true
óó  
,
óó  !

StatusCode
òò 
=
òò 
$num
òò  
,
òò  !
Result
ôô 
=
ôô 
null
ôô 
}
öö 
;
öö 
}
õõ 	
catch
úú 
(
úú 
	Exception
úú 
e
úú 
)
úú 
{
ùù 	
return
ûû 
new
ûû 
ResponseDTO
ûû "
(
ûû" #
)
ûû# $
{
üü 
	IsSuccess
†† 
=
†† 
false
†† !
,
††! "

StatusCode
°° 
=
°° 
$num
°°  
,
°°  !
Result
¢¢ 
=
¢¢ 
null
¢¢ 
,
¢¢ 
Message
££ 
=
££ 
e
££ 
.
££ 
Message
££ #
}
§§ 
;
§§ 
}
•• 	
}
¶¶ 
public
®® 

async
®® 
Task
®® 
<
®® 
ResponseDTO
®® !
>
®®! "
GetProgress
®®# .
(
®®. /
GetProgressDTO
®®/ =
getProgressDto
®®> L
)
®®L M
{
©© 
try
™™ 
{
´´ 	
var
¨¨ 
studentCourse
¨¨ 
=
¨¨ 
await
¨¨  %
_unitOfWork
¨¨& 1
.
¨¨1 2%
StudentCourseRepository
¨¨2 I
.
≠≠ 
GetAsync
≠≠ 
(
≠≠ 
x
ÆÆ 
=>
ÆÆ 
x
ÆÆ 
.
ÆÆ 
CourseId
ÆÆ #
==
ÆÆ$ &
getProgressDto
ÆÆ' 5
.
ÆÆ5 6
CourseId
ÆÆ6 >
&&
ØØ 
x
ØØ 
.
ØØ 
	StudentId
ØØ '
==
ØØ( *
getProgressDto
ØØ+ 9
.
ØØ9 :
	StudentId
ØØ: C
)
∞∞ 
;
∞∞ 
if
≤≤ 
(
≤≤ 
studentCourse
≤≤ 
is
≤≤  
null
≤≤! %
)
≤≤% &
{
≥≥ 
return
¥¥ 
new
¥¥ 
ResponseDTO
¥¥ &
(
¥¥& '
)
¥¥' (
{
µµ 
Message
∂∂ 
=
∂∂ 
$str
∂∂ <
,
∂∂< =
	IsSuccess
∑∑ 
=
∑∑ 
false
∑∑  %
,
∑∑% &

StatusCode
∏∏ 
=
∏∏  
$num
∏∏! $
,
∏∏$ %
Result
ππ 
=
ππ 
null
ππ !
}
∫∫ 
;
∫∫ 
}
ªª 
var
ΩΩ 
courseProgress
ΩΩ 
=
ΩΩ  
await
ΩΩ! &
_unitOfWork
ΩΩ' 2
.
ΩΩ2 3&
CourseProgressRepository
ΩΩ3 K
.
ΩΩK L
GetAsync
ΩΩL T
(
ææ 
x
øø 
=>
øø 
x
øø 
.
øø 
StudentCourseId
øø &
==
øø' )
studentCourse
øø* 7
.
øø7 8
Id
øø8 :
&&
¿¿ 
x
¿¿ 
.
¿¿ 
CourseId
¿¿ "
==
¿¿# %
studentCourse
¿¿& 3
.
¿¿3 4
CourseId
¿¿4 <
&&
¡¡ 
x
¡¡ 
.
¡¡ 
	SectionId
¡¡ #
==
¡¡$ &
getProgressDto
¡¡' 5
.
¡¡5 6
	SectionId
¡¡6 ?
&&
¬¬ 
x
¬¬ 
.
¬¬ 
	DetailsId
¬¬ #
==
¬¬$ &
getProgressDto
¬¬' 5
.
¬¬5 6
	DetailsId
¬¬6 ?
)
√√ 
;
√√ 
if
≈≈ 
(
≈≈ 
courseProgress
≈≈ 
is
≈≈ !
null
≈≈" &
)
≈≈& '
{
∆∆ 
return
«« 
new
«« 
ResponseDTO
«« &
(
««& '
)
««' (
{
»» 
Message
…… 
=
…… 
$str
…… =
,
……= >
Result
   
=
   
null
   !
,
  ! "
	IsSuccess
ÀÀ 
=
ÀÀ 
false
ÀÀ  %
,
ÀÀ% &

StatusCode
ÃÃ 
=
ÃÃ  
$num
ÃÃ! $
}
ÕÕ 
;
ÕÕ 
}
ŒŒ 
return
–– 
new
–– 
ResponseDTO
–– "
(
––" #
)
––# $
{
—— 
Result
““ 
=
““ 
courseProgress
““ '
,
““' (
Message
”” 
=
”” 
$str
”” <
,
””< =
	IsSuccess
‘‘ 
=
‘‘ 
true
‘‘  
,
‘‘  !

StatusCode
’’ 
=
’’ 
$num
’’  
}
÷÷ 
;
÷÷ 
}
◊◊ 	
catch
ÿÿ 
(
ÿÿ 
	Exception
ÿÿ 
e
ÿÿ 
)
ÿÿ 
{
ŸŸ 	
Console
⁄⁄ 
.
⁄⁄ 
	WriteLine
⁄⁄ 
(
⁄⁄ 
e
⁄⁄ 
)
⁄⁄  
;
⁄⁄  !
throw
€€ 
;
€€ 
}
‹‹ 	
}
›› 
public
ﬂﬂ 

async
ﬂﬂ 
Task
ﬂﬂ 
<
ﬂﬂ 
ResponseDTO
ﬂﬂ !
>
ﬂﬂ! "
GetPercentage
ﬂﬂ# 0
(
ﬂﬂ0 1
GetPercentageDTO
ﬂﬂ1 A
getPercentageDto
ﬂﬂB R
)
ﬂﬂR S
{
‡‡ 
try
·· 
{
‚‚ 	
var
„„ 
studentCourse
„„ 
=
„„ 
await
„„  %
_unitOfWork
„„& 1
.
„„1 2%
StudentCourseRepository
„„2 I
.
„„I J
GetAsync
„„J R
(
‰‰ 
x
ÂÂ 
=>
ÂÂ 
x
ÂÂ 
.
ÂÂ 
	StudentId
ÂÂ  
==
ÂÂ! #
getPercentageDto
ÂÂ$ 4
.
ÂÂ4 5
	StudentId
ÂÂ5 >
&&
ÊÊ 
x
ÊÊ 
.
ÊÊ 
CourseId
ÊÊ "
==
ÊÊ# %
getPercentageDto
ÊÊ& 6
.
ÊÊ6 7
CourseId
ÊÊ7 ?
)
ÁÁ 
;
ÁÁ 
if
ÈÈ 
(
ÈÈ 
studentCourse
ÈÈ 
is
ÈÈ  
null
ÈÈ! %
)
ÈÈ% &
{
ÍÍ 
return
ÎÎ 
new
ÎÎ 
ResponseDTO
ÎÎ &
(
ÎÎ& '
)
ÎÎ' (
{
ÏÏ 
Message
ÌÌ 
=
ÌÌ 
$str
ÌÌ <
,
ÌÌ< =
	IsSuccess
ÓÓ 
=
ÓÓ 
false
ÓÓ  %
,
ÓÓ% &

StatusCode
ÔÔ 
=
ÔÔ  
$num
ÔÔ! $
,
ÔÔ$ %
Result
 
=
 
null
 !
}
ÒÒ 
;
ÒÒ 
}
ÚÚ 
var
ÙÙ 
courseProgress
ÙÙ 
=
ÙÙ  
await
ÙÙ! &
_unitOfWork
ÙÙ' 2
.
ÙÙ2 3&
CourseProgressRepository
ÙÙ3 K
.
ıı 
GetAllAsync
ıı 
(
ıı 
x
ıı 
=>
ıı !
x
ıı" #
.
ıı# $
StudentCourseId
ıı$ 3
==
ıı4 6
studentCourse
ıı7 D
.
ııD E
Id
ııE G
)
ııG H
;
ııH I
var
˜˜ 

percentage
˜˜ 
=
˜˜ 
(
˜˜ 
courseProgress
˜˜ ,
.
˜˜, -
Count
˜˜- 2
(
˜˜2 3
x
˜˜3 4
=>
˜˜5 7
x
˜˜8 9
.
˜˜9 :
IsCompleted
˜˜: E
)
˜˜E F
*
˜˜G H
$num
˜˜I L
)
˜˜L M
/
˜˜N O
courseProgress
˜˜P ^
.
˜˜^ _
Count
˜˜_ d
(
˜˜d e
)
˜˜e f
;
˜˜f g
return
˘˘ 
new
˘˘ 
ResponseDTO
˘˘ "
(
˘˘" #
)
˘˘# $
{
˙˙ 
Message
˚˚ 
=
˚˚ 
$str
˚˚ 7
,
˚˚7 8
	IsSuccess
¸¸ 
=
¸¸ 
true
¸¸  
,
¸¸  !

StatusCode
˝˝ 
=
˝˝ 
$num
˝˝  
,
˝˝  !
Result
˛˛ 
=
˛˛ 

percentage
˛˛ #
}
ˇˇ 
;
ˇˇ 
}
ÄÄ 	
catch
ÅÅ 
(
ÅÅ 
	Exception
ÅÅ 
e
ÅÅ 
)
ÅÅ 
{
ÇÇ 	
return
ÉÉ 
new
ÉÉ 
ResponseDTO
ÉÉ "
(
ÉÉ" #
)
ÉÉ# $
{
ÑÑ 
Message
ÖÖ 
=
ÖÖ 
e
ÖÖ 
.
ÖÖ 
Message
ÖÖ #
,
ÖÖ# $
	IsSuccess
ÜÜ 
=
ÜÜ 
false
ÜÜ !
,
ÜÜ! "

StatusCode
áá 
=
áá 
$num
áá  
,
áá  !
Result
àà 
=
àà 
null
àà 
}
ââ 
;
ââ 
}
ää 	
}
ãã 
}åå ª(
gD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\CompanyService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
CompanyService 
: 
ICompanyService -
{		 
private

 
readonly

 
IUnitOfWork

  
_unitOfWork

! ,
;

, -
private 
readonly 
IMapper 
_mapper $
;$ %
public 

CompanyService 
( 
IUnitOfWork %

unitOfWork& 0
,0 1
IMapper2 9
mapper: @
)@ A
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; 
} 
public 

async 
Task 
< 
ResponseDTO !
>! "

GetCompany# -
(- .
). /
{ 
try 
{ 	
var 
company 
= 
await 
_unitOfWork  +
.+ ,
CompanyRepository, =
.= >
GetAsync> F
(F G
cG H
=>I K
cL M
.M N
IdN P
!=Q S
GuidT X
.X Y
EmptyY ^
)^ _
;_ `
if 
( 
company 
== 
null 
)  
{ 
return 
new 
ResponseDTO &
{ 
	IsSuccess 
= 
false  %
,% &
Message 
= 
$str 1
,1 2

StatusCode 
=  
$num! $
} 
; 
}   
return!! 
new!! 
ResponseDTO!! "
{"" 
	IsSuccess## 
=## 
true##  
,##  !
Message$$ 
=$$ 
$str$$ 4
,$$4 5

StatusCode%% 
=%% 
$num%%  
,%%  !
Result&& 
=&& 
company&&  
}'' 
;'' 
}(( 	
catch)) 
()) 
	Exception)) 
ex)) 
))) 
{** 	
return++ 
new++ 
ResponseDTO++ "
{,, 
	IsSuccess-- 
=-- 
false-- !
,--! "
Message.. 
=.. 
ex.. 
... 
Message.. $
,..$ %

StatusCode// 
=// 
$num//  
}00 
;00 
}11 	
}22 
public44 

async44 
Task44 
<44 
ResponseDTO44 !
>44! "
UpdateCompany44# 0
(440 1
UpdateCompanyDTO441 A

companyDto44B L
)44L M
{55 
try66 
{77 	
var88 
company88 
=88 
await88 
_unitOfWork88  +
.88+ ,
CompanyRepository88, =
.88= >
GetAsync88> F
(88F G
c88G H
=>88I K
c88L M
.88M N
Id88N P
==88Q S

companyDto88T ^
.88^ _
Id88_ a
)88a b
;88b c
if99 
(99 
company99 
==99 
null99 
)99  
{:: 
return;; 
new;; 
ResponseDTO;; &
{<< 
	IsSuccess== 
=== 
false==  %
,==% &
Message>> 
=>> 
$str>> 1
,>>1 2

StatusCode?? 
=??  
$num??! $
}@@ 
;@@ 
}AA 
_mapperCC 
.CC 
MapCC 
(CC 

companyDtoCC "
,CC" #
companyCC$ +
)CC+ ,
;CC, -
_unitOfWorkDD 
.DD 
CompanyRepositoryDD )
.DD) *
UpdateDD* 0
(DD0 1
companyDD1 8
)DD8 9
;DD9 :
awaitEE 
_unitOfWorkEE 
.EE 
	SaveAsyncEE '
(EE' (
)EE( )
;EE) *
returnGG 
newGG 
ResponseDTOGG "
{HH 
	IsSuccessII 
=II 
trueII  
,II  !
MessageJJ 
=JJ 
$strJJ 8
,JJ8 9

StatusCodeKK 
=KK 
$numKK  
}LL 
;LL 
}MM 	
catchNN 
(NN 
	ExceptionNN 
exNN 
)NN 
{OO 	
returnPP 
newPP 
ResponseDTOPP "
{QQ 
	IsSuccessRR 
=RR 
falseRR !
,RR! "
MessageSS 
=SS 
exSS 
.SS 
MessageSS $
,SS$ %

StatusCodeTT 
=TT 
$numTT  
}UU 
;UU 
}VV 	
}WW 
}XX ªû
iD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\ClosedXMLService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public		 
class		 
ClosedXMLService		 
:		 
IClosedXMLService		  1
{

 
private 
readonly 
IWebHostEnvironment (
_env) -
;- .
private 
readonly 
IConfiguration #
_config$ +
;+ ,
public 

ClosedXMLService 
( 
IWebHostEnvironment /
env0 3
,3 4
IConfiguration5 C
configD J
)J K
{ 
_env 
= 
env 
; 
_config 
= 
config 
; 
} 
public 

async 
Task 
< 
string 
> !
ExportInstructorExcel 3
(3 4
List4 8
<8 9
InstructorInfoDTO9 J
>J K
instructorInfoDtosL ^
)^ _
{ 
string 
exportFolderPath 
=  !
Path" &
.& '
Combine' .
(. /
_env/ 3
.3 4
ContentRootPath4 C
,C D
_configE L
[L M
$strM o
]o p
)p q
;q r
if 

( 
! 
	Directory 
. 
Exists 
( 
exportFolderPath .
). /
)/ 0
{ 	
	Directory 
. 
CreateDirectory %
(% &
exportFolderPath& 6
)6 7
;7 8
} 	
string   
fileName   
=   
$"   
$str   (
{  ( )
DateTime  ) 1
.  1 2
Now  2 5
:  5 6
$str  6 E
}  E F
$str  F K
"  K L
;  L M
string!! 
filePath!! 
=!! 
Path!! 
.!! 
Combine!! &
(!!& '
exportFolderPath!!' 7
,!!7 8
fileName!!9 A
)!!A B
;!!B C
using## 
(## 
var## 
workBook## 
=## 
new## !

XLWorkbook##" ,
(##, -
)##- .
)##. /
{$$ 	
var%% 
	workSheet%% 
=%% 
workBook%% $
.%%$ %

Worksheets%%% /
.%%/ 0
Add%%0 3
(%%3 4
$str%%4 A
)%%A B
;%%B C
	workSheet(( 
.(( 
Cell(( 
((( 
$num(( 
,(( 
$num(( 
)((  
.((  !
Value((! &
=((' (
$str(() 8
;((8 9
	workSheet)) 
.)) 
Cell)) 
()) 
$num)) 
,)) 
$num)) 
)))  
.))  !
Value))! &
=))' (
$str))) 1
;))1 2
	workSheet** 
.** 
Cell** 
(** 
$num** 
,** 
$num** 
)**  
.**  !
Value**! &
=**' (
$str**) 3
;**3 4
	workSheet++ 
.++ 
Cell++ 
(++ 
$num++ 
,++ 
$num++ 
)++  
.++  !
Value++! &
=++' (
$str++) 0
;++0 1
	workSheet,, 
.,, 
Cell,, 
(,, 
$num,, 
,,, 
$num,, 
),,  
.,,  !
Value,,! &
=,,' (
$str,,) 6
;,,6 7
	workSheet-- 
.-- 
Cell-- 
(-- 
$num-- 
,-- 
$num-- 
)--  
.--  !
Value--! &
=--' (
$str--) 1
;--1 2
	workSheet.. 
... 
Cell.. 
(.. 
$num.. 
,.. 
$num.. 
)..  
...  !
Value..! &
=..' (
$str..) 4
;..4 5
	workSheet// 
.// 
Cell// 
(// 
$num// 
,// 
$num// 
)//  
.//  !
Value//! &
=//' (
$str//) 2
;//2 3
	workSheet00 
.00 
Cell00 
(00 
$num00 
,00 
$num00 
)00  
.00  !
Value00! &
=00' (
$str00) 2
;002 3
	workSheet11 
.11 
Cell11 
(11 
$num11 
,11 
$num11  
)11  !
.11! "
Value11" '
=11( )
$str11* 2
;112 3
	workSheet22 
.22 
Cell22 
(22 
$num22 
,22 
$num22  
)22  !
.22! "
Value22" '
=22( )
$str22* 4
;224 5
	workSheet33 
.33 
Cell33 
(33 
$num33 
,33 
$num33  
)33  !
.33! "
Value33" '
=33( )
$str33* 8
;338 9
	workSheet44 
.44 
Cell44 
(44 
$num44 
,44 
$num44  
)44  !
.44! "
Value44" '
=44( )
$str44* 5
;445 6
	workSheet55 
.55 
Cell55 
(55 
$num55 
,55 
$num55  
)55  !
.55! "
Value55" '
=55( )
$str55* 6
;556 7
forAA 
(AA 
intAA 
iAA 
=AA 
$numAA 
;AA 
iAA 
<AA 
instructorInfoDtosAA  2
.AA2 3
CountAA3 8
;AA8 9
iAA: ;
++AA; =
)AA= >
{BB 
	workSheetCC 
.CC 
CellCC 
(CC 
iCC  
+CC! "
$numCC# $
,CC$ %
$numCC& '
)CC' (
.CC( )
ValueCC) .
=CC/ 0
instructorInfoDtosCC1 C
[CCC D
iCCD E
]CCE F
.CCF G
InstructorIdCCG S
.CCS T
ToStringCCT \
(CC\ ]
)CC] ^
;CC^ _
	workSheetDD 
.DD 
CellDD 
(DD 
iDD  
+DD! "
$numDD# $
,DD$ %
$numDD& '
)DD' (
.DD( )
ValueDD) .
=DD/ 0
instructorInfoDtosDD1 C
[DDC D
iDDD E
]DDE F
.DDF G
UserIdDDG M
;DDM N
	workSheetEE 
.EE 
CellEE 
(EE 
iEE  
+EE! "
$numEE# $
,EE$ %
$numEE& '
)EE' (
.EE( )
ValueEE) .
=EE/ 0
instructorInfoDtosEE1 C
[EEC D
iEED E
]EEE F
.EEF G
FullNameEEG O
;EEO P
	workSheetFF 
.FF 
CellFF 
(FF 
iFF  
+FF! "
$numFF# $
,FF$ %
$numFF& '
)FF' (
.FF( )
ValueFF) .
=FF/ 0
instructorInfoDtosFF1 C
[FFC D
iFFD E
]FFE F
.FFF G
EmailFFG L
;FFL M
	workSheetGG 
.GG 
CellGG 
(GG 
iGG  
+GG! "
$numGG# $
,GG$ %
$numGG& '
)GG' (
.GG( )
ValueGG) .
=GG/ 0
instructorInfoDtosGG1 C
[GGC D
iGGD E
]GGE F
.GGF G
PhoneNumberGGG R
;GGR S
	workSheetHH 
.HH 
CellHH 
(HH 
iHH  
+HH! "
$numHH# $
,HH$ %
$numHH& '
)HH' (
.HH( )
ValueHH) .
=HH/ 0
instructorInfoDtosHH1 C
[HHC D
iHHD E
]HHE F
.HHF G
GenderHHG M
;HHM N
	workSheetII 
.II 
CellII 
(II 
iII  
+II! "
$numII# $
,II$ %
$numII& '
)II' (
.II( )
ValueII) .
=II/ 0
instructorInfoDtosII1 C
[IIC D
iIID E
]IIE F
.IIF G
	BirthDateIIG P
;IIP Q
	workSheetJJ 
.JJ 
CellJJ 
(JJ 
iJJ  
+JJ! "
$numJJ# $
,JJ$ %
$numJJ& '
)JJ' (
.JJ( )
ValueJJ) .
=JJ/ 0
instructorInfoDtosJJ1 C
[JJC D
iJJD E
]JJE F
.JJF G
CountryJJG N
;JJN O
	workSheetKK 
.KK 
CellKK 
(KK 
iKK  
+KK! "
$numKK# $
,KK$ %
$numKK& '
)KK' (
.KK( )
ValueKK) .
=KK/ 0
instructorInfoDtosKK1 C
[KKC D
iKKD E
]KKE F
.KKF G
AddressKKG N
;KKN O
	workSheetLL 
.LL 
CellLL 
(LL 
iLL  
+LL! "
$numLL# $
,LL$ %
$numLL& (
)LL( )
.LL) *
ValueLL* /
=LL0 1
instructorInfoDtosLL2 D
[LLD E
iLLE F
]LLF G
.LLG H
DegreeLLH N
;LLN O
	workSheetMM 
.MM 
CellMM 
(MM 
iMM  
+MM! "
$numMM# $
,MM$ %
$numMM& (
)MM( )
.MM) *
ValueMM* /
=MM0 1
instructorInfoDtosMM2 D
[MMD E
iMME F
]MMF G
.MMG H
IndustryMMH P
;MMP Q
	workSheetNN 
.NN 
CellNN 
(NN 
iNN  
+NN! "
$numNN# $
,NN$ %
$numNN& (
)NN( )
.NN) *
ValueNN* /
=NN0 1
instructorInfoDtosNN2 D
[NND E
iNNE F
]NNF G
.NNG H
IntroductionNNH T
;NNT U
	workSheetOO 
.OO 
CellOO 
(OO 
iOO  
+OO! "
$numOO# $
,OO$ %
$numOO& (
)OO( )
.OO) *
ValueOO* /
=OO0 1
instructorInfoDtosOO2 D
[OOD E
iOOE F
]OOF G
.OOG H
	TaxNumberOOH Q
;OOQ R
	workSheetPP 
.PP 
CellPP 
(PP 
iPP  
+PP! "
$numPP# $
,PP$ %
$numPP& (
)PP( )
.PP) *
ValuePP* /
=PP0 1
instructorInfoDtosPP2 D
[PPD E
iPPE F
]PPF G
.PPG H

IsAcceptedPPH R
.PPR S
ToStringPPS [
(PP[ \
)PP\ ]
;PP] ^
}QQ 
	workSheetSS 
.SS 
ColumnsSS 
(SS 
)SS 
.SS  
AdjustToContentsSS  0
(SS0 1
)SS1 2
;SS2 3
workBook__ 
.__ 
SaveAs__ 
(__ 
filePath__ $
)__$ %
;__% &
returnpp 
fileNamepp 
;pp 
}qq 	
}rr 
publictt 

asynctt 
Tasktt 
<tt 
stringtt 
>tt 
ExportStudentExceltt 0
(tt0 1
Listtt1 5
<tt5 6
StudentFullInfoDTOtt6 H
>ttH I
studentInfoDtosttJ Y
)ttY Z
{uu 
stringww 

exportFolderPathww 
=ww 
Pathww "
.ww" #
Combineww# *
(ww* +
_envww+ /
.ww/ 0
ContentRootPathww0 ?
,ww? @
_configwwA H
[wwH I
$strwwI m
]wwm n
)wwn o
;wwo p
ifzz 
(zz 
!zz 	
	Directoryzz	 
.zz 
Existszz 
(zz 
exportFolderPathzz *
)zz* +
)zz+ ,
{{{ 
	Directory|| 
.|| 
CreateDirectory|| !
(||! "
exportFolderPath||" 2
)||2 3
;||3 4
}}} 
string
ÄÄ 

fileNameStudent
ÄÄ 
=
ÄÄ 
$"
ÄÄ 
$str
ÄÄ (
{
ÄÄ( )
DateTime
ÄÄ) 1
.
ÄÄ1 2
Now
ÄÄ2 5
:
ÄÄ5 6
$str
ÄÄ6 E
}
ÄÄE F
$str
ÄÄF K
"
ÄÄK L
;
ÄÄL M
string
ÅÅ 

filePath
ÅÅ 
=
ÅÅ 
Path
ÅÅ 
.
ÅÅ 
Combine
ÅÅ "
(
ÅÅ" #
exportFolderPath
ÅÅ# 3
,
ÅÅ3 4
fileNameStudent
ÅÅ5 D
)
ÅÅD E
;
ÅÅE F
using
ÉÉ 	
(
ÉÉ
 
var
ÉÉ 
workBook
ÉÉ 
=
ÉÉ 
new
ÉÉ 

XLWorkbook
ÉÉ (
(
ÉÉ( )
)
ÉÉ) *
)
ÉÉ* +
{
ÑÑ 
var
ÖÖ 
	workSheet
ÖÖ 
=
ÖÖ 
workBook
ÖÖ  
.
ÖÖ  !

Worksheets
ÖÖ! +
.
ÖÖ+ ,
Add
ÖÖ, /
(
ÖÖ/ 0
$str
ÖÖ0 :
)
ÖÖ: ;
;
ÖÖ; <
	workSheet
àà 
.
àà 
Cell
àà 
(
àà 
$num
àà 
,
àà 
$num
àà 
)
àà 
.
àà 
Value
àà "
=
àà# $
$str
àà% 1
;
àà1 2
	workSheet
ââ 
.
ââ 
Cell
ââ 
(
ââ 
$num
ââ 
,
ââ 
$num
ââ 
)
ââ 
.
ââ 
Value
ââ "
=
ââ# $
$str
ââ% -
;
ââ- .
	workSheet
ää 
.
ää 
Cell
ää 
(
ää 
$num
ää 
,
ää 
$num
ää 
)
ää 
.
ää 
Value
ää "
=
ää# $
$str
ää% /
;
ää/ 0
	workSheet
ãã 
.
ãã 
Cell
ãã 
(
ãã 
$num
ãã 
,
ãã 
$num
ãã 
)
ãã 
.
ãã 
Value
ãã "
=
ãã# $
$str
ãã% ,
;
ãã, -
	workSheet
åå 
.
åå 
Cell
åå 
(
åå 
$num
åå 
,
åå 
$num
åå 
)
åå 
.
åå 
Value
åå "
=
åå# $
$str
åå% 2
;
åå2 3
	workSheet
çç 
.
çç 
Cell
çç 
(
çç 
$num
çç 
,
çç 
$num
çç 
)
çç 
.
çç 
Value
çç "
=
çç# $
$str
çç% -
;
çç- .
	workSheet
éé 
.
éé 
Cell
éé 
(
éé 
$num
éé 
,
éé 
$num
éé 
)
éé 
.
éé 
Value
éé "
=
éé# $
$str
éé% 0
;
éé0 1
	workSheet
èè 
.
èè 
Cell
èè 
(
èè 
$num
èè 
,
èè 
$num
èè 
)
èè 
.
èè 
Value
èè "
=
èè# $
$str
èè% .
;
èè. /
	workSheet
êê 
.
êê 
Cell
êê 
(
êê 
$num
êê 
,
êê 
$num
êê 
)
êê 
.
êê 
Value
êê "
=
êê# $
$str
êê% .
;
êê. /
	workSheet
ëë 
.
ëë 
Cell
ëë 
(
ëë 
$num
ëë 
,
ëë 
$num
ëë 
)
ëë 
.
ëë 
Value
ëë #
=
ëë$ %
$str
ëë& 2
;
ëë2 3
for
îî 
(
îî 
int
îî 
i
îî 
=
îî 
$num
îî 
;
îî 
i
îî 
<
îî 
studentInfoDtos
îî +
.
îî+ ,
Count
îî, 1
;
îî1 2
i
îî3 4
++
îî4 6
)
îî6 7
{
ïï 	
var
ññ 
student
ññ 
=
ññ 
studentInfoDtos
ññ )
[
ññ) *
i
ññ* +
]
ññ+ ,
;
ññ, -
	workSheet
òò 
.
òò 
Cell
òò 
(
òò 
i
òò 
+
òò 
$num
òò  
,
òò  !
$num
òò" #
)
òò# $
.
òò$ %
Value
òò% *
=
òò+ ,
student
òò- 4
.
òò4 5
	StudentId
òò5 >
.
òò> ?
ToString
òò? G
(
òòG H
)
òòH I
;
òòI J
	workSheet
ôô 
.
ôô 
Cell
ôô 
(
ôô 
i
ôô 
+
ôô 
$num
ôô  
,
ôô  !
$num
ôô" #
)
ôô# $
.
ôô$ %
Value
ôô% *
=
ôô+ ,
student
ôô- 4
.
ôô4 5
UserId
ôô5 ;
;
ôô; <
	workSheet
öö 
.
öö 
Cell
öö 
(
öö 
i
öö 
+
öö 
$num
öö  
,
öö  !
$num
öö" #
)
öö# $
.
öö$ %
Value
öö% *
=
öö+ ,
student
öö- 4
.
öö4 5
FullName
öö5 =
;
öö= >
	workSheet
õõ 
.
õõ 
Cell
õõ 
(
õõ 
i
õõ 
+
õõ 
$num
õõ  
,
õõ  !
$num
õõ" #
)
õõ# $
.
õõ$ %
Value
õõ% *
=
õõ+ ,
student
õõ- 4
.
õõ4 5
Email
õõ5 :
;
õõ: ;
	workSheet
úú 
.
úú 
Cell
úú 
(
úú 
i
úú 
+
úú 
$num
úú  
,
úú  !
$num
úú" #
)
úú# $
.
úú$ %
Value
úú% *
=
úú+ ,
student
úú- 4
.
úú4 5
PhoneNumber
úú5 @
;
úú@ A
	workSheet
ùù 
.
ùù 
Cell
ùù 
(
ùù 
i
ùù 
+
ùù 
$num
ùù  
,
ùù  !
$num
ùù" #
)
ùù# $
.
ùù$ %
Value
ùù% *
=
ùù+ ,
student
ùù- 4
.
ùù4 5
Gender
ùù5 ;
;
ùù; <
	workSheet
ûû 
.
ûû 
Cell
ûû 
(
ûû 
i
ûû 
+
ûû 
$num
ûû  
,
ûû  !
$num
ûû" #
)
ûû# $
.
ûû$ %
Value
ûû% *
=
ûû+ ,
student
ûû- 4
.
ûû4 5
	BirthDate
ûû5 >
?
ûû> ?
.
ûû? @
ToString
ûû@ H
(
ûûH I
$str
ûûI U
)
ûûU V
;
ûûV W
	workSheet
üü 
.
üü 
Cell
üü 
(
üü 
i
üü 
+
üü 
$num
üü  
,
üü  !
$num
üü" #
)
üü# $
.
üü$ %
Value
üü% *
=
üü+ ,
student
üü- 4
.
üü4 5
Country
üü5 <
;
üü< =
	workSheet
†† 
.
†† 
Cell
†† 
(
†† 
i
†† 
+
†† 
$num
††  
,
††  !
$num
††" #
)
††# $
.
††$ %
Value
††% *
=
††+ ,
student
††- 4
.
††4 5
Address
††5 <
;
††< =
	workSheet
°° 
.
°° 
Cell
°° 
(
°° 
i
°° 
+
°° 
$num
°°  
,
°°  !
$num
°°" $
)
°°$ %
.
°°% &
Value
°°& +
=
°°, -
student
°°. 5
.
°°5 6

University
°°6 @
;
°°@ A
}
¢¢ 	
	workSheet
§§ 
.
§§ 
Columns
§§ 
(
§§ 
)
§§ 
.
§§ 
AdjustToContents
§§ ,
(
§§, -
)
§§- .
;
§§. /
workBook
ßß 
.
ßß 
SaveAs
ßß 
(
ßß 
filePath
ßß  
)
ßß  !
;
ßß! "
return
©© 
fileNameStudent
©© 
;
©© 
}
™™ 
}´´ 
}¨¨ †Ä
hD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\CategoryService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
CategoryService 
: 
ICategoryService /
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
IMapper 
_mapper $
;$ %
public 

CategoryService 
( 
IUnitOfWork &

unitOfWork' 1
,1 2
IMapper3 :
mapper; A
)A B
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; 
} 
public 

async 
Task 
< 
ResponseDTO !
>! "
GetAll# )
( 
ClaimsPrincipal 
User 
, 
string   
?   
filterOn   
,   
string!! 
?!! 
filterQuery!! 
,!! 
string"" 
?"" 
sortBy"" 
,"" 
bool## 
?## 
isAscending## 
,## 
int$$ 

pageNumber$$ 
,$$ 
int%% 
pageSize%% 
)%% 
{&& 
try'' 
{(( 	
var)) 
userRole)) 
=)) 
User)) 
.))  
Claims))  &
.))& '
FirstOrDefault))' 5
())5 6
x))6 7
=>))8 :
x)); <
.))< =
Type))= A
==))B D

ClaimTypes))E O
.))O P
Role))P T
)))T U
?))U V
.))V W
Value))W \
;))\ ]
IEnumerable++ 
<++ 
Category++  
>++  !

categories++" ,
;++, -
if.. 
(.. 
userRole.. 
==.. 
StaticUserRoles.. +
...+ ,
Admin.., 1
)..1 2
{// 

categories00 
=00 
await11 
_unitOfWork11 %
.11% &
CategoryRepository11& 8
.118 9
GetAllAsync119 D
(11D E
)11E F
;11F G
}22 
else33 
{44 

categories55 
=55 
await66 
_unitOfWork66 %
.66% &
CategoryRepository66& 8
.668 9
GetAllAsync669 D
(66D E
x66E F
=>66G I
x77 
.77 
Status77  
<=77! #
StaticStatus77$ 0
.770 1
Category771 9
.779 :
	Activated77: C
)77C D
;77D E
}88 
if:: 
(:: 

categories:: 
.:: 
IsNullOrEmpty:: (
(::( )
)::) *
)::* +
{;; 
return<< 
new<< 
ResponseDTO<< &
(<<& '
)<<' (
{== 
Message>> 
=>> 
$str>> 5
,>>5 6
Result?? 
=?? 
null?? !
,??! "
	IsSuccess@@ 
=@@ 
true@@  $
,@@$ %

StatusCodeAA 
=AA  
$numAA! $
}BB 
;BB 
}CC 
varEE 
listCategoryEE 
=EE 

categoriesEE )
.EE) *
ToListEE* 0
(EE0 1
)EE1 2
;EE2 3
varJJ  
categoriesDictionaryJJ $
=JJ% &
listCategoryJJ' 3
.JJ3 4
ToDictionaryJJ4 @
(JJ@ A
xJJA B
=>JJC E
xJJF G
.JJG H
IdJJH J
,JJJ K
xJJL M
=>JJN P
xJJQ R
)JJR S
;JJS T
varLL 
rootCategoriesLL 
=LL  
newLL! $
ListLL% )
<LL) *
CategoryLL* 2
>LL2 3
(LL3 4
)LL4 5
;LL5 6
foreachNN 
(NN 
varNN 
categoryNN !
inNN" $
listCategoryNN% 1
)NN1 2
{OO 
ifQQ 
(QQ 
categoryQQ 
.QQ 
ParentIdQQ %
.QQ% &
HasValueQQ& .
)QQ. /
{RR 
ifTT 
(TT  
categoriesDictionaryTT ,
.TT, -
TryGetValueTT- 8
(TT8 9
categoryTT9 A
.TTA B
ParentIdTTB J
.TTJ K
ValueTTK P
,TTP Q
outTTR U
varTTV Y
parentCategoryTTZ h
)TTh i
)TTi j
{UU 
parentCategoryWW &
.WW& '
SubCategoriesWW' 4
.WW4 5
AddWW5 8
(WW8 9
categoryWW9 A
)WWA B
;WWB C
}XX 
}YY 
elseZZ 
{[[ 
rootCategories]] "
.]]" #
Add]]# &
(]]& '
category]]' /
)]]/ 0
;]]0 1
}^^ 
}__ 
ifgg 
(gg 
!gg 
stringgg 
.gg 
IsNullOrEmptygg %
(gg% &
filterOngg& .
)gg. /
&&gg0 2
!gg3 4
stringgg4 :
.gg: ;
IsNullOrEmptygg; H
(ggH I
filterQueryggI T
)ggT U
)ggU V
{hh 
switchii 
(ii 
filterOnii  
.ii  !
Trimii! %
(ii% &
)ii& '
.ii' (
ToLowerii( /
(ii/ 0
)ii0 1
)ii1 2
{jj 
casekk 
$strkk 
:kk  
{ll 
rootCategoriesmm &
=mm' (
rootCategoriesmm) 7
.mm7 8
Wheremm8 =
(mm= >
xmm> ?
=>mm@ B
xnn 
.nn 
Namenn "
.nn" #
Containsnn# +
(nn+ ,
filterQuerynn, 7
,nn7 8
StringComparisonnn9 I
.nnI J$
CurrentCultureIgnoreCasennJ b
)nnb c
)nnc d
.nnd e
ToListnne k
(nnk l
)nnl m
;nnm n
breakoo 
;oo 
}pp 
caseqq 
$strqq &
:qq& '
{rr 
rootCategoriesss &
=ss' (
rootCategoriesss) 7
.ss7 8
Wheress8 =
(ss= >
xss> ?
=>ss@ B
xtt 
.tt 
Namett "
.tt" #
Containstt# +
(tt+ ,
filterQuerytt, 7
,tt7 8
StringComparisontt9 I
.ttI J$
CurrentCultureIgnoreCasettJ b
)ttb c
)ttc d
.ttd e
ToListtte k
(ttk l
)ttl m
;ttm n
breakuu 
;uu 
}vv 
defaultww 
:ww 
{xx 
breakyy 
;yy 
}zz 
}{{ 
}|| 
if 
( 
! 
string 
. 
IsNullOrEmpty %
(% &
sortBy& ,
), -
)- .
{
ÄÄ 
switch
ÅÅ 
(
ÅÅ 
sortBy
ÅÅ 
.
ÅÅ 
Trim
ÅÅ #
(
ÅÅ# $
)
ÅÅ$ %
.
ÅÅ% &
ToLower
ÅÅ& -
(
ÅÅ- .
)
ÅÅ. /
)
ÅÅ/ 0
{
ÇÇ 
case
ÉÉ 
$str
ÉÉ 
:
ÉÉ  
{
ÑÑ 
rootCategories
ÖÖ &
=
ÖÖ' (
isAscending
ÖÖ) 4
==
ÖÖ5 7
true
ÖÖ8 <
?
ÜÜ 
[
ÜÜ 
..
ÜÜ !
rootCategories
ÜÜ" 0
.
ÜÜ0 1
OrderBy
ÜÜ1 8
(
ÜÜ8 9
x
ÜÜ9 :
=>
ÜÜ; =
x
ÜÜ> ?
.
ÜÜ? @
Name
ÜÜ@ D
)
ÜÜD E
]
ÜÜE F
:
áá 
[
áá 
..
áá !
rootCategories
áá" 0
.
áá0 1
OrderByDescending
áá1 B
(
ááB C
x
ááC D
=>
ááE G
x
ááH I
.
ááI J
Name
ááJ N
)
ááN O
]
ááO P
;
ááP Q
break
àà 
;
àà 
}
ââ 
case
ää 
$str
ää &
:
ää& '
{
ãã 
rootCategories
åå &
=
åå' (
isAscending
åå) 4
==
åå5 7
true
åå8 <
?
çç 
[
çç 
..
çç !
rootCategories
çç" 0
.
çç0 1
OrderBy
çç1 8
(
çç8 9
x
çç9 :
=>
çç; =
x
çç> ?
.
çç? @
Description
çç@ K
)
ççK L
]
ççL M
:
éé 
[
éé 
..
éé !
rootCategories
éé" 0
.
éé0 1
OrderByDescending
éé1 B
(
ééB C
x
ééC D
=>
ééE G
x
ééH I
.
ééI J
Description
ééJ U
)
ééU V
]
ééV W
;
ééW X
break
èè 
;
èè 
}
êê 
default
ëë 
:
ëë 
{
íí 
break
ìì 
;
ìì 
}
îî 
}
ïï 
}
ññ 
if
ôô 
(
ôô 

pageNumber
ôô 
>
ôô 
$num
ôô 
&&
ôô !
pageSize
ôô" *
>
ôô+ ,
$num
ôô- .
)
ôô. /
{
öö 
var
õõ 

skipResult
õõ 
=
õõ  
(
õõ! "

pageNumber
õõ" ,
-
õõ- .
$num
õõ/ 0
)
õõ0 1
*
õõ2 3
pageSize
õõ4 <
;
õõ< =
rootCategories
úú 
=
úú  
rootCategories
úú! /
.
úú/ 0
Skip
úú0 4
(
úú4 5

skipResult
úú5 ?
)
úú? @
.
úú@ A
Take
úúA E
(
úúE F
pageSize
úúF N
)
úúN O
.
úúO P
ToList
úúP V
(
úúV W
)
úúW X
;
úúX Y
}
ùù 
object
¢¢ 
rootCategoriesDto
¢¢ $
;
¢¢$ %
if
££ 
(
££ 
userRole
££ 
==
££ 
StaticUserRoles
££ +
.
££+ ,
Admin
££, 1
)
££1 2
{
§§ 
rootCategoriesDto
•• !
=
••" #
_mapper
••$ +
.
••+ ,
Map
••, /
<
••/ 0
List
••0 4
<
••4 5
AdminCategoryDTO
••5 E
>
••E F
>
••F G
(
••G H
rootCategories
••H V
)
••V W
;
••W X
}
¶¶ 
else
ßß 
{
®® 
rootCategoriesDto
©© !
=
©©" #
_mapper
©©$ +
.
©©+ ,
Map
©©, /
<
©©/ 0
List
©©0 4
<
©©4 5
CategoryDTO
©©5 @
>
©©@ A
>
©©A B
(
©©B C
rootCategories
©©C Q
)
©©Q R
;
©©R S
}
™™ 
return
¨¨ 
new
¨¨ 
ResponseDTO
¨¨ "
(
¨¨" #
)
¨¨# $
{
≠≠ 
Message
ÆÆ 
=
ÆÆ 
$str
ÆÆ 9
,
ÆÆ9 :
Result
ØØ 
=
ØØ 
rootCategoriesDto
ØØ *
,
ØØ* +
	IsSuccess
∞∞ 
=
∞∞ 
true
∞∞  
,
∞∞  !

StatusCode
±± 
=
±± 
$num
±±  
}
≤≤ 
;
≤≤ 
}
≥≥ 	
catch
¥¥ 
(
¥¥ 
	Exception
¥¥ 
e
¥¥ 
)
¥¥ 
{
µµ 	
return
∂∂ 
new
∂∂ 
ResponseDTO
∂∂ "
(
∂∂" #
)
∂∂# $
{
∑∑ 
Message
∏∏ 
=
∏∏ 
e
∏∏ 
.
∏∏ 
Message
∏∏ #
,
∏∏# $
Result
ππ 
=
ππ 
null
ππ 
,
ππ 
	IsSuccess
∫∫ 
=
∫∫ 
false
∫∫ !
,
∫∫! "

StatusCode
ªª 
=
ªª 
$num
ªª  
}
ºº 
;
ºº 
}
ΩΩ 	
}
ææ 
public
¿¿ 

async
¿¿ 
Task
¿¿ 
<
¿¿ 
ResponseDTO
¿¿ !
>
¿¿! "
Search
¿¿# )
(
¡¡ 
ClaimsPrincipal
¬¬ 
User
¬¬ 
,
¬¬ 
string
√√ 
?
√√ 
filterOn
√√ 
,
√√ 
string
ƒƒ 
?
ƒƒ 
filterQuery
ƒƒ 
,
ƒƒ 
string
≈≈ 
?
≈≈ 
sortBy
≈≈ 
,
≈≈ 
bool
∆∆ 
?
∆∆ 
isAscending
∆∆ 
,
∆∆ 
int
«« 

pageNumber
«« 
,
«« 
int
»» 
pageSize
»» 
)
»» 
{
…… 
try
   
{
ÀÀ 	
var
ÃÃ 
userRole
ÃÃ 
=
ÃÃ 
User
ÃÃ 
.
ÃÃ  
Claims
ÃÃ  &
.
ÃÃ& '
FirstOrDefault
ÃÃ' 5
(
ÃÃ5 6
x
ÃÃ6 7
=>
ÃÃ8 :
x
ÃÃ; <
.
ÃÃ< =
Type
ÃÃ= A
==
ÃÃB D

ClaimTypes
ÃÃE O
.
ÃÃO P
Role
ÃÃP T
)
ÃÃT U
?
ÃÃU V
.
ÃÃV W
Value
ÃÃW \
;
ÃÃ\ ]
IEnumerable
ŒŒ 
<
ŒŒ 
Category
ŒŒ  
>
ŒŒ  !

categories
ŒŒ" ,
;
ŒŒ, -
if
—— 
(
—— 
userRole
—— 
==
—— 
StaticUserRoles
—— +
.
——+ ,
Admin
——, 1
)
——1 2
{
““ 

categories
”” 
=
”” 
await
‘‘ 
_unitOfWork
‘‘ %
.
‘‘% & 
CategoryRepository
‘‘& 8
.
‘‘8 9
GetAllAsync
‘‘9 D
(
‘‘D E
includeProperties
‘‘E V
:
‘‘V W
$str
‘‘X h
)
‘‘h i
;
‘‘i j
}
’’ 
else
÷÷ 
{
◊◊ 

categories
ÿÿ 
=
ÿÿ 
await
ŸŸ 
_unitOfWork
ŸŸ %
.
ŸŸ% & 
CategoryRepository
ŸŸ& 8
.
ŸŸ8 9
GetAllAsync
ŸŸ9 D
(
ŸŸD E
x
ŸŸE F
=>
ŸŸG I
x
⁄⁄ 
.
⁄⁄ 
Status
⁄⁄  
<=
⁄⁄! #
StaticStatus
⁄⁄$ 0
.
⁄⁄0 1
Category
⁄⁄1 9
.
⁄⁄9 :
	Activated
⁄⁄: C
,
⁄⁄C D
includeProperties
⁄⁄E V
:
⁄⁄V W
$str
⁄⁄X h
)
⁄⁄h i
;
⁄⁄i j
}
€€ 
if
›› 
(
›› 

categories
›› 
.
›› 
IsNullOrEmpty
›› (
(
››( )
)
››) *
)
››* +
{
ﬁﬁ 
return
ﬂﬂ 
new
ﬂﬂ 
ResponseDTO
ﬂﬂ &
(
ﬂﬂ& '
)
ﬂﬂ' (
{
‡‡ 
Message
·· 
=
·· 
$str
·· 5
,
··5 6
Result
‚‚ 
=
‚‚ 
null
‚‚ !
,
‚‚! "
	IsSuccess
„„ 
=
„„ 
true
„„  $
,
„„$ %

StatusCode
‰‰ 
=
‰‰  
$num
‰‰! $
}
ÂÂ 
;
ÂÂ 
}
ÊÊ 
var
ËË 
listCategory
ËË 
=
ËË 

categories
ËË )
.
ËË) *
ToList
ËË* 0
(
ËË0 1
)
ËË1 2
;
ËË2 3
if
ÌÌ 
(
ÌÌ 
!
ÌÌ 
string
ÌÌ 
.
ÌÌ 
IsNullOrEmpty
ÌÌ %
(
ÌÌ% &
filterOn
ÌÌ& .
)
ÌÌ. /
&&
ÌÌ0 2
!
ÌÌ3 4
string
ÌÌ4 :
.
ÌÌ: ;
IsNullOrEmpty
ÌÌ; H
(
ÌÌH I
filterQuery
ÌÌI T
)
ÌÌT U
)
ÌÌU V
{
ÓÓ 
switch
ÔÔ 
(
ÔÔ 
filterOn
ÔÔ  
.
ÔÔ  !
Trim
ÔÔ! %
(
ÔÔ% &
)
ÔÔ& '
.
ÔÔ' (
ToLower
ÔÔ( /
(
ÔÔ/ 0
)
ÔÔ0 1
)
ÔÔ1 2
{
 
case
ÒÒ 
$str
ÒÒ 
:
ÒÒ  
{
ÚÚ 
listCategory
ÛÛ $
=
ÛÛ% &
listCategory
ÛÛ' 3
.
ÛÛ3 4
Where
ÛÛ4 9
(
ÛÛ9 :
x
ÛÛ: ;
=>
ÛÛ< >
x
ÙÙ 
.
ÙÙ 
Name
ÙÙ "
.
ÙÙ" #
Contains
ÙÙ# +
(
ÙÙ+ ,
filterQuery
ÙÙ, 7
,
ÙÙ7 8
StringComparison
ÙÙ9 I
.
ÙÙI J&
CurrentCultureIgnoreCase
ÙÙJ b
)
ÙÙb c
)
ÙÙc d
.
ÙÙd e
ToList
ÙÙe k
(
ÙÙk l
)
ÙÙl m
;
ÙÙm n
break
ıı 
;
ıı 
}
ˆˆ 
case
˜˜ 
$str
˜˜ &
:
˜˜& '
{
¯¯ 
listCategory
˘˘ $
=
˘˘% &
listCategory
˘˘' 3
.
˘˘3 4
Where
˘˘4 9
(
˘˘9 :
x
˘˘: ;
=>
˘˘< >
x
˙˙ 
.
˙˙ 
Name
˙˙ "
.
˙˙" #
Contains
˙˙# +
(
˙˙+ ,
filterQuery
˙˙, 7
,
˙˙7 8
StringComparison
˙˙9 I
.
˙˙I J&
CurrentCultureIgnoreCase
˙˙J b
)
˙˙b c
)
˙˙c d
.
˙˙d e
ToList
˙˙e k
(
˙˙k l
)
˙˙l m
;
˙˙m n
break
˚˚ 
;
˚˚ 
}
¸¸ 
default
˝˝ 
:
˝˝ 
{
˛˛ 
break
ˇˇ 
;
ˇˇ 
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 
if
ÖÖ 
(
ÖÖ 
!
ÖÖ 
string
ÖÖ 
.
ÖÖ 
IsNullOrEmpty
ÖÖ %
(
ÖÖ% &
sortBy
ÖÖ& ,
)
ÖÖ, -
)
ÖÖ- .
{
ÜÜ 
switch
áá 
(
áá 
sortBy
áá 
.
áá 
Trim
áá #
(
áá# $
)
áá$ %
.
áá% &
ToLower
áá& -
(
áá- .
)
áá. /
)
áá/ 0
{
àà 
case
ââ 
$str
ââ 
:
ââ  
{
ää 
listCategory
ãã $
=
ãã% &
isAscending
ãã' 2
==
ãã3 5
true
ãã6 :
?
åå 
[
åå 
..
åå !
listCategory
åå" .
.
åå. /
OrderBy
åå/ 6
(
åå6 7
x
åå7 8
=>
åå9 ;
x
åå< =
.
åå= >
Name
åå> B
)
ååB C
]
ååC D
:
çç 
[
çç 
..
çç !
listCategory
çç" .
.
çç. /
OrderByDescending
çç/ @
(
çç@ A
x
ççA B
=>
ççC E
x
ççF G
.
ççG H
Name
ççH L
)
ççL M
]
ççM N
;
ççN O
break
éé 
;
éé 
}
èè 
case
êê 
$str
êê &
:
êê& '
{
ëë 
listCategory
íí $
=
íí% &
isAscending
íí' 2
==
íí3 5
true
íí6 :
?
ìì 
[
ìì 
..
ìì !
listCategory
ìì" .
.
ìì. /
OrderBy
ìì/ 6
(
ìì6 7
x
ìì7 8
=>
ìì9 ;
x
ìì< =
.
ìì= >
Description
ìì> I
)
ììI J
]
ììJ K
:
îî 
[
îî 
..
îî !
listCategory
îî" .
.
îî. /
OrderByDescending
îî/ @
(
îî@ A
x
îîA B
=>
îîC E
x
îîF G
.
îîG H
Description
îîH S
)
îîS T
]
îîT U
;
îîU V
break
ïï 
;
ïï 
}
ññ 
default
óó 
:
óó 
{
òò 
break
ôô 
;
ôô 
}
öö 
}
õõ 
}
úú 
if
üü 
(
üü 

pageNumber
üü 
>
üü 
$num
üü 
&&
üü !
pageSize
üü" *
>
üü+ ,
$num
üü- .
)
üü. /
{
†† 
var
°° 

skipResult
°° 
=
°°  
(
°°! "

pageNumber
°°" ,
-
°°- .
$num
°°/ 0
)
°°0 1
*
°°2 3
pageSize
°°4 <
;
°°< =
listCategory
¢¢ 
=
¢¢ 
listCategory
¢¢ +
.
¢¢+ ,
Skip
¢¢, 0
(
¢¢0 1

skipResult
¢¢1 ;
)
¢¢; <
.
¢¢< =
Take
¢¢= A
(
¢¢A B
pageSize
¢¢B J
)
¢¢J K
.
¢¢K L
ToList
¢¢L R
(
¢¢R S
)
¢¢S T
;
¢¢T U
}
££ 
object
ßß 
listCategoryDto
ßß "
;
ßß" #
if
®® 
(
®® 
userRole
®® 
==
®® 
StaticUserRoles
®® +
.
®®+ ,
Admin
®®, 1
)
®®1 2
{
©© 
listCategoryDto
™™ 
=
™™  !
_mapper
™™" )
.
™™) *
Map
™™* -
<
™™- .
List
™™. 2
<
™™2 3
AdminCategoryDTO
™™3 C
>
™™C D
>
™™D E
(
™™E F
listCategory
™™F R
)
™™R S
;
™™S T
}
´´ 
else
¨¨ 
{
≠≠ 
listCategoryDto
ÆÆ 
=
ÆÆ  !
_mapper
ÆÆ" )
.
ÆÆ) *
Map
ÆÆ* -
<
ÆÆ- .
List
ÆÆ. 2
<
ÆÆ2 3
CategoryDTO
ÆÆ3 >
>
ÆÆ> ?
>
ÆÆ? @
(
ÆÆ@ A
listCategory
ÆÆA M
)
ÆÆM N
;
ÆÆN O
}
ØØ 
return
≤≤ 
new
≤≤ 
ResponseDTO
≤≤ "
(
≤≤" #
)
≤≤# $
{
≥≥ 
Message
¥¥ 
=
¥¥ 
$str
¥¥ 9
,
¥¥9 :
Result
µµ 
=
µµ 
listCategoryDto
µµ (
,
µµ( )
	IsSuccess
∂∂ 
=
∂∂ 
true
∂∂  
,
∂∂  !

StatusCode
∑∑ 
=
∑∑ 
$num
∑∑  
}
∏∏ 
;
∏∏ 
}
ππ 	
catch
∫∫ 
(
∫∫ 
	Exception
∫∫ 
e
∫∫ 
)
∫∫ 
{
ªª 	
return
ºº 
new
ºº 
ResponseDTO
ºº "
(
ºº" #
)
ºº# $
{
ΩΩ 
Message
ææ 
=
ææ 
e
ææ 
.
ææ 
Message
ææ #
,
ææ# $
Result
øø 
=
øø 
null
øø 
,
øø 
	IsSuccess
¿¿ 
=
¿¿ 
false
¿¿ !
,
¿¿! "

StatusCode
¡¡ 
=
¡¡ 
$num
¡¡  
}
¬¬ 
;
¬¬ 
}
√√ 	
}
ƒƒ 
public
∆∆ 

async
∆∆ 
Task
∆∆ 
<
∆∆ 
ResponseDTO
∆∆ !
>
∆∆! "
GetSubCategory
∆∆# 1
(
∆∆1 2
Guid
∆∆2 6
id
∆∆7 9
)
∆∆9 :
{
«« 
try
»» 
{
…… 	
var
   

categories
   
=
   
await
ÀÀ 
_unitOfWork
ÀÀ !
.
ÀÀ! " 
CategoryRepository
ÀÀ" 4
.
ÀÀ4 5
GetAllAsync
ÀÀ5 @
(
ÀÀ@ A
filter
ÀÀA G
:
ÀÀG H
x
ÀÀI J
=>
ÀÀK M
x
ÀÀN O
.
ÀÀO P
ParentId
ÀÀP X
==
ÀÀY [
id
ÀÀ\ ^
)
ÀÀ^ _
;
ÀÀ_ `
if
ÕÕ 
(
ÕÕ 

categories
ÕÕ 
is
ÕÕ 
null
ÕÕ "
)
ÕÕ" #
{
ŒŒ 
return
œœ 
new
œœ 
ResponseDTO
œœ &
(
œœ& '
)
œœ' (
{
–– 
Message
—— 
=
—— 
$str
—— 6
,
——6 7
	IsSuccess
““ 
=
““ 
false
““  %
,
““% &

StatusCode
”” 
=
””  
$num
””! $
,
””$ %
Result
‘‘ 
=
‘‘ 
null
‘‘ !
,
‘‘! "
}
’’ 
;
’’ 
}
÷÷ 
var
ÿÿ 
categoryDto
ÿÿ 
=
ÿÿ 
_mapper
ÿÿ %
.
ÿÿ% &
Map
ÿÿ& )
<
ÿÿ) *
List
ÿÿ* .
<
ÿÿ. /
CategoryDTO
ÿÿ/ :
>
ÿÿ: ;
>
ÿÿ; <
(
ÿÿ< =

categories
ÿÿ= G
)
ÿÿG H
;
ÿÿH I
return
⁄⁄ 
new
⁄⁄ 
ResponseDTO
⁄⁄ "
(
⁄⁄" #
)
⁄⁄# $
{
€€ 
Message
‹‹ 
=
‹‹ 
$str
‹‹ 9
,
‹‹9 :
Result
›› 
=
›› 
categoryDto
›› $
,
››$ %
	IsSuccess
ﬁﬁ 
=
ﬁﬁ 
true
ﬁﬁ  
,
ﬁﬁ  !

StatusCode
ﬂﬂ 
=
ﬂﬂ 
$num
ﬂﬂ  
}
‡‡ 
;
‡‡ 
}
·· 	
catch
‚‚ 
(
‚‚ 
	Exception
‚‚ 
e
‚‚ 
)
‚‚ 
{
„„ 	
return
‰‰ 
new
‰‰ 
ResponseDTO
‰‰ "
(
‰‰" #
)
‰‰# $
{
ÂÂ 
Message
ÊÊ 
=
ÊÊ 
e
ÊÊ 
.
ÊÊ 
Message
ÊÊ #
,
ÊÊ# $
Result
ÁÁ 
=
ÁÁ 
null
ÁÁ 
,
ÁÁ 
	IsSuccess
ËË 
=
ËË 
false
ËË !
,
ËË! "

StatusCode
ÈÈ 
=
ÈÈ 
$num
ÈÈ  
}
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
}
ÏÏ 
public
ÓÓ 

async
ÓÓ 
Task
ÓÓ 
<
ÓÓ 
ResponseDTO
ÓÓ !
>
ÓÓ! "
GetParentCategory
ÓÓ# 4
(
ÓÓ4 5
Guid
ÓÓ5 9
id
ÓÓ: <
)
ÓÓ< =
{
ÔÔ 
try
 
{
ÒÒ 	
var
ÚÚ 
category
ÚÚ 
=
ÚÚ 
await
ÛÛ 
_unitOfWork
ÛÛ !
.
ÛÛ! " 
CategoryRepository
ÛÛ" 4
.
ÛÛ4 5
GetAsync
ÛÛ5 =
(
ÛÛ= >
filter
ÛÛ> D
:
ÛÛD E
x
ÛÛF G
=>
ÛÛH J
x
ÛÛK L
.
ÛÛL M
Id
ÛÛM O
==
ÛÛP R
id
ÛÛS U
)
ÛÛU V
;
ÛÛV W
if
ıı 
(
ıı 
category
ıı 
is
ıı 
null
ıı  
)
ıı  !
{
ˆˆ 
return
˜˜ 
new
˜˜ 
ResponseDTO
˜˜ &
(
˜˜& '
)
˜˜' (
{
¯¯ 
Message
˘˘ 
=
˘˘ 
$str
˘˘ 6
,
˘˘6 7
	IsSuccess
˙˙ 
=
˙˙ 
false
˙˙  %
,
˙˙% &

StatusCode
˚˚ 
=
˚˚  
$num
˚˚! $
,
˚˚$ %
Result
¸¸ 
=
¸¸ 
null
¸¸ !
,
¸¸! "
}
˝˝ 
;
˝˝ 
}
˛˛ 
var
ÄÄ 
parentCategory
ÄÄ 
=
ÄÄ  
await
ÄÄ! &
_unitOfWork
ÄÄ' 2
.
ÄÄ2 3 
CategoryRepository
ÄÄ3 E
.
ÄÄE F
GetAsync
ÄÄF N
(
ÄÄN O
filter
ÄÄO U
:
ÄÄU V
x
ÄÄW X
=>
ÄÄY [
x
ÄÄ\ ]
.
ÄÄ] ^
Id
ÄÄ^ `
==
ÄÄa c
category
ÄÄd l
.
ÄÄl m
ParentId
ÄÄm u
)
ÄÄu v
;
ÄÄv w
if
ÇÇ 
(
ÇÇ 
parentCategory
ÇÇ 
is
ÇÇ !
null
ÇÇ" &
)
ÇÇ& '
{
ÉÉ 
return
ÑÑ 
new
ÑÑ 
ResponseDTO
ÑÑ &
(
ÑÑ& '
)
ÑÑ' (
{
ÖÖ 
Message
ÜÜ 
=
ÜÜ 
$str
ÜÜ D
,
ÜÜD E
	IsSuccess
áá 
=
áá 
false
áá  %
,
áá% &

StatusCode
àà 
=
àà  
$num
àà! $
,
àà$ %
Result
ââ 
=
ââ 
null
ââ !
,
ââ! "
}
ää 
;
ää 
}
ãã 
var
çç 
parentCategoryDto
çç !
=
çç" #
_mapper
çç$ +
.
çç+ ,
Map
çç, /
<
çç/ 0
CategoryDTO
çç0 ;
>
çç; <
(
çç< =
parentCategory
çç= K
)
ççK L
;
ççL M
return
èè 
new
èè 
ResponseDTO
èè "
(
èè" #
)
èè# $
{
êê 
Message
ëë 
=
ëë 
$str
ëë <
,
ëë< =
Result
íí 
=
íí 
parentCategoryDto
íí *
,
íí* +
	IsSuccess
ìì 
=
ìì 
true
ìì  
,
ìì  !

StatusCode
îî 
=
îî 
$num
îî  
}
ïï 
;
ïï 
}
ññ 	
catch
óó 
(
óó 
	Exception
óó 
e
óó 
)
óó 
{
òò 	
return
ôô 
new
ôô 
ResponseDTO
ôô "
(
ôô" #
)
ôô# $
{
öö 
Message
õõ 
=
õõ 
e
õõ 
.
õõ 
Message
õõ #
,
õõ# $
Result
úú 
=
úú 
null
úú 
,
úú 
	IsSuccess
ùù 
=
ùù 
false
ùù !
,
ùù! "

StatusCode
ûû 
=
ûû 
$num
ûû  
}
üü 
;
üü 
}
†† 	
}
°° 
public
®® 

async
®® 
Task
®® 
<
®® 
ResponseDTO
®® !
>
®®! "
Get
®®# &
(
®®& '
ClaimsPrincipal
®®' 6
User
®®7 ;
,
®®; <
Guid
®®= A
id
®®B D
)
®®D E
{
©© 
try
™™ 
{
´´ 	
var
¨¨ 
category
¨¨ 
=
¨¨ 
await
≠≠ 
_unitOfWork
≠≠ !
.
≠≠! " 
CategoryRepository
≠≠" 4
.
≠≠4 5
GetAsync
≠≠5 =
(
≠≠= >
filter
≠≠> D
:
≠≠D E
x
≠≠F G
=>
≠≠H J
x
≠≠K L
.
≠≠L M
Id
≠≠M O
==
≠≠P R
id
≠≠S U
,
≠≠U V
includeProperties
ÆÆ %
:
ÆÆ% &
$str
ÆÆ' 7
)
ÆÆ7 8
;
ÆÆ8 9
if
∞∞ 
(
∞∞ 
category
∞∞ 
is
∞∞ 
null
∞∞  
)
∞∞  !
{
±± 
return
≤≤ 
new
≤≤ 
ResponseDTO
≤≤ &
(
≤≤& '
)
≤≤' (
{
≥≥ 
Message
¥¥ 
=
¥¥ 
$str
¥¥ 6
,
¥¥6 7
	IsSuccess
µµ 
=
µµ 
false
µµ  %
,
µµ% &

StatusCode
∂∂ 
=
∂∂  
$num
∂∂! $
,
∂∂$ %
Result
∑∑ 
=
∑∑ 
null
∑∑ !
,
∑∑! "
}
∏∏ 
;
∏∏ 
}
ππ 
var
ªª 
userRole
ªª 
=
ªª 
User
ªª 
.
ªª  
Claims
ªª  &
.
ªª& '
FirstOrDefault
ªª' 5
(
ªª5 6
x
ªª6 7
=>
ªª8 :
x
ªª; <
.
ªª< =
Type
ªª= A
==
ªªB D

ClaimTypes
ªªE O
.
ªªO P
Role
ªªP T
)
ªªT U
?
ªªU V
.
ªªV W
Value
ªªW \
;
ªª\ ]
object
ææ 
rootCategoryDto
ææ "
;
ææ" #
if
øø 
(
øø 
userRole
øø 
==
øø 
StaticUserRoles
øø +
.
øø+ ,
Admin
øø, 1
)
øø1 2
{
¿¿ 
rootCategoryDto
¡¡ 
=
¡¡  !
_mapper
¡¡" )
.
¡¡) *
Map
¡¡* -
<
¡¡- .
AdminCategoryDTO
¡¡. >
>
¡¡> ?
(
¡¡? @
category
¡¡@ H
)
¡¡H I
;
¡¡I J
}
¬¬ 
else
√√ 
{
ƒƒ 
rootCategoryDto
≈≈ 
=
≈≈  !
_mapper
≈≈" )
.
≈≈) *
Map
≈≈* -
<
≈≈- .
CategoryDTO
≈≈. 9
>
≈≈9 :
(
≈≈: ;
category
≈≈; C
)
≈≈C D
;
≈≈D E
}
∆∆ 
return
»» 
new
»» 
ResponseDTO
»» "
(
»»" #
)
»»# $
{
…… 
Message
   
=
   
$str
   9
,
  9 :
Result
ÀÀ 
=
ÀÀ 
rootCategoryDto
ÀÀ (
,
ÀÀ( )
	IsSuccess
ÃÃ 
=
ÃÃ 
true
ÃÃ  
,
ÃÃ  !

StatusCode
ÕÕ 
=
ÕÕ 
$num
ÕÕ  
}
ŒŒ 
;
ŒŒ 
}
œœ 	
catch
–– 
(
–– 
	Exception
–– 
e
–– 
)
–– 
{
—— 	
return
““ 
new
““ 
ResponseDTO
““ "
(
““" #
)
““# $
{
”” 
Message
‘‘ 
=
‘‘ 
e
‘‘ 
.
‘‘ 
Message
‘‘ #
,
‘‘# $
Result
’’ 
=
’’ 
null
’’ 
,
’’ 
	IsSuccess
÷÷ 
=
÷÷ 
false
÷÷ !
,
÷÷! "

StatusCode
◊◊ 
=
◊◊ 
$num
◊◊  
}
ÿÿ 
;
ÿÿ 
}
ŸŸ 	
}
⁄⁄ 
public
·· 

async
·· 
Task
·· 
<
·· 
ResponseDTO
·· !
>
··! "
CreateCategory
··# 1
(
··1 2
ClaimsPrincipal
··2 A
User
··B F
,
··F G
CreateCategoryDTO
··H Y
createCategoryDto
··Z k
)
··k l
{
‚‚ 
try
„„ 
{
‰‰ 	
Guid
ÂÂ 

guidOutput
ÂÂ 
;
ÂÂ 
var
ÊÊ 
isGuid
ÊÊ 
=
ÊÊ 
Guid
ÊÊ 
.
ÊÊ 
TryParse
ÊÊ &
(
ÊÊ& '
createCategoryDto
ÊÊ' 8
.
ÊÊ8 9
ParentId
ÊÊ9 A
,
ÊÊA B
out
ÊÊC F

guidOutput
ÊÊG Q
)
ÊÊQ R
;
ÊÊR S
var
ËË 
category
ËË 
=
ËË 
new
ËË 
Category
ËË '
{
ÈÈ 
Id
ÍÍ 
=
ÍÍ 
Guid
ÍÍ 
.
ÍÍ 
NewGuid
ÍÍ !
(
ÍÍ! "
)
ÍÍ" #
,
ÍÍ# $
Name
ÎÎ 
=
ÎÎ 
createCategoryDto
ÎÎ (
.
ÎÎ( )
Name
ÎÎ) -
,
ÎÎ- .
Description
ÏÏ 
=
ÏÏ 
createCategoryDto
ÏÏ /
.
ÏÏ/ 0
Description
ÏÏ0 ;
,
ÏÏ; <
ParentId
ÌÌ 
=
ÌÌ 
isGuid
ÌÌ !
?
ÌÌ" #

guidOutput
ÌÌ$ .
:
ÌÌ/ 0
null
ÌÌ1 5
,
ÌÌ5 6
CreatedTime
ÓÓ 
=
ÓÓ 
DateTime
ÓÓ &
.
ÓÓ& '
Now
ÓÓ' *
,
ÓÓ* +
UpdatedTime
ÔÔ 
=
ÔÔ 
null
ÔÔ "
,
ÔÔ" #
	CreatedBy
 
=
 
User
  
.
  !
Identity
! )
.
) *
Name
* .
,
. /
	UpdatedBy
ÒÒ 
=
ÒÒ 
$str
ÒÒ 
,
ÒÒ 
Status
ÚÚ 
=
ÚÚ 
$num
ÚÚ 
,
ÚÚ 
}
ÛÛ 
;
ÛÛ 
var
ˆˆ  
existingCategories
ˆˆ "
=
ˆˆ# $
await
ˆˆ% *
_unitOfWork
ˆˆ+ 6
.
ˆˆ6 7 
CategoryRepository
ˆˆ7 I
.
ˆˆI J
GetAllAsync
ˆˆJ U
(
ˆˆU V
)
ˆˆV W
;
ˆˆW X
if
˜˜ 
(
˜˜  
existingCategories
˜˜ "
==
˜˜# %
null
˜˜& *
||
˜˜+ -
!
˜˜. / 
existingCategories
˜˜/ A
.
˜˜A B
Any
˜˜B E
(
˜˜E F
)
˜˜F G
)
˜˜G H
{
¯¯ 
await
˙˙ 
_unitOfWork
˙˙ !
.
˙˙! " 
CategoryRepository
˙˙" 4
.
˙˙4 5
AddAsync
˙˙5 =
(
˙˙= >
category
˙˙> F
)
˙˙F G
;
˙˙G H
await
˚˚ 
_unitOfWork
˚˚ !
.
˚˚! "
	SaveAsync
˚˚" +
(
˚˚+ ,
)
˚˚, -
;
˚˚- .
return
¸¸ 
new
¸¸ 
ResponseDTO
¸¸ &
{
˝˝ 
Message
˛˛ 
=
˛˛ 
$str
˛˛ =
,
˛˛= >
Result
ˇˇ 
=
ˇˇ 
category
ˇˇ %
,
ˇˇ% &
	IsSuccess
ÄÄ 
=
ÄÄ 
true
ÄÄ  $
,
ÄÄ$ %

StatusCode
ÅÅ 
=
ÅÅ  
$num
ÅÅ! $
,
ÅÅ$ %
}
ÇÇ 
;
ÇÇ 
}
ÉÉ 
else
ÜÜ 
if
ÜÜ 
(
ÜÜ 
category
ÜÜ 
.
ÜÜ 
ParentId
ÜÜ &
==
ÜÜ' )
null
ÜÜ* .
)
ÜÜ. /
{
áá 
await
àà 
_unitOfWork
àà !
.
àà! " 
CategoryRepository
àà" 4
.
àà4 5
AddAsync
àà5 =
(
àà= >
category
àà> F
)
ààF G
;
ààG H
await
ââ 
_unitOfWork
ââ !
.
ââ! "
	SaveAsync
ââ" +
(
ââ+ ,
)
ââ, -
;
ââ- .
return
ãã 
new
ãã 
ResponseDTO
ãã &
{
åå 
Message
çç 
=
çç 
$str
çç =
,
çç= >
Result
éé 
=
éé 
category
éé %
,
éé% &
	IsSuccess
èè 
=
èè 
true
èè  $
,
èè$ %

StatusCode
êê 
=
êê  
$num
êê! $
,
êê$ %
}
ëë 
;
ëë 
}
íí 
await
ïï 
_unitOfWork
ïï 
.
ïï  
CategoryRepository
ïï 0
.
ïï0 1
AddAsync
ïï1 9
(
ïï9 :
category
ïï: B
)
ïïB C
;
ïïC D
var
ññ 
save
ññ 
=
ññ 
await
ññ 
_unitOfWork
ññ (
.
ññ( )
	SaveAsync
ññ) 2
(
ññ2 3
)
ññ3 4
;
ññ4 5
if
óó 
(
óó 
save
óó 
<=
óó 
$num
óó 
)
óó 
{
òò 
return
ôô 
new
ôô 
ResponseDTO
ôô &
{
öö 
Message
õõ 
=
õõ 
$str
õõ  
,
õõ  !
Result
úú 
=
úú 
null
úú !
,
úú! "
	IsSuccess
ùù 
=
ùù 
false
ùù  %
,
ùù% &

StatusCode
ûû 
=
ûû  
$num
ûû! $
}
üü 
;
üü 
}
†† 
return
¢¢ 
new
¢¢ 
ResponseDTO
¢¢ "
{
££ 
Message
§§ 
=
§§ 
$str
§§ 9
,
§§9 :
Result
•• 
=
•• 
category
•• !
,
••! "
	IsSuccess
¶¶ 
=
¶¶ 
true
¶¶  
,
¶¶  !

StatusCode
ßß 
=
ßß 
$num
ßß  
}
®® 
;
®® 
}
©© 	
catch
™™ 
(
™™ 
	Exception
™™ 
e
™™ 
)
™™ 
{
´´ 	
return
¨¨ 
new
¨¨ 
ResponseDTO
¨¨ "
{
≠≠ 
Message
ÆÆ 
=
ÆÆ 
e
ÆÆ 
.
ÆÆ 
Message
ÆÆ #
,
ÆÆ# $
Result
ØØ 
=
ØØ 
null
ØØ 
,
ØØ 
	IsSuccess
∞∞ 
=
∞∞ 
false
∞∞ !
,
∞∞! "

StatusCode
±± 
=
±± 
$num
±±  
}
≤≤ 
;
≤≤ 
}
≥≥ 	
}
¥¥ 
public
ªª 

async
ªª 
Task
ªª 
<
ªª 
ResponseDTO
ªª !
>
ªª! "
Update
ªª# )
(
ªª) *
ClaimsPrincipal
ªª* 9
User
ªª: >
,
ªª> ?
UpdateCategoryDTO
ªª@ Q
updateCategoryDTO
ªªR c
)
ªªc d
{
ºº 
try
ΩΩ 
{
ææ 	
var
¿¿ 
categoryToUpdate
¿¿  
=
¿¿! "
await
¿¿# (
_unitOfWork
¿¿) 4
.
¿¿4 5 
CategoryRepository
¿¿5 G
.
¿¿G H
GetAsync
¿¿H P
(
¿¿P Q
c
¿¿Q R
=>
¿¿S U
c
¿¿V W
.
¿¿W X
Id
¿¿X Z
==
¿¿[ ]
updateCategoryDTO
¿¿^ o
.
¿¿o p
Id
¿¿p r
)
¿¿r s
;
¿¿s t
if
√√ 
(
√√ 
categoryToUpdate
√√  
==
√√! #
null
√√$ (
)
√√( )
{
ƒƒ 
return
≈≈ 
new
≈≈ 
ResponseDTO
≈≈ &
{
∆∆ 
Message
«« 
=
«« 
$str
«« 2
,
««2 3
Result
»» 
=
»» 
null
»» !
,
»»! "
	IsSuccess
…… 
=
…… 
false
……  %
,
……% &

StatusCode
   
=
    
$num
  ! $
}
ÀÀ 
;
ÀÀ 
}
ÃÃ 
categoryToUpdate
œœ 
.
œœ 
Name
œœ !
=
œœ" #
updateCategoryDTO
œœ$ 5
.
œœ5 6
Name
œœ6 :
;
œœ: ;
categoryToUpdate
–– 
.
–– 
Description
–– (
=
––) *
updateCategoryDTO
––+ <
.
––< =
Description
––= H
;
––H I
categoryToUpdate
—— 
.
—— 
ParentId
—— %
=
——& '
!
——( )
string
——) /
.
——/ 0
IsNullOrEmpty
——0 =
(
——= >
updateCategoryDTO
——> O
.
——O P
ParentId
——P X
)
——X Y
?
““ 
Guid
““ 
.
““ 
Parse
““ 
(
““ 
updateCategoryDTO
““ .
.
““. /
ParentId
““/ 7
)
““7 8
:
”” 
(
”” 
Guid
”” 
?
”” 
)
”” 
null
”” 
;
”” 
categoryToUpdate
‘‘ 
.
‘‘ 
UpdatedTime
‘‘ (
=
‘‘) *
DateTime
‘‘+ 3
.
‘‘3 4
Now
‘‘4 7
;
‘‘7 8
categoryToUpdate
’’ 
.
’’ 
	UpdatedBy
’’ &
=
’’' (
User
’’) -
.
’’- .
Identity
’’. 6
.
’’6 7
Name
’’7 ;
;
’’; <
categoryToUpdate
÷÷ 
.
÷÷ 
Status
÷÷ #
=
÷÷$ %
updateCategoryDTO
÷÷& 7
.
÷÷7 8
Status
÷÷8 >
;
÷÷> ?
_unitOfWork
⁄⁄ 
.
⁄⁄  
CategoryRepository
⁄⁄ *
.
⁄⁄* +
Update
⁄⁄+ 1
(
⁄⁄1 2
categoryToUpdate
⁄⁄2 B
)
⁄⁄B C
;
⁄⁄C D
var
›› 
save
›› 
=
›› 
await
›› 
_unitOfWork
›› (
.
››( )
	SaveAsync
››) 2
(
››2 3
)
››3 4
;
››4 5
if
ﬁﬁ 
(
ﬁﬁ 
save
ﬁﬁ 
<=
ﬁﬁ 
$num
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
return
‡‡ 
new
‡‡ 
ResponseDTO
‡‡ &
{
·· 
Message
‚‚ 
=
‚‚ 
$str
‚‚ 9
,
‚‚9 :
Result
„„ 
=
„„ 
null
„„ !
,
„„! "
	IsSuccess
‰‰ 
=
‰‰ 
false
‰‰  %
,
‰‰% &

StatusCode
ÂÂ 
=
ÂÂ  
$num
ÂÂ! $
}
ÊÊ 
;
ÊÊ 
}
ÁÁ 
return
ÈÈ 
new
ÈÈ 
ResponseDTO
ÈÈ "
{
ÍÍ 
Message
ÎÎ 
=
ÎÎ 
$str
ÎÎ 9
,
ÎÎ9 :
Result
ÏÏ 
=
ÏÏ 
categoryToUpdate
ÏÏ )
,
ÏÏ) *
	IsSuccess
ÌÌ 
=
ÌÌ 
true
ÌÌ  
,
ÌÌ  !

StatusCode
ÓÓ 
=
ÓÓ 
$num
ÓÓ  
}
ÔÔ 
;
ÔÔ 
}
 	
catch
ÒÒ 
(
ÒÒ 
	Exception
ÒÒ 
e
ÒÒ 
)
ÒÒ 
{
ÚÚ 	
return
ÛÛ 
new
ÛÛ 
ResponseDTO
ÛÛ "
{
ÙÙ 
Message
ıı 
=
ıı 
e
ıı 
.
ıı 
Message
ıı #
,
ıı# $
Result
ˆˆ 
=
ˆˆ 
null
ˆˆ 
,
ˆˆ 
	IsSuccess
˜˜ 
=
˜˜ 
false
˜˜ !
,
˜˜! "

StatusCode
¯¯ 
=
¯¯ 
$num
¯¯  
}
˘˘ 
;
˘˘ 
}
˙˙ 	
}
˚˚ 
public
ÇÇ 

async
ÇÇ 
Task
ÇÇ 
<
ÇÇ 
ResponseDTO
ÇÇ !
>
ÇÇ! "
Delete
ÇÇ# )
(
ÇÇ) *
ClaimsPrincipal
ÇÇ* 9
User
ÇÇ: >
,
ÇÇ> ?
Guid
ÇÇ@ D
id
ÇÇE G
)
ÇÇG H
{
ÉÉ 
try
ÑÑ 
{
ÖÖ 	
var
áá 
category
áá 
=
áá 
await
áá  
_unitOfWork
áá! ,
.
áá, - 
CategoryRepository
áá- ?
.
áá? @
GetAsync
áá@ H
(
ááH I
c
ááI J
=>
ááK M
c
ááN O
.
ááO P
Id
ááP R
==
ááS U
id
ááV X
)
ááX Y
;
ááY Z
if
ää 
(
ää 
category
ää 
==
ää 
null
ää  
)
ää  !
{
ãã 
return
åå 
new
åå 
ResponseDTO
åå &
{
çç 
Message
éé 
=
éé 
$str
éé 2
,
éé2 3
	IsSuccess
èè 
=
èè 
false
èè  %
,
èè% &

StatusCode
êê 
=
êê  
$num
êê! $
,
êê$ %
Result
ëë 
=
ëë 
null
ëë !
}
íí 
;
íí 
}
ìì 
var
ññ 
subCategories
ññ 
=
ññ 
await
ññ  %
_unitOfWork
ññ& 1
.
ññ1 2 
CategoryRepository
ññ2 D
.
ññD E
GetAllAsync
ññE P
(
ññP Q
c
ññQ R
=>
ññS U
c
ññV W
.
ññW X
ParentId
ññX `
==
ñña c
id
ññd f
)
ññf g
;
ññg h
if
ôô 
(
ôô 
subCategories
ôô 
.
ôô 
Any
ôô !
(
ôô! "
)
ôô" #
)
ôô# $
{
öö 
return
õõ 
new
õõ 
ResponseDTO
õõ &
{
úú 
Message
ùù 
=
ùù 
$str
ùù X
,
ùùX Y
	IsSuccess
ûû 
=
ûû 
false
ûû  %
,
ûû% &

StatusCode
üü 
=
üü  
$num
üü! $
,
üü$ %
Result
†† 
=
†† 
subCategories
†† *
.
††* +
Select
††+ 1
(
††1 2
x
††2 3
=>
††4 6
new
††7 :
{
††; <
x
††= >
.
††> ?
Id
††? A
,
††A B
x
††C D
.
††D E
Name
††E I
}
††J K
)
††K L
.
††L M
ToList
††M S
(
††S T
)
††T U
}
°° 
;
°° 
}
¢¢ 
category
•• 
.
•• 
Status
•• 
=
•• 
$num
•• 
;
••  
category
¶¶ 
.
¶¶ 
UpdatedTime
¶¶  
=
¶¶! "
DateTime
¶¶# +
.
¶¶+ ,
Now
¶¶, /
;
¶¶/ 0
category
ßß 
.
ßß 
	UpdatedBy
ßß 
=
ßß  
User
ßß! %
.
ßß% &
Identity
ßß& .
.
ßß. /
Name
ßß/ 3
;
ßß3 4
_unitOfWork
™™ 
.
™™  
CategoryRepository
™™ *
.
™™* +
Update
™™+ 1
(
™™1 2
category
™™2 :
)
™™: ;
;
™™; <
var
´´ 

saveResult
´´ 
=
´´ 
await
´´ "
_unitOfWork
´´# .
.
´´. /
	SaveAsync
´´/ 8
(
´´8 9
)
´´9 :
;
´´: ;
if
≠≠ 
(
≠≠ 

saveResult
≠≠ 
<=
≠≠ 
$num
≠≠ 
)
≠≠  
{
ÆÆ 
return
ØØ 
new
ØØ 
ResponseDTO
ØØ &
{
∞∞ 
Message
±± 
=
±± 
$str
±± 9
,
±±9 :
	IsSuccess
≤≤ 
=
≤≤ 
false
≤≤  %
,
≤≤% &

StatusCode
≥≥ 
=
≥≥  
$num
≥≥! $
,
≥≥$ %
Result
¥¥ 
=
¥¥ 
null
¥¥ !
}
µµ 
;
µµ 
}
∂∂ 
return
∏∏ 
new
∏∏ 
ResponseDTO
∏∏ "
{
ππ 
Message
∫∫ 
=
∫∫ 
$str
∫∫ 9
,
∫∫9 :
	IsSuccess
ªª 
=
ªª 
true
ªª  
,
ªª  !

StatusCode
ºº 
=
ºº 
$num
ºº  
,
ºº  !
Result
ΩΩ 
=
ΩΩ 
category
ΩΩ !
.
ΩΩ! "
Id
ΩΩ" $
}
ææ 
;
ææ 
}
øø 	
catch
¿¿ 
(
¿¿ 
	Exception
¿¿ 
e
¿¿ 
)
¿¿ 
{
¡¡ 	
return
¬¬ 
new
¬¬ 
ResponseDTO
¬¬ "
{
√√ 
Message
ƒƒ 
=
ƒƒ 
e
ƒƒ 
.
ƒƒ 
Message
ƒƒ #
,
ƒƒ# $
Result
≈≈ 
=
≈≈ 
null
≈≈ 
,
≈≈ 
	IsSuccess
∆∆ 
=
∆∆ 
false
∆∆ !
,
∆∆! "

StatusCode
«« 
=
«« 
$num
««  
}
»» 
;
»» 
}
…… 	
}
   
}ÀÀ È≤
dD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\CartService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public

 
class

 
CartService

 
:

 
ICartService

 '
{ 
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
IMapper 
_mapper $
;$ %
public 

CartService 
( 
IUnitOfWork "

unitOfWork# -
,- .
IMapper/ 6
mapper7 =
)= >
{ 
_unitOfWork 
= 

unitOfWork  
;  !
_mapper 
= 
mapper 
; 
} 
public 

async 
Task 
< 
ResponseDTO !
>! "
GetCart# *
(* +
ClaimsPrincipal+ :
User; ?
)? @
{ 
try 
{ 	
var 
userId 
= 
User 
. 
Claims $
.$ %
FirstOrDefault% 3
(3 4
x4 5
=>6 8
x9 :
.: ;
Type; ?
==@ B

ClaimTypesC M
.M N
NameIdentifierN \
)\ ]
?] ^
.^ _
Value_ d
;d e
var 
student 
= 
await 
_unitOfWork  +
.+ ,
StudentRepository, =
.= >
GetAsync> F
(F G
xG H
=>I K
xL M
.M N
UserIdN T
==U W
userIdX ^
)^ _
;_ `
if 
( 
student 
is 
null 
)  
{ 
return 
new 
ResponseDTO &
(& '
)' (
{ 
Message   
=   
$str   5
,  5 6
	IsSuccess!! 
=!! 
false!!  %
,!!% &

StatusCode"" 
=""  
$num""! $
,""$ %
Result## 
=## 
null## !
}$$ 
;$$ 
}%% 
var'' 

cartHeader'' 
='' 
await'' "
_unitOfWork''# .
.''. / 
CartHeaderRepository''/ C
.''C D
GetAsync''D L
(''L M
x''M N
=>''O Q
x''R S
.''S T
	StudentId''T ]
==''^ `
student''a h
.''h i
	StudentId''i r
)''r s
;''s t
if)) 
()) 

cartHeader)) 
is)) 
null)) "
)))" #
{** 

cartHeader++ 
=++ 
new++  

CartHeader++! +
(+++ ,
)++, -
{,, 
Id-- 
=-- 
Guid-- 
.-- 
NewGuid-- %
(--% &
)--& '
,--' (
	StudentId.. 
=.. 
student..  '
...' (
	StudentId..( 1
,..1 2

TotalPrice// 
=//  
$num//! "
}00 
;00 
await11 
_unitOfWork11 !
.11! " 
CartHeaderRepository11" 6
.116 7
AddAsync117 ?
(11? @

cartHeader11@ J
)11J K
;11K L
await22 
_unitOfWork22 !
.22! "
	SaveAsync22" +
(22+ ,
)22, -
;22- .
}33 
var55 
cartsDetails55 
=55 
await66 
_unitOfWork66 !
.66! "!
CartDetailsRepository66" 7
.667 8
GetAllAsync668 C
(66C D
x66D E
=>66F H
x66I J
.66J K
CartHeaderId66K W
==66X Z

cartHeader66[ e
.66e f
Id66f h
)66h i
;66i j
var88 
cartHeaderDto88 
=88 
_mapper88  '
.88' (
Map88( +
<88+ ,
CartHeaderDTO88, 9
>889 :
(88: ;

cartHeader88; E
)88E F
;88F G
var99 
cartDetailsDto99 
=99  
_mapper99! (
.99( )
Map99) ,
<99, -
IEnumerable99- 8
<998 9
CartDetailsDTO999 G
>99G H
>99H I
(99I J
cartsDetails99J V
)99V W
;99W X
cartHeaderDto:: 
.:: 
CartDetailsDtos:: )
=::* +
cartDetailsDto::, :
;::: ;
return<< 
new<< 
ResponseDTO<< "
(<<" #
)<<# $
{== 
Message>> 
=>> 
$str>> 1
,>>1 2
	IsSuccess?? 
=?? 
true??  
,??  !

StatusCode@@ 
=@@ 
$num@@  
,@@  !
ResultAA 
=AA 
cartHeaderDtoAA &
}BB 
;BB 
}CC 	
catchDD 
(DD 
	ExceptionDD 
eDD 
)DD 
{EE 	
returnFF 
newFF 
ResponseDTOFF "
(FF" #
)FF# $
{GG 
MessageHH 
=HH 
eHH 
.HH 
MessageHH #
,HH# $
	IsSuccessII 
=II 
falseII !
,II! "

StatusCodeJJ 
=JJ 
$numJJ  
,JJ  !
ResultKK 
=KK 
nullKK 
}LL 
;LL 
}MM 	
}NN 
publicPP 

asyncPP 
TaskPP 
<PP 
ResponseDTOPP !
>PP! "
	AddToCartPP# ,
(PP, -
ClaimsPrincipalPP- <
UserPP= A
,PPA B
AddToCartDTOPPC O
addToCartDtoPPP \
)PP\ ]
{QQ 
tryRR 
{SS 	
varTT 
userIdTT 
=TT 
UserTT 
.TT 
ClaimsTT $
.TT$ %
FirstOrDefaultTT% 3
(TT3 4
xTT4 5
=>TT6 8
xTT9 :
.TT: ;
TypeTT; ?
==TT@ B

ClaimTypesTTC M
.TTM N
NameIdentifierTTN \
)TT\ ]
?TT] ^
.TT^ _
ValueTT_ d
;TTd e
varVV 
studentVV 
=VV 
awaitVV 
_unitOfWorkVV  +
.VV+ ,
StudentRepositoryVV, =
.VV= >
GetAsyncVV> F
(VVF G
xVVG H
=>VVI K
xVVL M
.VVM N
UserIdVVN T
==VVU W
userIdVVX ^
)VV^ _
;VV_ `
ifWW 
(WW 
studentWW 
isWW 
nullWW 
)WW  
{XX 
returnYY 
newYY 
ResponseDTOYY &
(YY& '
)YY' (
{ZZ 
Message[[ 
=[[ 
$str[[ 5
,[[5 6
	IsSuccess\\ 
=\\ 
false\\  %
,\\% &

StatusCode]] 
=]]  
$num]]! $
,]]$ %
Result^^ 
=^^ 
null^^ !
}__ 
;__ 
}`` 
varbb 
coursebb 
=bb 
awaitbb 
_unitOfWorkbb *
.bb* +
CourseRepositorybb+ ;
.bb; <
GetAsyncbb< D
(bbD E
xbbE F
=>bbG I
xbbJ K
.bbK L
IdbbL N
==bbO Q
addToCartDtobbR ^
.bb^ _
CourseIdbb_ g
)bbg h
;bbh i
ifcc 
(cc 
coursecc 
iscc 
nullcc 
)cc 
{dd 
returnee 
newee 
ResponseDTOee &
(ee& '
)ee' (
{ff 
Messagegg 
=gg 
$strgg 4
,gg4 5
	IsSuccesshh 
=hh 
falsehh  %
,hh% &

StatusCodeii 
=ii  
$numii! $
,ii$ %
Resultjj 
=jj 
nulljj !
}kk 
;kk 
}ll 
varnn 
studentCoursenn 
=nn 
awaitoo 
_unitOfWorkoo !
.oo! "#
StudentCourseRepositoryoo" 9
.oo9 :
GetAsyncoo: B
(ooB C
xooC D
=>ooE G
xpp 
.pp 
	StudentIdpp 
==pp  "
studentpp# *
.pp* +
	StudentIdpp+ 4
&&pp5 7
xpp8 9
.pp9 :
CourseIdpp: B
==ppC E
courseppF L
.ppL M
IdppM O
)ppO P
;ppP Q
ifqq 
(qq 
studentCourseqq 
isqq  
notqq! $
nullqq% )
)qq) *
{rr 
returnss 
newss 
ResponseDTOss &
(ss& '
)ss' (
{tt 
Messageuu 
=uu 
$struu ;
,uu; <
Resultvv 
=vv 
nullvv !
,vv! "
	IsSuccessww 
=ww 
falseww  %
,ww% &

StatusCodexx 
=xx  
$numxx! $
}yy 
;yy 
}zz 
var|| 
courseVersion|| 
=|| 
await||  %
_unitOfWork||& 1
.||1 2#
CourseVersionRepository||2 I
.||I J
GetAsync||J R
(||R S
x||S T
=>||U W
x||X Y
.||Y Z
Id||Z \
==||] _
course||` f
.||f g
CourseVersionId||g v
)||v w
;||w x
if}} 
(}} 
courseVersion}} 
is}}  
null}}! %
)}}% &
{~~ 
return 
new 
ResponseDTO &
(& '
)' (
{
ÄÄ 
Message
ÅÅ 
=
ÅÅ 
$str
ÅÅ <
,
ÅÅ< =

StatusCode
ÇÇ 
=
ÇÇ  
$num
ÇÇ! $
,
ÇÇ$ %
Result
ÉÉ 
=
ÉÉ 
null
ÉÉ !
,
ÉÉ! "
	IsSuccess
ÑÑ 
=
ÑÑ 
false
ÑÑ  %
}
ÖÖ 
;
ÖÖ 
}
ÜÜ 
var
àà 

cartHeader
àà 
=
àà 
await
àà "
_unitOfWork
àà# .
.
àà. /"
CartHeaderRepository
àà/ C
.
ààC D
GetAsync
ààD L
(
ààL M
x
ààM N
=>
ààO Q
x
ààR S
.
ààS T
	StudentId
ààT ]
==
àà^ `
student
ààa h
.
ààh i
	StudentId
àài r
)
ààr s
;
ààs t
if
ââ 
(
ââ 

cartHeader
ââ 
is
ââ 
null
ââ "
)
ââ" #
{
ää 

cartHeader
ãã 
=
ãã 
new
ãã  

CartHeader
ãã! +
(
ãã+ ,
)
ãã, -
{
åå 
Id
çç 
=
çç 
Guid
çç 
.
çç 
NewGuid
çç %
(
çç% &
)
çç& '
,
çç' (
	StudentId
éé 
=
éé 
student
éé  '
.
éé' (
	StudentId
éé( 1
,
éé1 2

TotalPrice
èè 
=
èè  
$num
èè! "
}
êê 
;
êê 
await
ëë 
_unitOfWork
ëë !
.
ëë! ""
CartHeaderRepository
ëë" 6
.
ëë6 7
AddAsync
ëë7 ?
(
ëë? @

cartHeader
ëë@ J
)
ëëJ K
;
ëëK L
await
íí 
_unitOfWork
íí !
.
íí! "
	SaveAsync
íí" +
(
íí+ ,
)
íí, -
;
íí- .
}
ìì 
var
ïï 
cartDetails
ïï 
=
ïï 
await
ññ 
_unitOfWork
ññ !
.
ññ! "#
CartDetailsRepository
ññ" 7
.
ññ7 8
GetAsync
ññ8 @
(
óó 
filter
òò 
:
òò 
x
òò 
=>
òò  
x
òò! "
.
òò" #
CartHeaderId
òò# /
==
òò0 2

cartHeader
òò3 =
.
òò= >
Id
òò> @
&&
òòA C
x
òòD E
.
òòE F
CourseId
òòF N
==
òòO Q
course
òòR X
.
òòX Y
Id
òòY [
)
ôô 
;
ôô 
if
õõ 
(
õõ 
cartDetails
õõ 
is
õõ 
not
õõ "
null
õõ# '
)
õõ' (
{
úú 
return
ùù 
new
ùù 
ResponseDTO
ùù &
(
ùù& '
)
ùù' (
{
ûû 
	IsSuccess
üü 
=
üü 
true
üü  $
,
üü$ %
Result
†† 
=
†† 
null
†† !
,
††! "

StatusCode
°° 
=
°°  
$num
°°! $
,
°°$ %
Message
¢¢ 
=
¢¢ 
$str
¢¢ A
}
££ 
;
££ 
}
§§ 
cartDetails
¶¶ 
=
¶¶ 
new
¶¶ 
CartDetails
¶¶ )
(
¶¶) *
)
¶¶* +
{
ßß 
Id
®® 
=
®® 
Guid
®® 
.
®® 
NewGuid
®® !
(
®®! "
)
®®" #
,
®®# $
CartHeaderId
©© 
=
©© 

cartHeader
©© )
.
©©) *
Id
©©* ,
,
©©, -
CourseId
™™ 
=
™™ 
course
™™ !
.
™™! "
Id
™™" $
,
™™$ %
CoursePrice
´´ 
=
´´ 
courseVersion
´´ +
.
´´+ ,
Price
´´, 1
,
´´1 2
CourseTitle
¨¨ 
=
¨¨ 
courseVersion
¨¨ +
.
¨¨+ ,
Title
¨¨, 1
}
≠≠ 
;
≠≠ 

cartHeader
ØØ 
.
ØØ 

TotalPrice
ØØ !
+=
ØØ" $
cartDetails
ØØ% 0
.
ØØ0 1
CoursePrice
ØØ1 <
;
ØØ< =
_unitOfWork
∞∞ 
.
∞∞ "
CartHeaderRepository
∞∞ ,
.
∞∞, -
Update
∞∞- 3
(
∞∞3 4

cartHeader
∞∞4 >
)
∞∞> ?
;
∞∞? @
await
≤≤ 
_unitOfWork
≤≤ 
.
≤≤ #
CartDetailsRepository
≤≤ 3
.
≤≤3 4
AddAsync
≤≤4 <
(
≤≤< =
cartDetails
≤≤= H
)
≤≤H I
;
≤≤I J
await
≥≥ 
_unitOfWork
≥≥ 
.
≥≥ 
	SaveAsync
≥≥ '
(
≥≥' (
)
≥≥( )
;
≥≥) *
return
µµ 
new
µµ 
ResponseDTO
µµ "
(
µµ" #
)
µµ# $
{
∂∂ 
Message
∑∑ 
=
∑∑ 
$str
∑∑ ;
,
∑∑; <
	IsSuccess
∏∏ 
=
∏∏ 
true
∏∏  
,
∏∏  !

StatusCode
ππ 
=
ππ 
$num
ππ  
,
ππ  !
Result
∫∫ 
=
∫∫ 
addToCartDto
∫∫ %
}
ªª 
;
ªª 
}
ºº 	
catch
ΩΩ 
(
ΩΩ 
	Exception
ΩΩ 
e
ΩΩ 
)
ΩΩ 
{
ææ 	
return
øø 
new
øø 
ResponseDTO
øø "
(
øø" #
)
øø# $
{
¿¿ 
Message
¡¡ 
=
¡¡ 
e
¡¡ 
.
¡¡ 
Message
¡¡ #
,
¡¡# $
	IsSuccess
¬¬ 
=
¬¬ 
false
¬¬ !
,
¬¬! "

StatusCode
√√ 
=
√√ 
$num
√√  
,
√√  !
Result
ƒƒ 
=
ƒƒ 
null
ƒƒ 
}
≈≈ 
;
≈≈ 
}
∆∆ 	
}
«« 
public
…… 

async
…… 
Task
…… 
<
…… 
ResponseDTO
…… !
>
……! "
RemoveFromCart
……# 1
(
……1 2
ClaimsPrincipal
……2 A
User
……B F
,
……F G
Guid
……H L
courseId
……M U
)
……U V
{
   
try
ÀÀ 
{
ÃÃ 	
var
ÕÕ 
userId
ÕÕ 
=
ÕÕ 
User
ÕÕ 
.
ÕÕ 
Claims
ÕÕ $
.
ÕÕ$ %
FirstOrDefault
ÕÕ% 3
(
ÕÕ3 4
x
ÕÕ4 5
=>
ÕÕ6 8
x
ÕÕ9 :
.
ÕÕ: ;
Type
ÕÕ; ?
==
ÕÕ@ B

ClaimTypes
ÕÕC M
.
ÕÕM N
NameIdentifier
ÕÕN \
)
ÕÕ\ ]
?
ÕÕ] ^
.
ÕÕ^ _
Value
ÕÕ_ d
;
ÕÕd e
var
œœ 
student
œœ 
=
œœ 
await
œœ 
_unitOfWork
œœ  +
.
œœ+ ,
StudentRepository
œœ, =
.
œœ= >
GetAsync
œœ> F
(
–– 
filter
—— 
:
—— 
x
—— 
=>
—— 
x
—— 
.
—— 
UserId
—— %
==
——& (
userId
——) /
)
““ 
;
““ 
if
”” 
(
”” 
student
”” 
is
”” 
null
”” 
)
””  
{
‘‘ 
return
’’ 
new
’’ 
ResponseDTO
’’ &
(
’’& '
)
’’' (
{
÷÷ 
Message
◊◊ 
=
◊◊ 
$str
◊◊ 5
,
◊◊5 6
	IsSuccess
ÿÿ 
=
ÿÿ 
false
ÿÿ  %
,
ÿÿ% &

StatusCode
ŸŸ 
=
ŸŸ  
$num
ŸŸ! $
,
ŸŸ$ %
Result
⁄⁄ 
=
⁄⁄ 
null
⁄⁄ !
}
€€ 
;
€€ 
}
‹‹ 
var
ﬁﬁ 

cartHeader
ﬁﬁ 
=
ﬁﬁ 
await
ﬁﬁ "
_unitOfWork
ﬁﬁ# .
.
ﬁﬁ. /"
CartHeaderRepository
ﬁﬁ/ C
.
ﬁﬁC D
GetAsync
ﬁﬁD L
(
ﬂﬂ 
filter
‡‡ 
:
‡‡ 
x
‡‡ 
=>
‡‡ 
x
‡‡ 
.
‡‡ 
	StudentId
‡‡ (
==
‡‡) +
student
‡‡, 3
.
‡‡3 4
	StudentId
‡‡4 =
)
·· 
;
·· 
if
‚‚ 
(
‚‚ 

cartHeader
‚‚ 
is
‚‚ 
null
‚‚ "
)
‚‚" #
{
„„ 

cartHeader
‰‰ 
=
‰‰ 
new
‰‰  

CartHeader
‰‰! +
(
‰‰+ ,
)
‰‰, -
{
ÂÂ 
Id
ÊÊ 
=
ÊÊ 
Guid
ÊÊ 
.
ÊÊ 
NewGuid
ÊÊ %
(
ÊÊ% &
)
ÊÊ& '
,
ÊÊ' (
	StudentId
ÁÁ 
=
ÁÁ 
student
ÁÁ  '
.
ÁÁ' (
	StudentId
ÁÁ( 1
,
ÁÁ1 2

TotalPrice
ËË 
=
ËË  
$num
ËË! "
}
ÈÈ 
;
ÈÈ 
await
ÍÍ 
_unitOfWork
ÍÍ !
.
ÍÍ! ""
CartHeaderRepository
ÍÍ" 6
.
ÍÍ6 7
AddAsync
ÍÍ7 ?
(
ÍÍ? @

cartHeader
ÍÍ@ J
)
ÍÍJ K
;
ÍÍK L
await
ÎÎ 
_unitOfWork
ÎÎ !
.
ÎÎ! "
	SaveAsync
ÎÎ" +
(
ÎÎ+ ,
)
ÎÎ, -
;
ÎÎ- .
return
ÌÌ 
new
ÌÌ 
ResponseDTO
ÌÌ &
(
ÌÌ& '
)
ÌÌ' (
{
ÓÓ 
Message
ÔÔ 
=
ÔÔ 
$str
ÔÔ 2
,
ÔÔ2 3

StatusCode
 
=
  
$num
! $
,
$ %
Result
ÒÒ 
=
ÒÒ 
null
ÒÒ !
,
ÒÒ! "
	IsSuccess
ÚÚ 
=
ÚÚ 
false
ÚÚ  %
}
ÛÛ 
;
ÛÛ 
}
ÙÙ 
var
ˆˆ 
cartDetails
ˆˆ 
=
ˆˆ 
await
ˆˆ #
_unitOfWork
ˆˆ$ /
.
ˆˆ/ 0#
CartDetailsRepository
ˆˆ0 E
.
ˆˆE F
GetAsync
ˆˆF N
(
˜˜ 
filter
¯¯ 
:
¯¯ 
x
¯¯ 
=>
¯¯ 
x
¯¯ 
.
¯¯ 
CourseId
¯¯ '
==
¯¯( *
courseId
¯¯+ 3
&&
¯¯4 6
x
¯¯7 8
.
¯¯8 9
CartHeaderId
¯¯9 E
==
¯¯F H

cartHeader
¯¯I S
.
¯¯S T
Id
¯¯T V
)
˘˘ 
;
˘˘ 
if
˙˙ 
(
˙˙ 
cartDetails
˙˙ 
is
˙˙ 
null
˙˙ #
)
˙˙# $
{
˚˚ 
return
¸¸ 
new
¸¸ 
ResponseDTO
¸¸ &
(
¸¸& '
)
¸¸' (
{
˝˝ 
Message
˛˛ 
=
˛˛ 
$str
˛˛ B
,
˛˛B C

StatusCode
ˇˇ 
=
ˇˇ  
$num
ˇˇ! $
,
ˇˇ$ %
Result
ÄÄ 
=
ÄÄ 
null
ÄÄ !
,
ÄÄ! "
	IsSuccess
ÅÅ 
=
ÅÅ 
false
ÅÅ  %
}
ÇÇ 
;
ÇÇ 
}
ÉÉ 

cartHeader
ÖÖ 
.
ÖÖ 

TotalPrice
ÖÖ !
-=
ÖÖ" $
cartDetails
ÖÖ% 0
.
ÖÖ0 1
CoursePrice
ÖÖ1 <
;
ÖÖ< =
_unitOfWork
ÜÜ 
.
ÜÜ "
CartHeaderRepository
ÜÜ ,
.
ÜÜ, -
Update
ÜÜ- 3
(
ÜÜ3 4

cartHeader
ÜÜ4 >
)
ÜÜ> ?
;
ÜÜ? @
_unitOfWork
àà 
.
àà #
CartDetailsRepository
àà -
.
àà- .
Remove
àà. 4
(
àà4 5
cartDetails
àà5 @
)
àà@ A
;
ààA B
await
ââ 
_unitOfWork
ââ 
.
ââ 
	SaveAsync
ââ '
(
ââ' (
)
ââ( )
;
ââ) *
return
ãã 
new
ãã 
ResponseDTO
ãã "
(
ãã" #
)
ãã# $
{
åå 
Message
çç 
=
çç 
$str
çç >
,
çç> ?
	IsSuccess
éé 
=
éé 
true
éé  
,
éé  !

StatusCode
èè 
=
èè 
$num
èè  
,
èè  !
Result
êê 
=
êê 
null
êê 
}
ëë 
;
ëë 
}
íí 	
catch
ìì 
(
ìì 
	Exception
ìì 
e
ìì 
)
ìì 
{
îî 	
return
ïï 
new
ïï 
ResponseDTO
ïï "
(
ïï" #
)
ïï# $
{
ññ 
Message
óó 
=
óó 
e
óó 
.
óó 
Message
óó #
,
óó# $
	IsSuccess
òò 
=
òò 
false
òò !
,
òò! "

StatusCode
ôô 
=
ôô 
$num
ôô  
,
ôô  !
Result
öö 
=
öö 
null
öö 
}
õõ 
;
õõ 
}
úú 	
}
ùù 
public
üü 

Task
üü 
<
üü 
ResponseDTO
üü 
>
üü 
Checkout
üü %
(
üü% &
ClaimsPrincipal
üü& 5
User
üü6 :
)
üü: ;
{
†† 
throw
°° 
new
°° %
NotImplementedException
°° )
(
°°) *
)
°°* +
;
°°+ ,
}
¢¢ 
}££ ö>
dD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\BaseService.cs
	namespace		 	
Cursus		
 
.		 
LMS		 
.		 
Service		 
.		 
Service		 $
;		$ %
public 
class 
BaseService 
: 
IBaseService '
{ 
private 
readonly 
IHttpClientFactory '
_httpClientFactory( :
;: ;
public 

BaseService 
( 
IHttpClientFactory )
httpClientFactory* ;
); <
{ 
_httpClientFactory 
= 
httpClientFactory .
;. /
} 
public 

async 
Task 
< 
ResponseDTO !
?! "
>" #
	SendAsync$ -
(- .

RequestDTO. 8

RequestDTO9 C
,C D
stringE K
?K L
apiKeyM S
)S T
{ 
try 
{ 	

HttpClient 
client 
= 
_httpClientFactory  2
.2 3
CreateClient3 ?
(? @
$str@ K
)K L
;L M
HttpRequestMessage 
message &
=' (
new) ,
(, -
)- .
;. /
message 
. 
Headers 
. 
Add 
(  
$str  (
,( )
$str* <
)< =
;= >
if 
( 
! 
string 
. 
IsNullOrEmpty %
(% &
apiKey& ,
), -
)- .
{ 
var 
token 
= 
apiKey "
;" #
message   
.   
Headers   
.    
Add    #
(  # $
$str  $ 3
,  3 4
$"  5 7
$str  7 >
{  > ?
token  ? D
}  D E
"  E F
)  F G
;  G H
}!! 
message## 
.## 

RequestUri## 
=##  
new##! $
Uri##% (
(##( )

RequestDTO##) 3
.##3 4
Url##4 7
)##7 8
;##8 9
if%% 
(%% 

RequestDTO%% 
.%% 
Data%% 
is%%  "
not%%# &
null%%' +
)%%+ ,
{&& 
message'' 
.'' 
Content'' 
=''  !
new''" %
StringContent''& 3
(''3 4
JsonConvert''4 ?
.''? @
SerializeObject''@ O
(''O P

RequestDTO''P Z
.''Z [
Data''[ _
)''_ `
,''` a
Encoding''b j
.''j k
UTF8''k o
,''o p
$str(( &
)((& '
;((' (
})) 
HttpResponseMessage++ 
?++  
responseMessage++! 0
=++1 2
null++3 7
;++7 8
switch-- 
(-- 

RequestDTO-- 
.-- 
ApiType-- &
)--& '
{.. 
case// 

StaticEnum// 
.//  
ApiType//  '
.//' (
GET//( +
://+ ,
{00 
message11 
.11 
Method11 "
=11# $

HttpMethod11% /
.11/ 0
Get110 3
;113 4
break22 
;22 
}33 
case44 

StaticEnum44 
.44  
ApiType44  '
.44' (
POST44( ,
:44, -
{55 
message66 
.66 
Method66 "
=66# $

HttpMethod66% /
.66/ 0
Post660 4
;664 5
break77 
;77 
}88 
case99 

StaticEnum99 
.99  
ApiType99  '
.99' (
PUT99( +
:99+ ,
{:: 
message;; 
.;; 
Method;; "
=;;# $

HttpMethod;;% /
.;;/ 0
Put;;0 3
;;;3 4
break<< 
;<< 
}== 
case>> 

StaticEnum>> 
.>>  
ApiType>>  '
.>>' (
DELETE>>( .
:>>. /
{?? 
message@@ 
.@@ 
Method@@ "
=@@# $

HttpMethod@@% /
.@@/ 0
Delete@@0 6
;@@6 7
breakAA 
;AA 
}BB 
}CC 
responseMessageEE 
=EE 
awaitEE #
clientEE$ *
.EE* +
	SendAsyncEE+ 4
(EE4 5
messageEE5 <
)EE< =
;EE= >
switchGG 
(GG 
responseMessageGG #
.GG# $

StatusCodeGG$ .
)GG. /
{HH 
caseII 
HttpStatusCodeII #
.II# $
NotFoundII$ ,
:II, -
{JJ 
returnKK 
newKK 
(KK 
)KK  
{LL 
	IsSuccessMM !
=MM" #
falseMM$ )
,MM) *
MessageNN 
=NN  !
$strNN" -
,NN- .
}OO 
;OO 
}PP 
caseQQ 
HttpStatusCodeQQ #
.QQ# $
	ForbiddenQQ$ -
:QQ- .
{RR 
returnSS 
newSS 
(SS 
)SS  
{TT 
	IsSuccessUU !
=UU" #
falseUU$ )
,UU) *
MessageVV 
=VV  !
$strVV" -
,VV- .
}WW 
;WW 
}XX 
caseYY 
HttpStatusCodeYY #
.YY# $
UnauthorizedYY$ 0
:YY0 1
{ZZ 
return[[ 
new[[ 
([[ 
)[[  
{\\ 
	IsSuccess]] !
=]]" #
false]]$ )
,]]) *
Message^^ 
=^^  !
$str^^" 0
,^^0 1
}__ 
;__ 
}`` 
caseaa 
HttpStatusCodeaa #
.aa# $

BadRequestaa$ .
:aa. /
{bb 
returncc 
newcc 
(cc 
)cc  
{dd 
	IsSuccessee !
=ee" #
falseee$ )
,ee) *
Messageff 
=ff  !
$strff" .
,ff. /
}gg 
;gg 
}hh 
caseii 
HttpStatusCodeii #
.ii# $
InternalServerErrorii$ 7
:ii7 8
{jj 
returnkk 
newkk 
(kk 
)kk  
{ll 
	IsSuccessmm !
=mm" #
falsemm$ )
,mm) *
Messagenn 
=nn  !
$strnn" 7
,nn7 8
}oo 
;oo 
}pp 
defaultqq 
:qq 
{rr 
varss 

apiContentss "
=ss# $
awaitss% *
responseMessagess+ :
.ss: ;
Contentss; B
.ssB C
ReadAsStringAsyncssC T
(ssT U
)ssU V
;ssV W
varuu 
apiResponseDTOuu &
=uu' (
JsonConvertuu) 4
.uu4 5
DeserializeObjectuu5 F
<uuF G
ResponseDTOuuG R
>uuR S
(uuS T

apiContentuuT ^
)uu^ _
;uu_ `
returnvv 
apiResponseDTOvv )
;vv) *
}ww 
}xx 
}yy 	
catchzz 
(zz 
	Exceptionzz 
ezz 
)zz 
{{{ 	
return|| 
new|| 
(|| 
)|| 
{}} 
Message~~ 
=~~ 
e~~ 
.~~ 
Message~~ #
.~~# $
ToString~~$ ,
(~~, -
)~~- .
,~~. /
	IsSuccess 
= 
false !
}
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
}
ÇÇ 
}ÉÉ ò'
gD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\BalanceService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
BalanceService 
: 
IBalanceService -
{		 
private

 
readonly

 
IUnitOfWork

  
_unitOfWork

! ,
;

, -
public 

BalanceService 
( 
IUnitOfWork %

unitOfWork& 0
)0 1
{ 
_unitOfWork 
= 

unitOfWork  
;  !
} 
public 

async 
Task 
< 
ResponseDTO !
>! "
UpsertBalance# 0
(0 1
UpsertBalanceDTO1 A
upsertBalanceDtoB R
)R S
{ 
try 
{ 	
var 
balance 
= 
await 
_unitOfWork  +
.+ ,
BalanceRepository, =
.= >
GetAsync> F
(F G
xG H
=>I K
xL M
.M N
UserIdN T
==U W
upsertBalanceDtoX h
.h i
UserIdi o
)o p
;p q
if 
( 
balance 
is 
null 
)  
{ 
balance 
= 
new 
Balance %
(% &
)& '
{ 
Currency 
= 
$str $
,$ %
UserId 
= 
upsertBalanceDto -
.- .
UserId. 4
,4 5
TotalBalance  
=! "
upsertBalanceDto# 3
.3 4
TotalBalance4 @
,@ A
AvailableBalance $
=% &
upsertBalanceDto' 7
.7 8
AvailableBalance8 H
,H I
PayoutBalance !
=" #
upsertBalanceDto$ 4
.4 5
PayoutBalance5 B
,B C
UpdatedTime 
=  !
DateTime" *
.* +
UtcNow+ 1
}   
;   
await"" 
_unitOfWork"" !
.""! "
BalanceRepository""" 3
.""3 4
AddAsync""4 <
(""< =
balance""= D
)""D E
;""E F
await## 
_unitOfWork## !
.##! "
	SaveAsync##" +
(##+ ,
)##, -
;##- .
return%% 
new%% 
ResponseDTO%% &
(%%& '
)%%' (
{&& 
	IsSuccess'' 
='' 
true''  $
,''$ %
Message(( 
=(( 
$str(( ;
,((; <
Result)) 
=)) 
null)) !
,))! "

StatusCode** 
=**  
$num**! $
}++ 
;++ 
},, 
balance.. 
... 
TotalBalance..  
+=..! #
upsertBalanceDto..$ 4
...4 5
TotalBalance..5 A
;..A B
balance// 
.// 
AvailableBalance// $
+=//% '
upsertBalanceDto//( 8
.//8 9
AvailableBalance//9 I
;//I J
balance00 
.00 
PayoutBalance00 !
+=00" $
upsertBalanceDto00% 5
.005 6
PayoutBalance006 C
;00C D
balance11 
.11 
UpdatedTime11 
=11  !
DateTime11" *
.11* +
UtcNow11+ 1
;111 2
_unitOfWork33 
.33 
BalanceRepository33 )
.33) *
Update33* 0
(330 1
balance331 8
)338 9
;339 :
await44 
_unitOfWork44 
.44 
	SaveAsync44 '
(44' (
)44( )
;44) *
return66 
new66 
ResponseDTO66 "
(66" #
)66# $
{77 
	IsSuccess88 
=88 
true88  
,88  !
Message99 
=99 
$str99 7
,997 8
Result:: 
=:: 
null:: 
,:: 

StatusCode;; 
=;; 
$num;;  
}<< 
;<< 
}== 	
catch>> 
(>> 
	Exception>> 
e>> 
)>> 
{?? 	
return@@ 
new@@ 
ResponseDTO@@ "
(@@" #
)@@# $
{AA 
	IsSuccessBB 
=BB 
falseBB !
,BB! "
MessageCC 
=CC 
eCC 
.CC 
MessageCC #
,CC# $
ResultDD 
=DD 
nullDD 
,DD 

StatusCodeEE 
=EE 
$numEE  
}FF 
;FF 
}GG 	
}HH 
}II ê™	
dD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Service\AuthService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
class 
AuthService 
: 
IAuthService '
{ 
private 
readonly "
IUserManagerRepository +"
_userManagerRepository, B
;B C
private 
readonly 
IUnitOfWork  
_unitOfWork! ,
;, -
private 
readonly 
UserManager  
<  !
ApplicationUser! 0
>0 1
_userManager2 >
;> ?
private 
readonly 
RoleManager  
<  !
IdentityRole! -
>- .
_roleManager/ ;
;; <
private 
readonly 
ITokenService "
_tokenService# 0
;0 1
private 
readonly 
IMapper 
_mapper $
;$ %
private 
readonly 
IEmailService "
_emailService# 0
;0 1
private 
readonly 
IFirebaseService %
_firebaseService& 6
;6 7
private 
readonly  
IHttpContextAccessor ) 
_httpContextAccessor* >
;> ?
private 
static 
readonly  
ConcurrentDictionary 0
<0 1
string1 7
,7 8
(9 :
int: =
Count> C
,C D
DateTimeE M
LastRequestN Y
)Y Z
>Z [!
ResetPasswordAttempts\ q
=r s
new   
(   
)   
;   
public"" 

AuthService"" 
(## "
IUserManagerRepository$$ !
userManagerRepository$$ 4
,$$4 5
UserManager%% 
<%% 
ApplicationUser%% #
>%%# $
userManager%%% 0
,%%0 1
RoleManager&& 
<&& 
IdentityRole&&  
>&&  !
roleManager&&" -
,&&- .
IMapper'' 
mapper'' 
,'' 
IEmailService(( 
emailService(( "
,((" #
IFirebaseService)) 
firebaseService)) (
,))( ) 
IHttpContextAccessor** 
httpContextAccessor** 0
,**0 1
ITokenService++ 
tokenService++ "
,++" #
IUnitOfWork,, 

unitOfWork,, 
)-- 
{.. "
_userManagerRepository// 
=//  !
userManagerRepository//! 6
;//6 7
_userManager00 
=00 
userManager00 "
;00" #
_roleManager11 
=11 
roleManager11 "
;11" #
_mapper22 
=22 
mapper22 
;22 
_emailService33 
=33 
emailService33 $
;33$ %
_firebaseService44 
=44 
firebaseService44 *
;44* + 
_httpContextAccessor55 
=55 
httpContextAccessor55 2
;552 3
_tokenService66 
=66 
tokenService66 $
;66$ %
_unitOfWork77 
=77 

unitOfWork77  
;77  !
}88 
public:: 

async:: 
Task:: 
<:: 
ResponseDTO:: !
>::! "
SignUpStudent::# 0
(::0 1
RegisterStudentDTO::1 C
registerStudentDTO::D V
)::V W
{;; 
try<< 
{== 	
var>> 
isEmailExit>> 
=>> 
await>> #"
_userManagerRepository>>$ :
.>>: ;
FindByEmailAsync>>; K
(>>K L
registerStudentDTO>>L ^
.>>^ _
Email>>_ d
)>>d e
;>>e f
if?? 
(?? 
isEmailExit?? 
is?? 
not?? "
null??# '
)??' (
{@@ 
returnAA 
newAA 
ResponseDTOAA &
(AA& '
)AA' (
{BB 
MessageCC 
=CC 
$strCC >
,CC> ?
ResultDD 
=DD 
registerStudentDTODD /
,DD/ 0
	IsSuccessEE 
=EE 
falseEE  %
,EE% &

StatusCodeFF 
=FF  
$numFF! $
}GG 
;GG 
}HH 
varJJ 
isPhonenumerExitJJ  
=JJ! "
awaitKK "
_userManagerRepositoryKK ,
.KK, -)
CheckIfPhoneNumberExistsAsyncKK- J
(KKJ K
registerStudentDTOKKK ]
.KK] ^
PhoneNumberKK^ i
)KKi j
;KKj k
ifLL 
(LL 
isPhonenumerExitLL  
)LL  !
{MM 
returnNN 
newNN 
ResponseDTONN &
(NN& '
)NN' (
{OO 
MessagePP 
=PP 
$strPP E
,PPE F
ResultQQ 
=QQ 
registerStudentDTOQQ /
,QQ/ 0
	IsSuccessRR 
=RR 
falseRR  %
,RR% &

StatusCodeSS 
=SS  
$numSS! $
}TT 
;TT 
}UU 
ApplicationUserXX 
newUserXX #
=XX$ %
newXX& )
ApplicationUserXX* 9
(XX9 :
)XX: ;
{YY 
AddressZZ 
=ZZ 
registerStudentDTOZZ ,
.ZZ, -
AddressZZ- 4
,ZZ4 5
Email[[ 
=[[ 
registerStudentDTO[[ *
.[[* +
Email[[+ 0
,[[0 1
	BirthDate\\ 
=\\ 
registerStudentDTO\\ .
.\\. /
	BirthDate\\/ 8
,\\8 9
UserName]] 
=]] 
registerStudentDTO]] -
.]]- .
Email]]. 3
,]]3 4
FullName^^ 
=^^ 
registerStudentDTO^^ -
.^^- .
FullName^^. 6
,^^6 7
Gender__ 
=__ 
registerStudentDTO__ +
.__+ ,
Gender__, 2
,__2 3
Country`` 
=`` 
registerStudentDTO`` ,
.``, -
Country``- 4
,``4 5
PhoneNumberaa 
=aa 
registerStudentDTOaa 0
.aa0 1
PhoneNumberaa1 <
,aa< =

UpdateTimebb 
=bb 
DateTimebb %
.bb% &
Nowbb& )
,bb) *
	AvatarUrlcc 
=cc 
$strcc 
,cc 
	TaxNumberdd 
=dd 
$strdd 
,dd 
LockoutEnabledee 
=ee  
falseee! &
}ff 
;ff 
varii 
createUserResultii  
=ii! "
awaitii# ("
_userManagerRepositoryii) ?
.ii? @
CreateAsyncii@ K
(iiK L
newUseriiL S
,iiS T
registerStudentDTOiiU g
.iig h
Passwordiih p
)iip q
;iiq r
ifll 
(ll 
!ll 
createUserResultll !
.ll! "
	Succeededll" +
)ll+ ,
{mm 
returnoo 
newoo 
ResponseDTOoo &
(oo& '
)oo' (
{pp 
Messageqq 
=qq 
createUserResultqq .
.qq. /
Errorsqq/ 5
.qq5 6
ToStringqq6 >
(qq> ?
)qq? @
,qq@ A
	IsSuccessrr 
=rr 
falserr  %
,rr% &

StatusCodess 
=ss  
$numss! $
,ss$ %
Resulttt 
=tt 
registerStudentDTOtt /
}uu 
;uu 
}vv 
varxx 
userxx 
=xx 
awaitxx "
_userManagerRepositoryxx 3
.xx3 4
FindByPhoneAsyncxx4 D
(xxD E
registerStudentDTOxxE W
.xxW X
PhoneNumberxxX c
)xxc d
;xxd e
Studentzz 
studentzz 
=zz 
newzz !
Studentzz" )
(zz) *
)zz* +
{{{ 
UserId|| 
=|| 
user|| 
.|| 
Id||  
,||  !

University}} 
=}} 
registerStudentDTO}} /
.}}/ 0

University}}0 :
}~~ 
;~~ 
var
ÄÄ 
isRoleExist
ÄÄ 
=
ÄÄ 
await
ÄÄ #
_roleManager
ÄÄ$ 0
.
ÄÄ0 1
RoleExistsAsync
ÄÄ1 @
(
ÄÄ@ A
StaticUserRoles
ÄÄA P
.
ÄÄP Q
Student
ÄÄQ X
)
ÄÄX Y
;
ÄÄY Z
if
ÉÉ 
(
ÉÉ 
isRoleExist
ÉÉ 
is
ÉÉ 
false
ÉÉ $
)
ÉÉ$ %
{
ÑÑ 
await
ÖÖ 
_roleManager
ÖÖ "
.
ÖÖ" #
CreateAsync
ÖÖ# .
(
ÖÖ. /
new
ÖÖ/ 2
IdentityRole
ÖÖ3 ?
(
ÖÖ? @
StaticUserRoles
ÖÖ@ O
.
ÖÖO P
Student
ÖÖP W
)
ÖÖW X
)
ÖÖX Y
;
ÖÖY Z
}
ÜÜ 
var
ââ 
	isRoleAdd
ââ 
=
ââ 
await
ââ !$
_userManagerRepository
ââ" 8
.
ââ8 9
AddToRoleAsync
ââ9 G
(
ââG H
user
ââH L
,
ââL M
StaticUserRoles
ââN ]
.
ââ] ^
Student
ââ^ e
)
ââe f
;
ââf g
if
ãã 
(
ãã 
!
ãã 
	isRoleAdd
ãã 
.
ãã 
	Succeeded
ãã $
)
ãã$ %
{
åå 
return
çç 
new
çç 
ResponseDTO
çç &
(
çç& '
)
çç' (
{
éé 
Message
èè 
=
èè 
$str
èè 1
,
èè1 2
	IsSuccess
êê 
=
êê 
false
êê  %
,
êê% &

StatusCode
ëë 
=
ëë  
$num
ëë! $
,
ëë$ %
Result
íí 
=
íí  
registerStudentDTO
íí /
}
ìì 
;
ìì 
}
îî 
var
óó 
isStudentAdd
óó 
=
óó 
await
óó $
_unitOfWork
óó% 0
.
óó0 1
StudentRepository
óó1 B
.
óóB C
AddAsync
óóC K
(
óóK L
student
óóL S
)
óóS T
;
óóT U
if
òò 
(
òò 
isStudentAdd
òò 
==
òò 
null
òò  $
)
òò$ %
{
ôô 
return
öö 
new
öö 
ResponseDTO
öö &
(
öö& '
)
öö' (
{
õõ 
Message
úú 
=
úú 
$str
úú 5
,
úú5 6
	IsSuccess
ùù 
=
ùù 
false
ùù  %
,
ùù% &

StatusCode
ûû 
=
ûû  
$num
ûû! $
,
ûû$ %
Result
üü 
=
üü  
registerStudentDTO
üü /
}
†† 
;
†† 
}
°° 
var
§§ 
	isSuccess
§§ 
=
§§ 
await
§§ !
_unitOfWork
§§" -
.
§§- .
	SaveAsync
§§. 7
(
§§7 8
)
§§8 9
;
§§9 :
if
•• 
(
•• 
	isSuccess
•• 
<=
•• 
$num
•• 
)
•• 
{
¶¶ 
return
ßß 
new
ßß 
ResponseDTO
ßß &
(
ßß& '
)
ßß' (
{
®® 
Message
©© 
=
©© 
$str
©© F
,
©©F G
	IsSuccess
™™ 
=
™™ 
false
™™  %
,
™™% &

StatusCode
´´ 
=
´´  
$num
´´! $
,
´´$ %
Result
¨¨ 
=
¨¨  
registerStudentDTO
¨¨ /
}
≠≠ 
;
≠≠ 
}
ÆÆ 
return
±± 
new
±± 
ResponseDTO
±± "
(
±±" #
)
±±# $
{
≤≤ 
Message
≥≥ 
=
≥≥ 
$str
≥≥ 8
,
≥≥8 9
	IsSuccess
¥¥ 
=
¥¥ 
true
¥¥  
,
¥¥  !

StatusCode
µµ 
=
µµ 
$num
µµ  
,
µµ  !
Result
∂∂ 
=
∂∂  
registerStudentDTO
∂∂ +
}
∑∑ 
;
∑∑ 
}
∏∏ 	
catch
ππ 
(
ππ 
	Exception
ππ 
e
ππ 
)
ππ 
{
∫∫ 	
return
ºº 
new
ºº 
ResponseDTO
ºº "
(
ºº" #
)
ºº# $
{
ΩΩ 
Message
ææ 
=
ææ 
e
ææ 
.
ææ 
Message
ææ #
,
ææ# $
Result
øø 
=
øø  
registerStudentDTO
øø +
,
øø+ ,
	IsSuccess
¿¿ 
=
¿¿ 
false
¿¿ !
,
¿¿! "

StatusCode
¡¡ 
=
¡¡ 
$num
¡¡  
}
¬¬ 
;
¬¬ 
}
√√ 	
}
ƒƒ 
public
ÀÀ 

async
ÀÀ 
Task
ÀÀ 
<
ÀÀ 
ResponseDTO
ÀÀ !
>
ÀÀ! "
SignUpInstructor
ÀÀ# 3
(
ÀÀ3 4!
SignUpInstructorDTO
ÀÀ4 G!
signUpInstructorDto
ÀÀH [
)
ÀÀ[ \
{
ÃÃ 
try
ÕÕ 
{
ŒŒ 	
var
–– 
user
–– 
=
–– 
await
–– 
_userManager
–– )
.
––) *
FindByEmailAsync
––* :
(
––: ;!
signUpInstructorDto
––; N
.
––N O
Email
––O T
)
––T U
;
––U V
if
”” 
(
”” 
user
”” 
is
”” 
not
”” 
null
””  
)
””  !
{
‘‘ 
return
’’ 
new
’’ 
ResponseDTO
’’ &
(
’’& '
)
’’' (
{
÷÷ 
Message
◊◊ 
=
◊◊ 
$str
◊◊ >
,
◊◊> ?
Result
ÿÿ 
=
ÿÿ !
signUpInstructorDto
ÿÿ 0
,
ÿÿ0 1
	IsSuccess
ŸŸ 
=
ŸŸ 
false
ŸŸ  %
,
ŸŸ% &

StatusCode
⁄⁄ 
=
⁄⁄  
$num
⁄⁄! $
}
€€ 
;
€€ 
}
‹‹ 
var
ﬁﬁ 
isPhonenumerExit
ﬁﬁ  
=
ﬁﬁ! "
await
ﬂﬂ 
_userManager
ﬂﬂ "
.
ﬂﬂ" #
Users
ﬂﬂ# (
.
ﬂﬂ( )
AnyAsync
ﬂﬂ) 1
(
ﬂﬂ1 2
u
ﬂﬂ2 3
=>
ﬂﬂ4 6
u
ﬂﬂ7 8
.
ﬂﬂ8 9
PhoneNumber
ﬂﬂ9 D
==
ﬂﬂE G!
signUpInstructorDto
ﬂﬂH [
.
ﬂﬂ[ \
PhoneNumber
ﬂﬂ\ g
)
ﬂﬂg h
;
ﬂﬂh i
if
‡‡ 
(
‡‡ 
isPhonenumerExit
‡‡  
)
‡‡  !
{
·· 
return
‚‚ 
new
‚‚ 
ResponseDTO
‚‚ &
(
‚‚& '
)
‚‚' (
{
„„ 
Message
‰‰ 
=
‰‰ 
$str
‰‰ E
,
‰‰E F
Result
ÂÂ 
=
ÂÂ !
signUpInstructorDto
ÂÂ 0
,
ÂÂ0 1
	IsSuccess
ÊÊ 
=
ÊÊ 
false
ÊÊ  %
,
ÊÊ% &

StatusCode
ÁÁ 
=
ÁÁ  
$num
ÁÁ! $
}
ËË 
;
ËË 
}
ÈÈ 
ApplicationUser
ÌÌ 
newUser
ÌÌ #
=
ÌÌ$ %
new
ÌÌ& )
ApplicationUser
ÌÌ* 9
(
ÌÌ9 :
)
ÌÌ: ;
{
ÓÓ 
Address
ÔÔ 
=
ÔÔ !
signUpInstructorDto
ÔÔ -
.
ÔÔ- .
Address
ÔÔ. 5
,
ÔÔ5 6
Email
 
=
 !
signUpInstructorDto
 +
.
+ ,
Email
, 1
,
1 2
	BirthDate
ÒÒ 
=
ÒÒ !
signUpInstructorDto
ÒÒ /
.
ÒÒ/ 0
	BirthDate
ÒÒ0 9
,
ÒÒ9 :
UserName
ÚÚ 
=
ÚÚ !
signUpInstructorDto
ÚÚ .
.
ÚÚ. /
Email
ÚÚ/ 4
,
ÚÚ4 5
FullName
ÛÛ 
=
ÛÛ !
signUpInstructorDto
ÛÛ .
.
ÛÛ. /
FullName
ÛÛ/ 7
,
ÛÛ7 8
Gender
ÙÙ 
=
ÙÙ !
signUpInstructorDto
ÙÙ ,
.
ÙÙ, -
Gender
ÙÙ- 3
,
ÙÙ3 4
Country
ıı 
=
ıı !
signUpInstructorDto
ıı -
.
ıı- .
Country
ıı. 5
,
ıı5 6
PhoneNumber
ˆˆ 
=
ˆˆ !
signUpInstructorDto
ˆˆ 1
.
ˆˆ1 2
PhoneNumber
ˆˆ2 =
,
ˆˆ= >
	TaxNumber
˜˜ 
=
˜˜ !
signUpInstructorDto
˜˜ /
.
˜˜/ 0
	TaxNumber
˜˜0 9
,
˜˜9 :

UpdateTime
¯¯ 
=
¯¯ 
DateTime
¯¯ %
.
¯¯% &
Now
¯¯& )
,
¯¯) *
LockoutEnabled
˘˘ 
=
˘˘  
false
˘˘! &
}
˙˙ 
;
˙˙ 
var
˝˝ 
createUserResult
˝˝  
=
˝˝! "
await
˝˝# (
_userManager
˝˝) 5
.
˝˝5 6
CreateAsync
˝˝6 A
(
˝˝A B
newUser
˝˝B I
,
˝˝I J!
signUpInstructorDto
˝˝K ^
.
˝˝^ _
Password
˝˝_ g
)
˝˝g h
;
˝˝h i
if
ÅÅ 
(
ÅÅ 
!
ÅÅ 
createUserResult
ÅÅ !
.
ÅÅ! "
	Succeeded
ÅÅ" +
)
ÅÅ+ ,
{
ÇÇ 
return
ÑÑ 
new
ÑÑ 
ResponseDTO
ÑÑ &
(
ÑÑ& '
)
ÑÑ' (
{
ÖÖ 
Message
ÜÜ 
=
ÜÜ 
createUserResult
ÜÜ .
.
ÜÜ. /
Errors
ÜÜ/ 5
.
ÜÜ5 6
ToString
ÜÜ6 >
(
ÜÜ> ?
)
ÜÜ? @
,
ÜÜ@ A
	IsSuccess
áá 
=
áá 
false
áá  %
,
áá% &

StatusCode
àà 
=
àà  
$num
àà! $
,
àà$ %
Result
ââ 
=
ââ !
signUpInstructorDto
ââ 0
}
ää 
;
ää 
}
ãã 
user
éé 
=
éé 
await
éé 
_userManager
éé %
.
éé% &
FindByEmailAsync
éé& 6
(
éé6 7!
signUpInstructorDto
éé7 J
.
ééJ K
Email
ééK P
)
ééP Q
;
ééQ R

Instructor
íí 

instructor
íí !
=
íí" #
new
íí$ '

Instructor
íí( 2
(
íí2 3
)
íí3 4
{
ìì 
UserId
îî 
=
îî 
user
îî 
.
îî 
Id
îî  
,
îî  !
Degree
ïï 
=
ïï !
signUpInstructorDto
ïï ,
.
ïï, -
Degree
ïï- 3
,
ïï3 4
Industry
ññ 
=
ññ !
signUpInstructorDto
ññ .
.
ññ. /
Industry
ññ/ 7
,
ññ7 8
Introduction
óó 
=
óó !
signUpInstructorDto
óó 2
.
óó2 3
Introduction
óó3 ?
,
óó? @

AcceptedBy
òò 
=
òò 
$str
òò 
,
òò  
AcceptedTime
ôô 
=
ôô 
null
ôô #
,
ôô# $

RejectedBy
öö 
=
öö 
$str
öö 
,
öö  
RejectedTime
õõ 
=
õõ 
null
õõ #
,
õõ# $

IsAccepted
úú 
=
úú 
null
úú !
}
ùù 
;
ùù 
var
°° 
isRoleExist
°° 
=
°° 
await
°° #
_roleManager
°°$ 0
.
°°0 1
RoleExistsAsync
°°1 @
(
°°@ A
StaticUserRoles
°°A P
.
°°P Q

Instructor
°°Q [
)
°°[ \
;
°°\ ]
if
§§ 
(
§§ 
isRoleExist
§§ 
is
§§ 
false
§§ $
)
§§$ %
{
•• 
await
¶¶ 
_roleManager
¶¶ "
.
¶¶" #
CreateAsync
¶¶# .
(
¶¶. /
new
¶¶/ 2
IdentityRole
¶¶3 ?
(
¶¶? @
StaticUserRoles
¶¶@ O
.
¶¶O P

Instructor
¶¶P Z
)
¶¶Z [
)
¶¶[ \
;
¶¶\ ]
}
ßß 
await
™™ 
_userManager
™™ 
.
™™ 
AddToRoleAsync
™™ -
(
™™- .
user
™™. 2
,
™™2 3
StaticUserRoles
™™4 C
.
™™C D

Instructor
™™D N
)
™™N O
;
™™O P
await
≠≠ 
_unitOfWork
≠≠ 
.
≠≠ "
InstructorRepository
≠≠ 2
.
≠≠2 3
AddAsync
≠≠3 ;
(
≠≠; <

instructor
≠≠< F
)
≠≠F G
;
≠≠G H
await
∞∞ 
_unitOfWork
∞∞ 
.
∞∞ 
	SaveAsync
∞∞ '
(
∞∞' (
)
∞∞( )
;
∞∞) *
return
≥≥ 
new
≥≥ 
ResponseDTO
≥≥ "
(
≥≥" #
)
≥≥# $
{
¥¥ 
Message
µµ 
=
µµ 
$str
µµ 8
,
µµ8 9
	IsSuccess
∂∂ 
=
∂∂ 
true
∂∂  
,
∂∂  !

StatusCode
∑∑ 
=
∑∑ 
$num
∑∑  
,
∑∑  !
Result
∏∏ 
=
∏∏ !
signUpInstructorDto
∏∏ ,
}
ππ 
;
ππ 
}
∫∫ 	
catch
ªª 
(
ªª 
	Exception
ªª 
e
ªª 
)
ªª 
{
ºº 	
return
ææ 
new
ææ 
ResponseDTO
ææ "
(
ææ" #
)
ææ# $
{
øø 
Message
¿¿ 
=
¿¿ 
e
¿¿ 
.
¿¿ 
Message
¿¿ #
,
¿¿# $
Result
¡¡ 
=
¡¡ !
signUpInstructorDto
¡¡ ,
,
¡¡, -
	IsSuccess
¬¬ 
=
¬¬ 
false
¬¬ !
,
¬¬! "

StatusCode
√√ 
=
√√ 
$num
√√  
}
ƒƒ 
;
ƒƒ 
}
≈≈ 	
}
∆∆ 
public
ŒŒ 

async
ŒŒ 
Task
ŒŒ 
<
ŒŒ 
ResponseDTO
ŒŒ !
>
ŒŒ! "$
UploadInstructorDegree
ŒŒ# 9
(
ŒŒ9 :
	IFormFile
ŒŒ: C
file
ŒŒD H
,
ŒŒH I
ClaimsPrincipal
ŒŒJ Y
User
ŒŒZ ^
)
ŒŒ^ _
{
œœ 
try
–– 
{
—— 	
var
““ 
userId
““ 
=
““ 
User
““ 
.
““ 
Claims
““ $
.
““$ %
FirstOrDefault
““% 3
(
““3 4
x
““4 5
=>
““6 8
x
““9 :
.
““: ;
Type
““; ?
==
““@ B

ClaimTypes
““C M
.
““M N
NameIdentifier
““N \
)
““\ ]
?
““] ^
.
““^ _
Value
““_ d
;
““d e
if
‘‘ 
(
‘‘ 
userId
‘‘ 
is
‘‘ 
null
‘‘ 
)
‘‘ 
{
’’ 
throw
÷÷ 
new
÷÷ 
	Exception
÷÷ #
(
÷÷# $
$str
÷÷$ 9
)
÷÷9 :
;
÷÷: ;
}
◊◊ 
var
ŸŸ 

instructor
ŸŸ 
=
ŸŸ 
await
ŸŸ "
_unitOfWork
ŸŸ# .
.
ŸŸ. /"
InstructorRepository
ŸŸ/ C
.
ŸŸC D
GetAsync
ŸŸD L
(
ŸŸL M
x
ŸŸM N
=>
ŸŸO Q
x
ŸŸR S
.
ŸŸS T
UserId
ŸŸT Z
==
ŸŸ[ ]
userId
ŸŸ^ d
)
ŸŸd e
;
ŸŸe f
if
€€ 
(
€€ 

instructor
€€ 
is
€€ 
null
€€ "
)
€€" #
{
‹‹ 
throw
›› 
new
›› 
	Exception
›› #
(
››# $
$str
››$ ?
)
››? @
;
››@ A
}
ﬁﬁ 
var
‡‡ 
responseDto
‡‡ 
=
‡‡ 
await
‡‡ #
_firebaseService
‡‡$ 4
.
‡‡4 5
UploadImage
‡‡5 @
(
‡‡@ A
file
‡‡A E
,
‡‡E F#
StaticFirebaseFolders
‡‡G \
.
‡‡\ ]
InstructorDegrees
‡‡] n
)
‡‡n o
;
‡‡o p
if
‚‚ 
(
‚‚ 
!
‚‚ 
responseDto
‚‚ 
.
‚‚ 
	IsSuccess
‚‚ &
)
‚‚& '
{
„„ 
throw
‰‰ 
new
‰‰ 
	Exception
‰‰ #
(
‰‰# $
$str
‰‰$ 8
)
‰‰8 9
;
‰‰9 :
}
ÂÂ 

instructor
ÁÁ 
.
ÁÁ 
DegreeImageUrl
ÁÁ %
=
ÁÁ& '
responseDto
ÁÁ( 3
.
ÁÁ3 4
Result
ÁÁ4 :
.
ÁÁ: ;
ToString
ÁÁ; C
(
ÁÁC D
)
ÁÁD E
;
ÁÁE F
await
ÈÈ 
_unitOfWork
ÈÈ 
.
ÈÈ 
	SaveAsync
ÈÈ '
(
ÈÈ' (
)
ÈÈ( )
;
ÈÈ) *
return
ÎÎ 
new
ÎÎ 
ResponseDTO
ÎÎ "
(
ÎÎ" #
)
ÎÎ# $
{
ÏÏ 
	IsSuccess
ÌÌ 
=
ÌÌ 
true
ÌÌ  
,
ÌÌ  !

StatusCode
ÓÓ 
=
ÓÓ 
$num
ÓÓ  
,
ÓÓ  !
Result
ÔÔ 
=
ÔÔ 
responseDto
ÔÔ $
.
ÔÔ$ %
Result
ÔÔ% +
,
ÔÔ+ ,
Message
 
=
 
$str
 A
}
ÒÒ 
;
ÒÒ 
}
ÚÚ 	
catch
ÛÛ 
(
ÛÛ 
	Exception
ÛÛ 
e
ÛÛ 
)
ÛÛ 
{
ÙÙ 	
return
ıı 
new
ıı 
ResponseDTO
ıı "
(
ıı" #
)
ıı# $
{
ˆˆ 
	IsSuccess
˜˜ 
=
˜˜ 
false
˜˜ !
,
˜˜! "

StatusCode
¯¯ 
=
¯¯ 
$num
¯¯  
,
¯¯  !
Result
˘˘ 
=
˘˘ 
null
˘˘ 
,
˘˘ 
Message
˙˙ 
=
˙˙ 
e
˙˙ 
.
˙˙ 
Message
˙˙ #
}
˚˚ 
;
˚˚ 
}
¸¸ 	
}
˝˝ 
public
ÑÑ 

async
ÑÑ 
Task
ÑÑ 
<
ÑÑ 
DegreeResponseDTO
ÑÑ '
>
ÑÑ' (!
GetInstructorDegree
ÑÑ) <
(
ÑÑ< =
ClaimsPrincipal
ÑÑ= L
User
ÑÑM Q
)
ÑÑQ R
{
ÖÖ 
try
ÜÜ 
{
áá 	
var
àà 
userId
àà 
=
àà 
User
àà 
.
àà 
Claims
àà $
.
àà$ %
FirstOrDefault
àà% 3
(
àà3 4
x
àà4 5
=>
àà6 8
x
àà9 :
.
àà: ;
Type
àà; ?
==
àà@ B

ClaimTypes
ààC M
.
ààM N
NameIdentifier
ààN \
)
àà\ ]
?
àà] ^
.
àà^ _
Value
àà_ d
;
ààd e
if
ää 
(
ää 
userId
ää 
is
ää 
null
ää 
)
ää 
{
ãã 
throw
åå 
new
åå 
	Exception
åå #
(
åå# $
$str
åå$ ;
)
åå; <
;
åå< =
}
çç 
var
èè 

instructor
èè 
=
èè 
await
èè "
_unitOfWork
èè# .
.
èè. /"
InstructorRepository
èè/ C
.
èèC D
GetAsync
èèD L
(
èèL M
x
èèM N
=>
èèO Q
x
èèR S
.
èèS T
UserId
èèT Z
==
èè[ ]
userId
èè^ d
)
èèd e
;
èèe f
if
ëë 
(
ëë 

instructor
ëë 
is
ëë 
null
ëë "
)
ëë" #
{
íí 
throw
ìì 
new
ìì 
	Exception
ìì #
(
ìì# $
$str
ìì$ @
)
ìì@ A
;
ììA B
}
îî 
var
ññ 

degreePath
ññ 
=
ññ 

instructor
ññ '
?
ññ' (
.
ññ( )
DegreeImageUrl
ññ) 7
;
ññ7 8
if
óó 
(
óó 

degreePath
óó 
.
óó 
IsNullOrEmpty
óó (
(
óó( )
)
óó) *
)
óó* +
{
òò 
throw
ôô 
new
ôô 
	Exception
ôô #
(
ôô# $
$str
ôô$ H
)
ôôH I
;
ôôI J
}
öö 
var
úú 
stream
úú 
=
úú 
await
úú 
_firebaseService
úú /
.
úú/ 0
GetImage
úú0 8
(
úú8 9

instructor
úú9 C
.
úúC D
DegreeImageUrl
úúD R
)
úúR S
;
úúS T
if
ûû 
(
ûû 
stream
ûû 
is
ûû 
null
ûû 
)
ûû 
{
üü 
throw
†† 
new
†† 
	Exception
†† #
(
††# $
$str
††$ F
)
††F G
;
††G H
}
°° 
var
££ 
contentType
££ 
=
££ 
$str
££ 7
;
££7 8
if
•• 
(
•• 

degreePath
•• 
.
•• 
EndsWith
•• #
(
••# $
$str
••$ *
)
••* +
)
••+ ,
{
¶¶ 
contentType
ßß 
=
ßß "
StaticFileExtensions
ßß 2
.
ßß2 3
Pdf
ßß3 6
;
ßß6 7
}
®® 
if
™™ 
(
™™ 

degreePath
™™ 
.
™™ 
EndsWith
™™ #
(
™™# $
$str
™™$ *
)
™™* +
)
™™+ ,
{
´´ 
contentType
¨¨ 
=
¨¨ "
StaticFileExtensions
¨¨ 2
.
¨¨2 3
Png
¨¨3 6
;
¨¨6 7
}
≠≠ 
if
ØØ 
(
ØØ 

degreePath
ØØ 
.
ØØ 
EndsWith
ØØ #
(
ØØ# $
$str
ØØ$ *
)
ØØ* +
||
ØØ, .

degreePath
ØØ/ 9
.
ØØ9 :
EndsWith
ØØ: B
(
ØØB C
$str
ØØC J
)
ØØJ K
)
ØØK L
{
∞∞ 
contentType
±± 
=
±± "
StaticFileExtensions
±± 2
.
±±2 3
Jpeg
±±3 7
;
±±7 8
}
≤≤ 
return
¥¥ 
new
¥¥ 
DegreeResponseDTO
¥¥ (
(
¥¥( )
)
¥¥) *
{
µµ 
Message
∂∂ 
=
∂∂ 
$str
∂∂ 1
,
∂∂1 2
Stream
∑∑ 
=
∑∑ 
stream
∑∑ 
,
∑∑  
ContentType
∏∏ 
=
∏∏ 
contentType
∏∏ )
,
∏∏) *
FileName
ππ 
=
ππ 
Path
ππ 
.
ππ  
GetFileName
ππ  +
(
ππ+ ,

degreePath
ππ, 6
)
ππ6 7
}
∫∫ 
;
∫∫ 
}
ªª 	
catch
ºº 
(
ºº 
	Exception
ºº 
e
ºº 
)
ºº 
{
ΩΩ 	
return
ææ 
new
ææ 
DegreeResponseDTO
ææ (
(
ææ( )
)
ææ) *
{
øø 
ContentType
¿¿ 
=
¿¿ 
null
¿¿ "
,
¿¿" #
Message
¡¡ 
=
¡¡ 
e
¡¡ 
.
¡¡ 
Message
¡¡ #
,
¡¡# $
Stream
¬¬ 
=
¬¬ 
null
¬¬ 
}
√√ 
;
√√ 
}
ƒƒ 	
}
≈≈ 
public
ÕÕ 

async
ÕÕ 
Task
ÕÕ 
<
ÕÕ 
ResponseDTO
ÕÕ !
>
ÕÕ! "
UploadUserAvatar
ÕÕ# 3
(
ÕÕ3 4
	IFormFile
ÕÕ4 =
file
ÕÕ> B
,
ÕÕB C
ClaimsPrincipal
ÕÕD S
User
ÕÕT X
)
ÕÕX Y
{
ŒŒ 
try
œœ 
{
–– 	
var
—— 
userId
—— 
=
—— 
User
—— 
.
—— 
Claims
—— $
.
——$ %
FirstOrDefault
——% 3
(
——3 4
x
——4 5
=>
——6 8
x
——9 :
.
——: ;
Type
——; ?
==
——@ B

ClaimTypes
——C M
.
——M N
NameIdentifier
——N \
)
——\ ]
?
——] ^
.
——^ _
Value
——_ d
;
——d e
if
”” 
(
”” 
userId
”” 
is
”” 
null
”” 
)
”” 
{
‘‘ 
throw
’’ 
new
’’ 
	Exception
’’ #
(
’’# $
$str
’’$ 9
)
’’9 :
;
’’: ;
}
÷÷ 
var
ÿÿ 
user
ÿÿ 
=
ÿÿ 
await
ÿÿ 
_userManager
ÿÿ )
.
ÿÿ) *
FindByIdAsync
ÿÿ* 7
(
ÿÿ7 8
userId
ÿÿ8 >
)
ÿÿ> ?
;
ÿÿ? @
if
⁄⁄ 
(
⁄⁄ 
user
⁄⁄ 
is
⁄⁄ 
null
⁄⁄ 
)
⁄⁄ 
{
€€ 
throw
‹‹ 
new
‹‹ 
	Exception
‹‹ #
(
‹‹# $
$str
‹‹$ 9
)
‹‹9 :
;
‹‹: ;
}
›› 
var
ﬂﬂ 
responseDto
ﬂﬂ 
=
ﬂﬂ 
await
ﬂﬂ #
_firebaseService
ﬂﬂ$ 4
.
ﬂﬂ4 5
UploadImage
ﬂﬂ5 @
(
ﬂﬂ@ A
file
ﬂﬂA E
,
ﬂﬂE F#
StaticFirebaseFolders
ﬂﬂG \
.
ﬂﬂ\ ]
UserAvatars
ﬂﬂ] h
)
ﬂﬂh i
;
ﬂﬂi j
if
·· 
(
·· 
!
·· 
responseDto
·· 
.
·· 
	IsSuccess
·· &
)
··& '
{
‚‚ 
throw
„„ 
new
„„ 
	Exception
„„ #
(
„„# $
$str
„„$ 8
)
„„8 9
;
„„9 :
}
‰‰ 
user
ÊÊ 
.
ÊÊ 
	AvatarUrl
ÊÊ 
=
ÊÊ 
responseDto
ÊÊ (
.
ÊÊ( )
Result
ÊÊ) /
?
ÊÊ/ 0
.
ÊÊ0 1
ToString
ÊÊ1 9
(
ÊÊ9 :
)
ÊÊ: ;
;
ÊÊ; <
var
ËË 
updateResult
ËË 
=
ËË 
await
ËË $
_userManager
ËË% 1
.
ËË1 2
UpdateAsync
ËË2 =
(
ËË= >
user
ËË> B
)
ËËB C
;
ËËC D
if
ÍÍ 
(
ÍÍ 
!
ÍÍ 
updateResult
ÍÍ 
.
ÍÍ 
	Succeeded
ÍÍ '
)
ÍÍ' (
{
ÎÎ 
throw
ÏÏ 
new
ÏÏ 
	Exception
ÏÏ #
(
ÏÏ# $
$str
ÏÏ$ >
)
ÏÏ> ?
;
ÏÏ? @
}
ÌÌ 
return
ÔÔ 
new
ÔÔ 
ResponseDTO
ÔÔ "
(
ÔÔ" #
)
ÔÔ# $
{
 
Message
ÒÒ 
=
ÒÒ 
$str
ÒÒ <
,
ÒÒ< =
Result
ÚÚ 
=
ÚÚ 
null
ÚÚ 
,
ÚÚ 
	IsSuccess
ÛÛ 
=
ÛÛ 
true
ÛÛ  
,
ÛÛ  !

StatusCode
ÙÙ 
=
ÙÙ 
$num
ÙÙ  
}
ıı 
;
ıı 
}
ˆˆ 	
catch
˜˜ 
(
˜˜ 
	Exception
˜˜ 
e
˜˜ 
)
˜˜ 
{
¯¯ 	
return
˘˘ 
new
˘˘ 
ResponseDTO
˘˘ "
(
˘˘" #
)
˘˘# $
{
˙˙ 
Message
˚˚ 
=
˚˚ 
e
˚˚ 
.
˚˚ 
Message
˚˚ #
,
˚˚# $
Result
¸¸ 
=
¸¸ 
null
¸¸ 
,
¸¸ 
	IsSuccess
˝˝ 
=
˝˝ 
false
˝˝ !
,
˝˝! "

StatusCode
˛˛ 
=
˛˛ 
$num
˛˛  
}
ˇˇ 
;
ˇˇ 
}
ÄÄ 	
}
ÅÅ 
public
àà 

async
àà 
Task
àà 
<
àà 
MemoryStream
àà "
>
àà" #
GetUserAvatar
àà$ 1
(
àà1 2
ClaimsPrincipal
àà2 A
User
ààB F
)
ààF G
{
ââ 
try
ää 
{
ãã 	
var
åå 
userId
åå 
=
åå 
User
åå 
.
åå 
Claims
åå $
.
åå$ %
FirstOrDefault
åå% 3
(
åå3 4
x
åå4 5
=>
åå6 8
x
åå9 :
.
åå: ;
Type
åå; ?
==
åå@ B

ClaimTypes
ååC M
.
ååM N
NameIdentifier
ååN \
)
åå\ ]
?
åå] ^
.
åå^ _
Value
åå_ d
;
ååd e
var
éé 
user
éé 
=
éé 
await
éé 
_userManager
éé )
.
éé) *
FindByIdAsync
éé* 7
(
éé7 8
userId
éé8 >
)
éé> ?
;
éé? @
var
êê 
stream
êê 
=
êê 
await
êê 
_firebaseService
êê /
.
êê/ 0
GetImage
êê0 8
(
êê8 9
user
êê9 =
.
êê= >
	AvatarUrl
êê> G
)
êêG H
;
êêH I
return
íí 
stream
íí 
;
íí 
}
ìì 	
catch
îî 
(
îî 
	Exception
îî 
e
îî 
)
îî 
{
ïï 	
return
ññ 
null
ññ 
;
ññ 
}
óó 	
}
òò 
public
úú 

async
úú 
Task
úú 
<
úú 
ResponseDTO
úú !
>
úú! "
SignIn
úú# )
(
úú) *
SignDTO
úú* 1
signDTO
úú2 9
)
úú9 :
{
ùù 
try
ûû 
{
üü 	
var
†† 
user
†† 
=
†† 
await
†† 
_userManager
†† )
.
††) *
FindByEmailAsync
††* :
(
††: ;
signDTO
††; B
.
††B C
Email
††C H
)
††H I
;
††I J
if
°° 
(
°° 
user
°° 
==
°° 
null
°° 
)
°° 
{
¢¢ 
new
££ 
ResponseDTO
££ 
(
££  
)
££  !
{
§§ 
Message
•• 
=
•• 
$str
•• 4
,
••4 5
Result
¶¶ 
=
¶¶ 
null
¶¶ !
,
¶¶! "
	IsSuccess
ßß 
=
ßß 
false
ßß  %
,
ßß% &

StatusCode
®® 
=
®®  
$num
®®! $
}
©© 
;
©© 
}
™™ 
var
¨¨ 
isPasswordCorrect
¨¨ !
=
¨¨" #
await
¨¨$ )
_userManager
¨¨* 6
.
¨¨6 7 
CheckPasswordAsync
¨¨7 I
(
¨¨I J
user
¨¨J N
,
¨¨N O
signDTO
¨¨P W
.
¨¨W X
Password
¨¨X `
)
¨¨` a
;
¨¨a b
if
ÆÆ 
(
ÆÆ 
!
ÆÆ 
isPasswordCorrect
ÆÆ "
)
ÆÆ" #
{
ØØ 
return
∞∞ 
new
∞∞ 
ResponseDTO
∞∞ &
(
∞∞& '
)
∞∞' (
{
±± 
Message
≤≤ 
=
≤≤ 
$str
≤≤ ;
,
≤≤; <
Result
≥≥ 
=
≥≥ 
null
≥≥ !
,
≥≥! "
	IsSuccess
¥¥ 
=
¥¥ 
false
¥¥  %
,
¥¥% &

StatusCode
µµ 
=
µµ  
$num
µµ! $
}
∂∂ 
;
∂∂ 
}
∑∑ 
if
ππ 
(
ππ 
!
ππ 
user
ππ 
.
ππ 
EmailConfirmed
ππ $
)
ππ$ %
{
∫∫ 
return
ªª 
new
ªª 
ResponseDTO
ªª &
(
ªª& '
)
ªª' (
{
ºº 
Message
ΩΩ 
=
ΩΩ 
$str
ΩΩ :
,
ΩΩ: ;
Result
ææ 
=
ææ 
null
ææ !
,
ææ! "
	IsSuccess
øø 
=
øø 
false
øø  %
,
øø% &

StatusCode
¿¿ 
=
¿¿  
$num
¿¿! $
}
¡¡ 
;
¡¡ 
}
¬¬ 
if
ƒƒ 
(
ƒƒ 
user
ƒƒ 
.
ƒƒ 

LockoutEnd
ƒƒ 
is
ƒƒ  "
not
ƒƒ# &
null
ƒƒ' +
)
ƒƒ+ ,
{
≈≈ 
return
∆∆ 
new
∆∆ 
ResponseDTO
∆∆ &
(
∆∆& '
)
∆∆' (
{
«« 
Message
»» 
=
»» 
$str
»» 4
,
»»4 5
	IsSuccess
…… 
=
…… 
false
……  %
,
……% &

StatusCode
   
=
    
$num
  ! $
,
  $ %
Result
ÀÀ 
=
ÀÀ 
null
ÀÀ !
}
ÃÃ 
;
ÃÃ 
}
ÕÕ 
var
œœ 
accessToken
œœ 
=
œœ 
await
œœ #
_tokenService
œœ$ 1
.
œœ1 2)
GenerateJwtAccessTokenAsync
œœ2 M
(
œœM N
user
œœN R
)
œœR S
;
œœS T
var
–– 
refreshToken
–– 
=
–– 
await
–– $
_tokenService
––% 2
.
––2 3*
GenerateJwtRefreshTokenAsync
––3 O
(
––O P
user
––P T
)
––T U
;
––U V
await
—— 
_tokenService
—— 
.
——  
StoreRefreshToken
——  1
(
——1 2
user
——2 6
.
——6 7
Id
——7 9
,
——9 :
refreshToken
——; G
)
——G H
;
——H I
user
”” 
.
”” 
LastLoginTime
”” 
=
””  
DateTime
””! )
.
””) *
UtcNow
””* 0
;
””0 1
user
‘‘ 
.
‘‘ 
SendClearEmail
‘‘ 
=
‘‘  !
false
‘‘" '
;
‘‘' (
await
’’ 
_userManager
’’ 
.
’’ 
UpdateAsync
’’ *
(
’’* +
user
’’+ /
)
’’/ 0
;
’’0 1
return
◊◊ 
new
◊◊ 
ResponseDTO
◊◊ "
(
◊◊" #
)
◊◊# $
{
ÿÿ 
Result
ŸŸ 
=
ŸŸ 
new
ŸŸ 
SignResponseDTO
ŸŸ ,
(
ŸŸ, -
)
ŸŸ- .
{
⁄⁄ 
AccessToken
€€ 
=
€€  !
accessToken
€€" -
,
€€- .
RefreshToken
‹‹  
=
‹‹! "
refreshToken
‹‹# /
,
‹‹/ 0
}
›› 
,
›› 
Message
ﬁﬁ 
=
ﬁﬁ 
$str
ﬁﬁ 0
,
ﬁﬁ0 1
	IsSuccess
ﬂﬂ 
=
ﬂﬂ 
true
ﬂﬂ  
,
ﬂﬂ  !

StatusCode
‡‡ 
=
‡‡ 
$num
‡‡  
}
·· 
;
·· 
}
‚‚ 	
catch
„„ 
(
„„ 
	Exception
„„ 
e
„„ 
)
„„ 
{
‰‰ 	
return
ÂÂ 
new
ÂÂ 
ResponseDTO
ÂÂ "
(
ÂÂ" #
)
ÂÂ# $
{
ÊÊ 
Message
ÁÁ 
=
ÁÁ 
e
ÁÁ 
.
ÁÁ 
Message
ÁÁ #
,
ÁÁ# $
	IsSuccess
ËË 
=
ËË 
false
ËË !
,
ËË! "

StatusCode
ÈÈ 
=
ÈÈ 
$num
ÈÈ  
,
ÈÈ  !
Result
ÍÍ 
=
ÍÍ 
null
ÍÍ 
}
ÎÎ 
;
ÎÎ 
}
ÏÏ 	
}
ÌÌ 
public
ÙÙ 

async
ÙÙ 
Task
ÙÙ 
<
ÙÙ 
ResponseDTO
ÙÙ !
>
ÙÙ! "
Refresh
ÙÙ# *
(
ÙÙ* +
string
ÙÙ+ 1
token
ÙÙ2 7
)
ÙÙ7 8
{
ıı 
try
ˆˆ 
{
˜˜ 	
ClaimsPrincipal
¯¯ 
user
¯¯  
=
¯¯! "
await
¯¯# (
_tokenService
¯¯) 6
.
¯¯6 7#
GetPrincipalFromToken
¯¯7 L
(
¯¯L M
token
¯¯M R
)
¯¯R S
;
¯¯S T
var
˙˙ 
userId
˙˙ 
=
˙˙ 
user
˙˙ 
.
˙˙ 
Claims
˙˙ $
.
˙˙$ %
FirstOrDefault
˙˙% 3
(
˙˙3 4
x
˙˙4 5
=>
˙˙6 8
x
˙˙9 :
.
˙˙: ;
Type
˙˙; ?
==
˙˙@ B

ClaimTypes
˙˙C M
.
˙˙M N
NameIdentifier
˙˙N \
)
˙˙\ ]
?
˙˙] ^
.
˙˙^ _
Value
˙˙_ d
;
˙˙d e
if
˚˚ 
(
˚˚ 
userId
˚˚ 
is
˚˚ 
null
˚˚ 
)
˚˚ 
{
¸¸ 
return
˝˝ 
new
˝˝ 
ResponseDTO
˝˝ &
(
˝˝& '
)
˝˝' (
{
˛˛ 
Message
ˇˇ 
=
ˇˇ 
$str
ˇˇ 2
,
ˇˇ2 3
	IsSuccess
ÄÄ 
=
ÄÄ 
false
ÄÄ  %
,
ÄÄ% &

StatusCode
ÅÅ 
=
ÅÅ  
$num
ÅÅ! $
,
ÅÅ$ %
Result
ÇÇ 
=
ÇÇ 
null
ÇÇ !
}
ÉÉ 
;
ÉÉ 
}
ÑÑ 
var
ÜÜ 
applicationUser
ÜÜ 
=
ÜÜ  !
await
ÜÜ" '
_userManager
ÜÜ( 4
.
ÜÜ4 5
FindByIdAsync
ÜÜ5 B
(
ÜÜB C
userId
ÜÜC I
)
ÜÜI J
;
ÜÜJ K
if
áá 
(
áá 
applicationUser
áá 
is
áá  "
null
áá# '
)
áá' (
{
àà 
return
ââ 
new
ââ 
ResponseDTO
ââ &
(
ââ& '
)
ââ' (
{
ää 
Message
ãã 
=
ãã 
$str
ãã 3
,
ãã3 4
	IsSuccess
åå 
=
åå 
false
åå  %
,
åå% &

StatusCode
çç 
=
çç  
$num
çç! $
,
çç$ %
Result
éé 
=
éé 
null
éé !
}
èè 
;
èè 
}
êê 
var
ìì 
tokenOnRedis
ìì 
=
ìì 
await
ìì $
_tokenService
ìì% 2
.
ìì2 3"
RetrieveRefreshToken
ìì3 G
(
ììG H
applicationUser
ììH W
.
ììW X
Id
ììX Z
)
ììZ [
;
ìì[ \
if
îî 
(
îî 
tokenOnRedis
îî 
!=
îî 
token
îî  %
)
îî% &
{
ïï 
return
ññ 
new
ññ 
ResponseDTO
ññ &
(
ññ& '
)
ññ' (
{
óó 
Message
òò 
=
òò 
$str
òò 2
,
òò2 3
	IsSuccess
ôô 
=
ôô 
false
ôô  %
,
ôô% &

StatusCode
öö 
=
öö  
$num
öö! $
,
öö$ %
Result
õõ 
=
õõ 
null
õõ !
}
úú 
;
úú 
}
ùù 
var
üü 
accessToken
üü 
=
üü 
await
üü #
_tokenService
üü$ 1
.
üü1 2)
GenerateJwtAccessTokenAsync
üü2 M
(
üüM N
applicationUser
üüN ]
)
üü] ^
;
üü^ _
var
†† 
refreshToken
†† 
=
†† 
await
†† $
_tokenService
††% 2
.
††2 3*
GenerateJwtRefreshTokenAsync
††3 O
(
††O P
applicationUser
††P _
)
††_ `
;
††` a
await
¢¢ 
_tokenService
¢¢ 
.
¢¢   
DeleteRefreshToken
¢¢  2
(
¢¢2 3
applicationUser
¢¢3 B
.
¢¢B C
Id
¢¢C E
)
¢¢E F
;
¢¢F G
await
££ 
_tokenService
££ 
.
££  
StoreRefreshToken
££  1
(
££1 2
applicationUser
££2 A
.
££A B
Id
££B D
,
££D E
refreshToken
££F R
)
££R S
;
££S T
return
•• 
new
•• 
ResponseDTO
•• "
(
••" #
)
••# $
{
¶¶ 
Result
ßß 
=
ßß 
new
ßß 
JwtTokenDTO
ßß (
(
ßß( )
)
ßß) *
{
®® 
AccessToken
©© 
=
©©  !
accessToken
©©" -
,
©©- .
RefreshToken
™™  
=
™™! "
refreshToken
™™# /
}
´´ 
,
´´ 
	IsSuccess
¨¨ 
=
¨¨ 
true
¨¨  
,
¨¨  !

StatusCode
≠≠ 
=
≠≠ 
$num
≠≠  
,
≠≠  !
Message
ÆÆ 
=
ÆÆ 
$str
ÆÆ 7
}
ØØ 
;
ØØ 
}
∞∞ 	
catch
±± 
(
±± 
	Exception
±± 
e
±± 
)
±± 
{
≤≤ 	
return
≥≥ 
new
≥≥ 
ResponseDTO
≥≥ "
(
≥≥" #
)
≥≥# $
{
¥¥ 
Message
µµ 
=
µµ 
e
µµ 
.
µµ 
Message
µµ #
,
µµ# $
	IsSuccess
∂∂ 
=
∂∂ 
false
∂∂ !
,
∂∂! "

StatusCode
∑∑ 
=
∑∑ 
$num
∑∑  
,
∑∑  !
Result
∏∏ 
=
∏∏ 
null
∏∏ 
}
ππ 
;
ππ 
}
∫∫ 	
}
ªª 
private
øø 
string
øø 
ip
øø 
;
øø 
private
¿¿ 
string
¿¿ 
city
¿¿ 
;
¿¿ 
private
¡¡ 
string
¡¡ 
region
¡¡ 
;
¡¡ 
private
¬¬ 
string
¬¬ 
country
¬¬ 
;
¬¬ 
private
√√ 
const
√√ 
int
√√ 
MaxAttemptsPerDay
√√ '
=
√√( )
$num
√√* +
;
√√+ ,
public
≈≈ 

async
≈≈ 
Task
≈≈ 
<
≈≈ 
ResponseDTO
≈≈ !
>
≈≈! "
ForgotPassword
≈≈# 1
(
≈≈1 2
ForgotPasswordDTO
≈≈2 C
forgotPasswordDto
≈≈D U
)
≈≈U V
{
∆∆ 
try
«« 
{
»» 	
var
   
user
   
=
   
await
   
_userManager
   )
.
  ) *
FindByEmailAsync
  * :
(
  : ;
forgotPasswordDto
  ; L
.
  L M
EmailOrPhone
  M Y
)
  Y Z
;
  Z [
if
ÀÀ 
(
ÀÀ 
user
ÀÀ 
==
ÀÀ 
null
ÀÀ 
)
ÀÀ 
{
ÃÃ 
user
ÕÕ 
=
ÕÕ 
await
ÕÕ 
_userManager
ÕÕ )
.
ÕÕ) *
Users
ÕÕ* /
.
ÕÕ/ 0!
FirstOrDefaultAsync
ÕÕ0 C
(
ÕÕC D
u
ŒŒ 
=>
ŒŒ 
u
ŒŒ 
.
ŒŒ 
PhoneNumber
ŒŒ &
==
ŒŒ' )
forgotPasswordDto
ŒŒ* ;
.
ŒŒ; <
EmailOrPhone
ŒŒ< H
)
ŒŒH I
;
ŒŒI J
}
œœ 
if
—— 
(
—— 
user
—— 
==
—— 
null
—— 
||
—— 
!
——  !
user
——! %
.
——% &
EmailConfirmed
——& 4
)
——4 5
{
““ 
return
”” 
new
”” 
ResponseDTO
”” &
{
‘‘ 
	IsSuccess
’’ 
=
’’ 
false
’’  %
,
’’% &
Message
÷÷ 
=
÷÷ 
$str
÷÷ G
,
÷÷G H

StatusCode
◊◊ 
=
◊◊  
$num
◊◊! $
}
ÿÿ 
;
ÿÿ 
}
ŸŸ 
var
‹‹ 
email
‹‹ 
=
‹‹ 
user
‹‹ 
.
‹‹ 
Email
‹‹ "
;
‹‹" #
var
›› 
now
›› 
=
›› 
DateTime
›› 
.
›› 
Now
›› "
;
››" #
if
ﬂﬂ 
(
ﬂﬂ #
ResetPasswordAttempts
ﬂﬂ %
.
ﬂﬂ% &
TryGetValue
ﬂﬂ& 1
(
ﬂﬂ1 2
email
ﬂﬂ2 7
,
ﬂﬂ7 8
out
ﬂﬂ9 <
var
ﬂﬂ= @
attempts
ﬂﬂA I
)
ﬂﬂI J
)
ﬂﬂJ K
{
‡‡ 
if
‚‚ 
(
‚‚ 
now
‚‚ 
-
‚‚ 
attempts
‚‚ "
.
‚‚" #
LastRequest
‚‚# .
>=
‚‚/ 1
TimeSpan
‚‚2 :
.
‚‚: ;
FromSeconds
‚‚; F
(
‚‚F G
$num
‚‚G H
)
‚‚H I
)
‚‚I J
{
„„ #
ResetPasswordAttempts
ÂÂ )
[
ÂÂ) *
email
ÂÂ* /
]
ÂÂ/ 0
=
ÂÂ1 2
(
ÂÂ3 4
$num
ÂÂ4 5
,
ÂÂ5 6
now
ÂÂ7 :
)
ÂÂ: ;
;
ÂÂ; <
}
ÊÊ 
else
ÁÁ 
if
ÁÁ 
(
ÁÁ 
attempts
ÁÁ !
.
ÁÁ! "
Count
ÁÁ" '
>=
ÁÁ( *
MaxAttemptsPerDay
ÁÁ+ <
)
ÁÁ< =
{
ËË 
await
ÍÍ 
_emailService
ÍÍ '
.
ÍÍ' (
SendEmailAsync
ÍÍ( 6
(
ÍÍ6 7
user
ÍÍ7 ;
.
ÍÍ; <
Email
ÍÍ< A
,
ÍÍA B
$str
ÎÎ ?
,
ÎÎ? @
$"
ÏÏ 
$str
ÏÏ y
"
ÏÏy z
)
ÌÌ 
;
ÌÌ 
return
 
new
 
ResponseDTO
 *
{
ÒÒ 
	IsSuccess
ÚÚ !
=
ÚÚ" #
false
ÚÚ$ )
,
ÚÚ) *
Message
ÛÛ 
=
ÛÛ  !
$str
ÙÙ }
,
ÙÙ} ~

StatusCode
ıı "
=
ıı# $
$num
ıı% (
}
ˆˆ 
;
ˆˆ 
}
˜˜ 
else
¯¯ 
{
˘˘ #
ResetPasswordAttempts
˚˚ )
[
˚˚) *
email
˚˚* /
]
˚˚/ 0
=
˚˚1 2
(
˚˚3 4
attempts
˚˚4 <
.
˚˚< =
Count
˚˚= B
+
˚˚C D
$num
˚˚E F
,
˚˚F G
now
˚˚H K
)
˚˚K L
;
˚˚L M
}
¸¸ 
}
˝˝ 
else
˛˛ 
{
ˇˇ #
ResetPasswordAttempts
ÅÅ %
.
ÅÅ% &
AddOrUpdate
ÅÅ& 1
(
ÅÅ1 2
email
ÅÅ2 7
,
ÅÅ7 8
(
ÅÅ9 :
$num
ÅÅ: ;
,
ÅÅ; <
now
ÅÅ= @
)
ÅÅ@ A
,
ÅÅA B
(
ÅÅC D
key
ÅÅD G
,
ÅÅG H
old
ÅÅI L
)
ÅÅL M
=>
ÅÅN P
(
ÅÅQ R
old
ÅÅR U
.
ÅÅU V
Count
ÅÅV [
+
ÅÅ\ ]
$num
ÅÅ^ _
,
ÅÅ_ `
now
ÅÅa d
)
ÅÅd e
)
ÅÅe f
;
ÅÅf g
}
ÇÇ 
var
ÖÖ 
token
ÖÖ 
=
ÖÖ 
await
ÖÖ 
_userManager
ÖÖ *
.
ÖÖ* +-
GeneratePasswordResetTokenAsync
ÖÖ+ J
(
ÖÖJ K
user
ÖÖK O
)
ÖÖO P
;
ÖÖP Q
var
ââ 
	resetLink
ââ 
=
ââ 
$"
ââ 
$str
ââ A
{
ââA B
token
ââB G
}
ââG H
$str
ââH O
{
ââO P
user
ââP T
.
ââT U
Email
ââU Z
}
ââZ [
"
ââ[ \
;
ââ\ ]
var
åå 
currentDate
åå 
=
åå 
DateTime
åå &
.
åå& '
Now
åå' *
.
åå* +
ToString
åå+ 3
(
åå3 4
$str
åå4 B
)
ååB C
;
ååC D
var
éé 
	userAgent
éé 
=
éé "
_httpContextAccessor
éé 0
.
éé0 1
HttpContext
éé1 <
?
éé< =
.
éé= >
Request
éé> E
.
ééE F
Headers
ééF M
[
ééM N
$str
ééN Z
]
ééZ [
;
éé[ \
var
ëë 
operatingSystem
ëë 
=
ëë  !)
GetUserAgentOperatingSystem
ëë" =
(
ëë= >
	userAgent
ëë> G
)
ëëG H
;
ëëH I
var
îî 
browser
îî 
=
îî !
GetUserAgentBrowser
îî -
(
îî- .
	userAgent
îî. 7
)
îî7 8
;
îî8 9
var
óó 
url
óó 
=
óó 
$str
óó Q
;
óóQ R
using
òò 
(
òò 

HttpClient
òò 
client
òò $
=
òò% &
new
òò' *

HttpClient
òò+ 5
(
òò5 6
)
òò6 7
)
òò7 8
{
ôô !
HttpResponseMessage
öö #
response
öö$ ,
=
öö- .
await
öö/ 4
client
öö5 ;
.
öö; <
GetAsync
öö< D
(
ööD E
url
ööE H
)
ööH I
;
ööI J
if
õõ 
(
õõ 
response
õõ 
.
õõ !
IsSuccessStatusCode
õõ 0
)
õõ0 1
{
úú 
string
ùù 
jsonContent
ùù &
=
ùù' (
await
ùù) .
response
ùù/ 7
.
ùù7 8
Content
ùù8 ?
.
ùù? @
ReadAsStringAsync
ùù@ Q
(
ùùQ R
)
ùùR S
;
ùùS T
JObject
ûû 
data
ûû  
=
ûû! "
JObject
ûû# *
.
ûû* +
Parse
ûû+ 0
(
ûû0 1
jsonContent
ûû1 <
)
ûû< =
;
ûû= >
this
†† 
.
†† 
ip
†† 
=
†† 
data
†† "
[
††" #
$str
††# '
]
††' (
.
††( )
ToString
††) 1
(
††1 2
)
††2 3
;
††3 4
this
°° 
.
°° 
city
°° 
=
°° 
data
°°  $
[
°°$ %
$str
°°% +
]
°°+ ,
.
°°, -
ToString
°°- 5
(
°°5 6
)
°°6 7
;
°°7 8
this
¢¢ 
.
¢¢ 
region
¢¢ 
=
¢¢  !
data
¢¢" &
[
¢¢& '
$str
¢¢' /
]
¢¢/ 0
.
¢¢0 1
ToString
¢¢1 9
(
¢¢9 :
)
¢¢: ;
;
¢¢; <
this
££ 
.
££ 
country
££  
=
££! "
data
££# '
[
££' (
$str
££( 1
]
££1 2
.
££2 3
ToString
££3 ;
(
££; <
)
££< =
;
££= >
}
§§ 
else
•• 
{
¶¶ 
return
ßß 
new
ßß 
ResponseDTO
ßß *
{
®® 
	IsSuccess
©© !
=
©©" #
false
©©$ )
,
©©) *
Message
™™ 
=
™™  !
$str
™™" C
,
™™C D

StatusCode
´´ "
=
´´# $
$num
´´% (
}
¨¨ 
;
¨¨ 
}
≠≠ 
}
ÆÆ 
await
±± 
_emailService
±± 
.
±±  !
SendEmailResetAsync
±±  3
(
±±3 4
user
±±4 8
.
±±8 9
Email
±±9 >
,
±±> ?
$str
±±@ h
,
±±h i
user
±±j n
,
±±n o
currentDate
≤≤ 
,
≤≤ 
	resetLink
≤≤ &
,
≤≤& '
operatingSystem
≤≤( 7
,
≤≤7 8
browser
≤≤9 @
,
≤≤@ A
ip
≤≤B D
,
≤≤D E
region
≤≤F L
,
≤≤L M
city
≤≤N R
,
≤≤R S
country
≤≤T [
)
≤≤[ \
;
≤≤\ ]
string
µµ )
GetUserAgentOperatingSystem
µµ .
(
µµ. /
string
µµ/ 5
	userAgent
µµ6 ?
)
µµ? @
{
∂∂ 
if
ππ 
(
ππ 
	userAgent
ππ 
.
ππ 
Contains
ππ &
(
ππ& '
$str
ππ' 0
)
ππ0 1
)
ππ1 2
return
ππ3 9
$str
ππ: C
;
ππC D
else
∫∫ 
if
∫∫ 
(
∫∫ 
	userAgent
∫∫ "
.
∫∫" #
Contains
∫∫# +
(
∫∫+ ,
$str
∫∫, 1
)
∫∫1 2
)
∫∫2 3
return
∫∫4 :
$str
∫∫; B
;
∫∫B C
else
ªª 
if
ªª 
(
ªª 
	userAgent
ªª "
.
ªª" #
Contains
ªª# +
(
ªª+ ,
$str
ªª, 3
)
ªª3 4
)
ªª4 5
return
ªª6 <
$str
ªª= D
;
ªªD E
else
ºº 
return
ºº 
$str
ºº %
;
ºº% &
}
ΩΩ 
string
øø !
GetUserAgentBrowser
øø &
(
øø& '
string
øø' -
	userAgent
øø. 7
)
øø7 8
{
¿¿ 
if
√√ 
(
√√ 
	userAgent
√√ 
.
√√ 
Contains
√√ &
(
√√& '
$str
√√' /
)
√√/ 0
)
√√0 1
return
√√2 8
$str
√√9 A
;
√√A B
else
ƒƒ 
if
ƒƒ 
(
ƒƒ 
	userAgent
ƒƒ "
.
ƒƒ" #
Contains
ƒƒ# +
(
ƒƒ+ ,
$str
ƒƒ, 5
)
ƒƒ5 6
)
ƒƒ6 7
return
ƒƒ8 >
$str
ƒƒ? H
;
ƒƒH I
else
≈≈ 
if
≈≈ 
(
≈≈ 
	userAgent
≈≈ "
.
≈≈" #
Contains
≈≈# +
(
≈≈+ ,
$str
≈≈, 4
)
≈≈4 5
)
≈≈5 6
return
≈≈7 =
$str
≈≈> F
;
≈≈F G
else
∆∆ 
return
∆∆ 
$str
∆∆ %
;
∆∆% &
}
«« 
return
…… 
new
…… 
ResponseDTO
…… "
{
   
	IsSuccess
ÀÀ 
=
ÀÀ 
true
ÀÀ  
,
ÀÀ  !
Message
ÃÃ 
=
ÃÃ 
$str
ÃÃ P
,
ÃÃP Q

StatusCode
ÕÕ 
=
ÕÕ 
$num
ÕÕ  
}
ŒŒ 
;
ŒŒ 
}
œœ 	
catch
–– 
(
–– 
	Exception
–– 
e
–– 
)
–– 
{
—— 	
return
““ 
new
““ 
ResponseDTO
““ "
{
”” 
	IsSuccess
‘‘ 
=
‘‘ 
false
‘‘ !
,
‘‘! "
Message
’’ 
=
’’ 
e
’’ 
.
’’ 
Message
’’ #
,
’’# $

StatusCode
÷÷ 
=
÷÷ 
$num
÷÷  
}
◊◊ 
;
◊◊ 
}
ÿÿ 	
}
ŸŸ 
public
‹‹ 

async
‹‹ 
Task
‹‹ 
<
‹‹ 
ResponseDTO
‹‹ !
>
‹‹! "
ResetPassword
‹‹# 0
(
‹‹0 1
string
‹‹1 7
email
‹‹8 =
,
‹‹= >
string
‹‹? E
token
‹‹F K
,
‹‹K L
string
‹‹M S
password
‹‹T \
)
‹‹\ ]
{
›› 
try
ﬁﬁ 
{
ﬂﬂ 	
var
·· 
user
·· 
=
·· 
await
·· 
_userManager
·· )
.
··) *
FindByEmailAsync
··* :
(
··: ;
email
··; @
)
··@ A
;
··A B
if
‚‚ 
(
‚‚ 
user
‚‚ 
==
‚‚ 
null
‚‚ 
)
‚‚ 
{
„„ 
return
‰‰ 
new
‰‰ 
ResponseDTO
‰‰ &
{
ÂÂ 
	IsSuccess
ÊÊ 
=
ÊÊ 
false
ÊÊ  %
,
ÊÊ% &
Message
ÁÁ 
=
ÁÁ 
$str
ÁÁ /
,
ÁÁ/ 0

StatusCode
ËË 
=
ËË  
$num
ËË! $
}
ÈÈ 
;
ÈÈ 
}
ÍÍ 
if
ÌÌ 
(
ÌÌ 
await
ÌÌ 
_userManager
ÌÌ "
.
ÌÌ" # 
CheckPasswordAsync
ÌÌ# 5
(
ÌÌ5 6
user
ÌÌ6 :
,
ÌÌ: ;
password
ÌÌ< D
)
ÌÌD E
)
ÌÌE F
{
ÓÓ 
return
ÔÔ 
new
ÔÔ 
ResponseDTO
ÔÔ &
{
 
	IsSuccess
ÒÒ 
=
ÒÒ 
false
ÒÒ  %
,
ÒÒ% &
Message
ÚÚ 
=
ÚÚ 
$str
ÚÚ T
,
ÚÚT U

StatusCode
ÛÛ 
=
ÛÛ  
$num
ÛÛ! $
}
ÙÙ 
;
ÙÙ 
}
ıı 
var
¯¯ 
result
¯¯ 
=
¯¯ 
await
¯¯ 
_userManager
¯¯ +
.
¯¯+ , 
ResetPasswordAsync
¯¯, >
(
¯¯> ?
user
¯¯? C
,
¯¯C D
token
¯¯E J
,
¯¯J K
password
¯¯L T
)
¯¯T U
;
¯¯U V
if
˘˘ 
(
˘˘ 
result
˘˘ 
.
˘˘ 
	Succeeded
˘˘  
)
˘˘  !
{
˙˙ 
return
˚˚ 
new
˚˚ 
ResponseDTO
˚˚ &
{
¸¸ 
	IsSuccess
˝˝ 
=
˝˝ 
true
˝˝  $
,
˝˝$ %
Message
˛˛ 
=
˛˛ 
$str
˛˛ <
,
˛˛< =

StatusCode
ˇˇ 
=
ˇˇ  
$num
ˇˇ! $
}
ÄÄ 
;
ÄÄ 
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
StringBuilder
ÖÖ 
errors
ÖÖ $
=
ÖÖ% &
new
ÖÖ' *
StringBuilder
ÖÖ+ 8
(
ÖÖ8 9
)
ÖÖ9 :
;
ÖÖ: ;
foreach
ÜÜ 
(
ÜÜ 
var
ÜÜ 
error
ÜÜ "
in
ÜÜ# %
result
ÜÜ& ,
.
ÜÜ, -
Errors
ÜÜ- 3
)
ÜÜ3 4
{
áá 
errors
àà 
.
àà 

AppendLine
àà %
(
àà% &
error
àà& +
.
àà+ ,
Description
àà, 7
)
àà7 8
;
àà8 9
}
ââ 
return
ãã 
new
ãã 
ResponseDTO
ãã &
{
åå 
	IsSuccess
çç 
=
çç 
false
çç  %
,
çç% &
Message
éé 
=
éé 
errors
éé $
.
éé$ %
ToString
éé% -
(
éé- .
)
éé. /
,
éé/ 0

StatusCode
èè 
=
èè  
$num
èè! $
}
êê 
;
êê 
}
ëë 
}
íí 	
catch
ìì 
(
ìì 
	Exception
ìì 
e
ìì 
)
ìì 
{
îî 	
return
ïï 
new
ïï 
ResponseDTO
ïï "
{
ññ 
	IsSuccess
óó 
=
óó 
false
óó !
,
óó! "
Message
òò 
=
òò 
e
òò 
.
òò 
Message
òò #
,
òò# $

StatusCode
ôô 
=
ôô 
$num
ôô  
}
öö 
;
öö 
}
õõ 	
}
úú 
public
üü 

async
üü 
Task
üü 
<
üü 
ResponseDTO
üü !
>
üü! "
ChangePassword
üü# 1
(
üü1 2
string
üü2 8
userId
üü9 ?
,
üü? @
string
üüA G
oldPassword
üüH S
,
üüS T
string
üüU [
newPassword
üü\ g
,
üüg h
string
††  
confirmNewPassword
†† !
)
††! "
{
°° 
try
¢¢ 
{
££ 	
var
•• 
user
•• 
=
•• 
await
•• 
_userManager
•• )
.
••) *
FindByIdAsync
••* 7
(
••7 8
userId
••8 >
)
••> ?
;
••? @
if
¶¶ 
(
¶¶ 
user
¶¶ 
==
¶¶ 
null
¶¶ 
)
¶¶ 
{
ßß 
return
®® 
new
®® 
ResponseDTO
®® &
{
®®' (
	IsSuccess
®®) 2
=
®®3 4
false
®®5 :
,
®®: ;
Message
®®< C
=
®®D E
$str
®®F W
}
®®X Y
;
®®Y Z
}
©© 
if
ÆÆ 
(
ÆÆ 
newPassword
ÆÆ 
!=
ÆÆ  
confirmNewPassword
ÆÆ 1
)
ÆÆ1 2
{
ØØ 
return
∞∞ 
new
∞∞ 
ResponseDTO
∞∞ &
{
±± 
	IsSuccess
±± 
=
±±  !
false
±±" '
,
±±' (
Message
±±) 0
=
±±1 2
$str
±±3 e
}
±±f g
;
±±g h
}
≤≤ 
if
µµ 
(
µµ 
newPassword
µµ 
==
µµ 
oldPassword
µµ *
)
µµ* +
{
∂∂ 
return
∑∑ 
new
∑∑ 
ResponseDTO
∑∑ &
{
∏∏ 
	IsSuccess
∏∏ 
=
∏∏  !
false
∏∏" '
,
∏∏' (
Message
∏∏) 0
=
∏∏1 2
$str
∏∏3 i
}
∏∏j k
;
∏∏k l
}
ππ 
var
ºº 
result
ºº 
=
ºº 
await
ºº 
_userManager
ºº +
.
ºº+ ,!
ChangePasswordAsync
ºº, ?
(
ºº? @
user
ºº@ D
,
ººD E
oldPassword
ººF Q
,
ººQ R
newPassword
ººS ^
)
ºº^ _
;
ºº_ `
if
ΩΩ 
(
ΩΩ 
result
ΩΩ 
.
ΩΩ 
	Succeeded
ΩΩ  
)
ΩΩ  !
{
ææ 
return
øø 
new
øø 
ResponseDTO
øø &
{
øø' (
	IsSuccess
øø) 2
=
øø3 4
true
øø5 9
,
øø9 :
Message
øø; B
=
øøC D
$str
øøE e
}
øøf g
;
øøg h
}
¿¿ 
else
¡¡ 
{
¬¬ 
return
√√ 
new
√√ 
ResponseDTO
√√ &
{
ƒƒ 
	IsSuccess
≈≈ 
=
≈≈ 
false
≈≈  %
,
≈≈% &
Message
∆∆ 
=
∆∆ 
$str
∆∆ b
}
«« 
;
«« 
}
»» 
}
…… 	
catch
   
(
   
	Exception
   
e
   
)
   
{
ÀÀ 	
return
ÃÃ 
new
ÃÃ 
ResponseDTO
ÃÃ "
{
ÃÃ# $
	IsSuccess
ÃÃ% .
=
ÃÃ/ 0
false
ÃÃ1 6
,
ÃÃ6 7
Message
ÃÃ8 ?
=
ÃÃ@ A
e
ÃÃB C
.
ÃÃC D
Message
ÃÃD K
}
ÃÃL M
;
ÃÃM N
}
ÕÕ 	
}
ŒŒ 
public
’’ 

async
’’ 
Task
’’ 
<
’’ 
ResponseDTO
’’ !
>
’’! "
SendVerifyEmail
’’# 2
(
’’2 3
string
’’3 9
email
’’: ?
,
’’? @
string
’’A G
confirmationLink
’’H X
)
’’X Y
{
÷÷ 
try
◊◊ 
{
ÿÿ 	
await
ŸŸ 
_emailService
ŸŸ 
.
ŸŸ  
SendVerifyEmail
ŸŸ  /
(
ŸŸ/ 0
email
ŸŸ0 5
,
ŸŸ5 6
confirmationLink
ŸŸ7 G
)
ŸŸG H
;
ŸŸH I
return
⁄⁄ 
new
⁄⁄ 
(
⁄⁄ 
)
⁄⁄ 
{
€€ 
Message
‹‹ 
=
‹‹ 
$str
‹‹ :
,
‹‹: ;
	IsSuccess
›› 
=
›› 
true
››  
,
››  !

StatusCode
ﬁﬁ 
=
ﬁﬁ 
$num
ﬁﬁ  
,
ﬁﬁ  !
Result
ﬂﬂ 
=
ﬂﬂ 
null
ﬂﬂ 
}
‡‡ 
;
‡‡ 
}
·· 	
catch
‚‚ 
(
‚‚ 
	Exception
‚‚ 
e
‚‚ 
)
‚‚ 
{
„„ 	
return
‰‰ 
new
‰‰ 
(
‰‰ 
)
‰‰ 
{
ÂÂ 
Message
ÊÊ 
=
ÊÊ 
e
ÊÊ 
.
ÊÊ 
Message
ÊÊ #
,
ÊÊ# $
	IsSuccess
ÁÁ 
=
ÁÁ 
false
ÁÁ !
,
ÁÁ! "

StatusCode
ËË 
=
ËË 
$num
ËË  
,
ËË  !
Result
ÈÈ 
=
ÈÈ 
null
ÈÈ 
}
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
}
ÏÏ 
public
ÙÙ 

async
ÙÙ 
Task
ÙÙ 
<
ÙÙ 
ResponseDTO
ÙÙ !
>
ÙÙ! "
VerifyEmail
ÙÙ# .
(
ÙÙ. /
string
ÙÙ/ 5
userId
ÙÙ6 <
,
ÙÙ< =
string
ÙÙ> D
token
ÙÙE J
)
ÙÙJ K
{
ıı 
var
ˆˆ 
user
ˆˆ 
=
ˆˆ 
await
ˆˆ 
_userManager
ˆˆ %
.
ˆˆ% &
FindByIdAsync
ˆˆ& 3
(
ˆˆ3 4
userId
ˆˆ4 :
)
ˆˆ: ;
;
ˆˆ; <
if
¯¯ 

(
¯¯ 
user
¯¯ 
.
¯¯ 
EmailConfirmed
¯¯ 
)
¯¯  
{
˘˘ 	
return
˙˙ 
new
˙˙ 
ResponseDTO
˙˙ "
(
˙˙" #
)
˙˙# $
{
˚˚ 
Message
¸¸ 
=
¸¸ 
$str
¸¸ :
,
¸¸: ;
	IsSuccess
˝˝ 
=
˝˝ 
true
˝˝  
,
˝˝  !

StatusCode
˛˛ 
=
˛˛ 
$num
˛˛  
,
˛˛  !
Result
ˇˇ 
=
ˇˇ 
null
ˇˇ 
}
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
var
ÉÉ 
confirmResult
ÉÉ 
=
ÉÉ 
await
ÉÉ !
_userManager
ÉÉ" .
.
ÉÉ. /
ConfirmEmailAsync
ÉÉ/ @
(
ÉÉ@ A
user
ÉÉA E
,
ÉÉE F
token
ÉÉG L
)
ÉÉL M
;
ÉÉM N
if
ÖÖ 

(
ÖÖ 
!
ÖÖ 
confirmResult
ÖÖ 
.
ÖÖ 
	Succeeded
ÖÖ $
)
ÖÖ$ %
{
ÜÜ 	
return
áá 
new
áá 
(
áá 
)
áá 
{
àà 
Message
ââ 
=
ââ 
confirmResult
ââ '
.
ââ' (
Errors
ââ( .
.
ââ. /
ToString
ââ/ 7
(
ââ7 8
)
ââ8 9
,
ââ9 :

StatusCode
ää 
=
ää 
$num
ää  
,
ää  !
	IsSuccess
ãã 
=
ãã 
false
ãã !
,
ãã! "
Result
åå 
=
åå 
null
åå 
}
çç 
;
çç 
}
éé 	
return
êê 
new
êê 
(
êê 
)
êê 
{
ëë 	
Message
íí 
=
íí 
$str
íí 2
,
íí2 3
	IsSuccess
ìì 
=
ìì 
true
ìì 
,
ìì 

StatusCode
îî 
=
îî 
$num
îî 
,
îî 
Result
ïï 
=
ïï 
null
ïï 
}
ññ 	
;
ññ	 

}
óó 
public
ûû 

async
ûû 
Task
ûû 
<
ûû 
ResponseDTO
ûû !
>
ûû! "
CheckEmailExist
ûû# 2
(
ûû2 3
string
ûû3 9
email
ûû: ?
)
ûû? @
{
üü 
try
†† 
{
°° 	
var
¢¢ 
user
¢¢ 
=
¢¢ 
await
¢¢ 
_userManager
¢¢ )
.
¢¢) *
FindByEmailAsync
¢¢* :
(
¢¢: ;
email
¢¢; @
)
¢¢@ A
;
¢¢A B
return
££ 
new
££ 
(
££ 
)
££ 
{
§§ 
Result
•• 
=
•• 
user
•• 
is
••  
not
••! $
null
••% )
,
••) *
Message
¶¶ 
=
¶¶ 
user
¶¶ 
is
¶¶ !
null
¶¶" &
?
¶¶' (
$str
¶¶) ?
:
¶¶@ A
$str
¶¶B T
,
¶¶T U
	IsSuccess
ßß 
=
ßß 
true
ßß  
,
ßß  !

StatusCode
®® 
=
®® 
$num
®®  
}
©© 
;
©© 
}
™™ 	
catch
´´ 
(
´´ 
	Exception
´´ 
e
´´ 
)
´´ 
{
¨¨ 	
return
≠≠ 
new
≠≠ 
(
≠≠ 
)
≠≠ 
{
ÆÆ 
Message
ØØ 
=
ØØ 
e
ØØ 
.
ØØ 
Message
ØØ #
,
ØØ# $
	IsSuccess
∞∞ 
=
∞∞ 
false
∞∞ !
,
∞∞! "

StatusCode
±± 
=
±± 
$num
±±  
,
±±  !
Result
≤≤ 
=
≤≤ 
null
≤≤ 
}
≥≥ 
;
≥≥ 
}
¥¥ 	
}
µµ 
public
ºº 

async
ºº 
Task
ºº 
<
ºº 
ResponseDTO
ºº !
>
ºº! "#
CheckPhoneNumberExist
ºº# 8
(
ºº8 9
string
ºº9 ?
phoneNumber
ºº@ K
)
ººK L
{
ΩΩ 
try
ææ 
{
øø 	
var
¿¿ 
user
¿¿ 
=
¿¿ 
await
¿¿ 
_userManager
¿¿ )
.
¿¿) *
Users
¿¿* /
.
¿¿/ 0!
FirstOrDefaultAsync
¿¿0 C
(
¿¿C D
x
¿¿D E
=>
¿¿F H
x
¿¿I J
.
¿¿J K
PhoneNumber
¿¿K V
==
¿¿W Y
phoneNumber
¿¿Z e
)
¿¿e f
;
¿¿f g
return
¡¡ 
new
¡¡ 
(
¡¡ 
)
¡¡ 
{
¬¬ 
Result
√√ 
=
√√ 
user
√√ 
is
√√  
not
√√! $
null
√√% )
,
√√) *
Message
ƒƒ 
=
ƒƒ 
user
ƒƒ 
is
ƒƒ !
null
ƒƒ" &
?
ƒƒ' (
$str
ƒƒ) G
:
ƒƒH I
$str
ƒƒJ d
,
ƒƒd e
	IsSuccess
≈≈ 
=
≈≈ 
true
≈≈  
,
≈≈  !

StatusCode
∆∆ 
=
∆∆ 
$num
∆∆  
}
«« 
;
«« 
}
»» 	
catch
…… 
(
…… 
	Exception
…… 
e
…… 
)
…… 
{
   	
return
ÀÀ 
new
ÀÀ 
(
ÀÀ 
)
ÀÀ 
{
ÃÃ 
Message
ÕÕ 
=
ÕÕ 
e
ÕÕ 
.
ÕÕ 
Message
ÕÕ #
,
ÕÕ# $
Result
ŒŒ 
=
ŒŒ 
null
ŒŒ 
,
ŒŒ 
	IsSuccess
œœ 
=
œœ 
false
œœ !
,
œœ! "

StatusCode
–– 
=
–– 
$num
––  
}
—— 
;
—— 
}
““ 	
}
”” 
public
‹‹ 

async
‹‹ 
Task
‹‹ 
<
‹‹ 
ResponseDTO
‹‹ !
>
‹‹! "$
CompleteStudentProfile
‹‹# 9
(
‹‹9 :
ClaimsPrincipal
›› 
User
›› 
,
›› '
CompleteStudentProfileDTO
ﬁﬁ !
studentProfileDto
ﬁﬁ" 3
)
ﬁﬁ3 4
{
ﬂﬂ 
try
‡‡ 
{
·· 	
var
„„ 
userId
„„ 
=
„„ 
User
„„ 
.
„„ 
Claims
„„ $
.
„„$ %
FirstOrDefault
„„% 3
(
„„3 4
x
„„4 5
=>
„„6 8
x
„„9 :
.
„„: ;
Type
„„; ?
==
„„@ B

ClaimTypes
„„C M
.
„„M N
NameIdentifier
„„N \
)
„„\ ]
?
„„] ^
.
„„^ _
Value
„„_ d
;
„„d e
var
‰‰ 
user
‰‰ 
=
‰‰ 
await
‰‰ 
_userManager
‰‰ )
.
‰‰) *
FindByIdAsync
‰‰* 7
(
‰‰7 8
userId
‰‰8 >
)
‰‰> ?
;
‰‰? @
if
ÁÁ 
(
ÁÁ 
user
ÁÁ 
is
ÁÁ 
null
ÁÁ 
)
ÁÁ 
{
ËË 
return
ÈÈ 
new
ÈÈ 
ResponseDTO
ÈÈ &
(
ÈÈ& '
)
ÈÈ' (
{
ÍÍ 
Message
ÎÎ 
=
ÎÎ 
$str
ÎÎ 4
,
ÎÎ4 5
	IsSuccess
ÏÏ 
=
ÏÏ 
false
ÏÏ  %
,
ÏÏ% &

StatusCode
ÌÌ 
=
ÌÌ  
$num
ÌÌ! $
,
ÌÌ$ %
Result
ÓÓ 
=
ÓÓ 
studentProfileDto
ÓÓ .
,
ÓÓ. /
}
ÔÔ 
;
ÔÔ 
}
 
var
ÛÛ 
isPhonenumerExit
ÛÛ  
=
ÛÛ! "
await
ÙÙ 
_userManager
ÙÙ "
.
ÙÙ" #
Users
ÙÙ# (
.
ÙÙ( )
AnyAsync
ÙÙ) 1
(
ÙÙ1 2
u
ıı 
=>
ıı 
u
ıı 
.
ıı 
PhoneNumber
ıı &
==
ıı' )
studentProfileDto
ıı* ;
.
ıı; <
PhoneNumber
ıı< G
&&
ııH J
u
ııK L
.
ııL M
Id
ııM O
!=
ııP R
user
ııS W
.
ııW X
Id
ııX Z
)
ııZ [
;
ıı[ \
if
ˆˆ 
(
ˆˆ 
isPhonenumerExit
ˆˆ  
)
ˆˆ  !
{
˜˜ 
return
¯¯ 
new
¯¯ 
ResponseDTO
¯¯ &
(
¯¯& '
)
¯¯' (
{
˘˘ 
Message
˙˙ 
=
˙˙ 
$str
˙˙ E
,
˙˙E F
Result
˚˚ 
=
˚˚ 
studentProfileDto
˚˚ .
,
˚˚. /
	IsSuccess
¸¸ 
=
¸¸ 
false
¸¸  %
,
¸¸% &

StatusCode
˝˝ 
=
˝˝  
$num
˝˝! $
}
˛˛ 
;
˛˛ 
}
ˇˇ 
user
Å	Å	 
.
Å	Å	 
	BirthDate
Å	Å	 
=
Å	Å	 
studentProfileDto
Å	Å	 .
.
Å	Å	. /
	BirthDate
Å	Å	/ 8
;
Å	Å	8 9
user
Ç	Ç	 
.
Ç	Ç	 
PhoneNumber
Ç	Ç	 
=
Ç	Ç	 
studentProfileDto
Ç	Ç	 0
.
Ç	Ç	0 1
PhoneNumber
Ç	Ç	1 <
;
Ç	Ç	< =
user
É	É	 
.
É	É	 
Address
É	É	 
=
É	É	 
studentProfileDto
É	É	 ,
.
É	É	, -
Address
É	É	- 4
;
É	É	4 5
user
Ñ	Ñ	 
.
Ñ	Ñ	 
Country
Ñ	Ñ	 
=
Ñ	Ñ	 
studentProfileDto
Ñ	Ñ	 ,
.
Ñ	Ñ	, -
Country
Ñ	Ñ	- 4
;
Ñ	Ñ	4 5
user
Ö	Ö	 
.
Ö	Ö	 
Gender
Ö	Ö	 
=
Ö	Ö	 
studentProfileDto
Ö	Ö	 +
.
Ö	Ö	+ ,
Gender
Ö	Ö	, 2
;
Ö	Ö	2 3
var
á	á	 
student
á	á	 
=
á	á	 
await
á	á	 
_unitOfWork
á	á	  +
.
á	á	+ ,
StudentRepository
á	á	, =
.
á	á	= >
GetAsync
á	á	> F
(
á	á	F G
x
á	á	G H
=>
á	á	I K
x
á	á	L M
.
á	á	M N
UserId
á	á	N T
==
á	á	U W
userId
á	á	X ^
)
á	á	^ _
;
á	á	_ `
if
à	à	 
(
à	à	 
student
à	à	 
is
à	à	 
null
à	à	 
)
à	à	  
{
â	â	 
student
ä	ä	 
=
ä	ä	 
new
ä	ä	 
Student
ä	ä	 %
(
ä	ä	% &
)
ä	ä	& '
{
ã	ã	 
UserId
å	å	 
=
å	å	 
user
å	å	 !
.
å	å	! "
Id
å	å	" $
,
å	å	$ %

University
ç	ç	 
=
ç	ç	  
studentProfileDto
ç	ç	! 2
.
ç	ç	2 3

University
ç	ç	3 =
}
é	é	 
;
é	é	 
await
è	è	 
_unitOfWork
è	è	 !
.
è	è	! "
StudentRepository
è	è	" 3
.
è	è	3 4
AddAsync
è	è	4 <
(
è	è	< =
student
è	è	= D
)
è	è	D E
;
è	è	E F
}
ê	ê	 
else
ë	ë	 
{
í	í	 
student
ì	ì	 
.
ì	ì	 

University
ì	ì	 "
=
ì	ì	# $
studentProfileDto
ì	ì	% 6
.
ì	ì	6 7

University
ì	ì	7 A
;
ì	ì	A B
}
î	î	 
var
ñ	ñ	 
isRoleExist
ñ	ñ	 
=
ñ	ñ	 
await
ñ	ñ	 #
_roleManager
ñ	ñ	$ 0
.
ñ	ñ	0 1
RoleExistsAsync
ñ	ñ	1 @
(
ñ	ñ	@ A
StaticUserRoles
ñ	ñ	A P
.
ñ	ñ	P Q
Student
ñ	ñ	Q X
)
ñ	ñ	X Y
;
ñ	ñ	Y Z
if
ô	ô	 
(
ô	ô	 
isRoleExist
ô	ô	 
is
ô	ô	 
false
ô	ô	 $
)
ô	ô	$ %
{
ö	ö	 
await
õ	õ	 
_roleManager
õ	õ	 "
.
õ	õ	" #
CreateAsync
õ	õ	# .
(
õ	õ	. /
new
õ	õ	/ 2
IdentityRole
õ	õ	3 ?
(
õ	õ	? @
StaticUserRoles
õ	õ	@ O
.
õ	õ	O P
Student
õ	õ	P W
)
õ	õ	W X
)
õ	õ	X Y
;
õ	õ	Y Z
}
ú	ú	 
await
ü	ü	 
_userManager
ü	ü	 
.
ü	ü	 
AddToRoleAsync
ü	ü	 -
(
ü	ü	- .
user
ü	ü	. 2
,
ü	ü	2 3
StaticUserRoles
ü	ü	4 C
.
ü	ü	C D
Student
ü	ü	D K
)
ü	ü	K L
;
ü	ü	L M
await
°	°	 
_unitOfWork
°	°	 
.
°	°	 
	SaveAsync
°	°	 '
(
°	°	' (
)
°	°	( )
;
°	°	) *
return
£	£	 
new
£	£	 
ResponseDTO
£	£	 "
(
£	£	" #
)
£	£	# $
{
§	§	 
Message
•	•	 
=
•	•	 
$str
•	•	 ?
,
•	•	? @
	IsSuccess
¶	¶	 
=
¶	¶	 
true
¶	¶	  
,
¶	¶	  !

StatusCode
ß	ß	 
=
ß	ß	 
$num
ß	ß	  
,
ß	ß	  !
Result
®	®	 
=
®	®	 
studentProfileDto
®	®	 *
}
©	©	 
;
©	©	 
}
™	™	 	
catch
´	´	 
(
´	´	 
	Exception
´	´	 
e
´	´	 
)
´	´	 
{
¨	¨	 	
return
≠	≠	 
new
≠	≠	 
ResponseDTO
≠	≠	 "
(
≠	≠	" #
)
≠	≠	# $
{
Æ	Æ	 
Message
Ø	Ø	 
=
Ø	Ø	 
e
Ø	Ø	 
.
Ø	Ø	 
Message
Ø	Ø	 #
,
Ø	Ø	# $
	IsSuccess
∞	∞	 
=
∞	∞	 
false
∞	∞	 !
,
∞	∞	! "

StatusCode
±	±	 
=
±	±	 
$num
±	±	  
,
±	±	  !
Result
≤	≤	 
=
≤	≤	 
null
≤	≤	 
}
≥	≥	 
;
≥	≥	 
}
¥	¥	 	
}
µ	µ	 
public
æ	æ	 

async
æ	æ	 
Task
æ	æ	 
<
æ	æ	 
ResponseDTO
æ	æ	 !
>
æ	æ	! "'
CompleteInstructorProfile
æ	æ	# <
(
æ	æ	< =
ClaimsPrincipal
ø	ø	 
User
ø	ø	 
,
ø	ø	 *
CompleteInstructorProfileDTO
¿	¿	 $"
instructorProfileDto
¿	¿	% 9
)
¿	¿	9 :
{
¡	¡	 
try
¬	¬	 
{
√	√	 	
var
≈	≈	 
userId
≈	≈	 
=
≈	≈	 
User
≈	≈	 
.
≈	≈	 
Claims
≈	≈	 $
.
≈	≈	$ %
FirstOrDefault
≈	≈	% 3
(
≈	≈	3 4
x
≈	≈	4 5
=>
≈	≈	6 8
x
≈	≈	9 :
.
≈	≈	: ;
Type
≈	≈	; ?
==
≈	≈	@ B

ClaimTypes
≈	≈	C M
.
≈	≈	M N
NameIdentifier
≈	≈	N \
)
≈	≈	\ ]
?
≈	≈	] ^
.
≈	≈	^ _
Value
≈	≈	_ d
;
≈	≈	d e
var
∆	∆	 
user
∆	∆	 
=
∆	∆	 
await
∆	∆	 
_userManager
∆	∆	 )
.
∆	∆	) *
FindByIdAsync
∆	∆	* 7
(
∆	∆	7 8
userId
∆	∆	8 >
)
∆	∆	> ?
;
∆	∆	? @
if
…	…	 
(
…	…	 
user
…	…	 
is
…	…	 
null
…	…	 
)
…	…	 
{
 	 	 
return
À	À	 
new
À	À	 
ResponseDTO
À	À	 &
(
À	À	& '
)
À	À	' (
{
Ã	Ã	 
Message
Õ	Õ	 
=
Õ	Õ	 
$str
Õ	Õ	 4
,
Õ	Õ	4 5
	IsSuccess
Œ	Œ	 
=
Œ	Œ	 
false
Œ	Œ	  %
,
Œ	Œ	% &

StatusCode
œ	œ	 
=
œ	œ	  
$num
œ	œ	! $
,
œ	œ	$ %
Result
–	–	 
=
–	–	 "
instructorProfileDto
–	–	 1
,
–	–	1 2
}
—	—	 
;
—	—	 
}
“	“	 
var
’	’	 
isPhonenumerExit
’	’	  
=
’	’	! "
await
÷	÷	 
_userManager
÷	÷	 "
.
÷	÷	" #
Users
÷	÷	# (
.
÷	÷	( )
AnyAsync
÷	÷	) 1
(
÷	÷	1 2
u
◊	◊	 
=>
◊	◊	 
u
◊	◊	 
.
◊	◊	 
PhoneNumber
◊	◊	 &
==
◊	◊	' )"
instructorProfileDto
◊	◊	* >
.
◊	◊	> ?
PhoneNumber
◊	◊	? J
&&
◊	◊	K M
u
◊	◊	N O
.
◊	◊	O P
Id
◊	◊	P R
!=
◊	◊	S U
user
◊	◊	V Z
.
◊	◊	Z [
Id
◊	◊	[ ]
)
◊	◊	] ^
;
◊	◊	^ _
if
ÿ	ÿ	 
(
ÿ	ÿ	 
isPhonenumerExit
ÿ	ÿ	  
)
ÿ	ÿ	  !
{
Ÿ	Ÿ	 
return
⁄	⁄	 
new
⁄	⁄	 
ResponseDTO
⁄	⁄	 &
(
⁄	⁄	& '
)
⁄	⁄	' (
{
€	€	 
Message
‹	‹	 
=
‹	‹	 
$str
‹	‹	 E
,
‹	‹	E F
Result
›	›	 
=
›	›	 "
instructorProfileDto
›	›	 1
,
›	›	1 2
	IsSuccess
ﬁ	ﬁ	 
=
ﬁ	ﬁ	 
false
ﬁ	ﬁ	  %
,
ﬁ	ﬁ	% &

StatusCode
ﬂ	ﬂ	 
=
ﬂ	ﬂ	  
$num
ﬂ	ﬂ	! $
}
‡	‡	 
;
‡	‡	 
}
·	·	 
user
„	„	 
.
„	„	 
	BirthDate
„	„	 
=
„	„	 "
instructorProfileDto
„	„	 1
.
„	„	1 2
	BirthDate
„	„	2 ;
;
„	„	; <
user
‰	‰	 
.
‰	‰	 
PhoneNumber
‰	‰	 
=
‰	‰	 "
instructorProfileDto
‰	‰	 3
.
‰	‰	3 4
PhoneNumber
‰	‰	4 ?
;
‰	‰	? @
user
Â	Â	 
.
Â	Â	 
Address
Â	Â	 
=
Â	Â	 "
instructorProfileDto
Â	Â	 /
.
Â	Â	/ 0
Address
Â	Â	0 7
;
Â	Â	7 8
user
Ê	Ê	 
.
Ê	Ê	 
Country
Ê	Ê	 
=
Ê	Ê	 "
instructorProfileDto
Ê	Ê	 /
.
Ê	Ê	/ 0
Country
Ê	Ê	0 7
;
Ê	Ê	7 8
user
Á	Á	 
.
Á	Á	 
Gender
Á	Á	 
=
Á	Á	 "
instructorProfileDto
Á	Á	 .
.
Á	Á	. /
Gender
Á	Á	/ 5
;
Á	Á	5 6
user
Ë	Ë	 
.
Ë	Ë	 
	TaxNumber
Ë	Ë	 
=
Ë	Ë	 "
instructorProfileDto
Ë	Ë	 1
.
Ë	Ë	1 2
	TaxNumber
Ë	Ë	2 ;
;
Ë	Ë	; <
user
È	È	 
.
È	È	 

UpdateTime
È	È	 
=
È	È	 
DateTime
È	È	 &
.
È	È	& '
Now
È	È	' *
;
È	È	* +
var
Ï	Ï	 

instructor
Ï	Ï	 
=
Ï	Ï	 
await
Ï	Ï	 "
_unitOfWork
Ï	Ï	# .
.
Ï	Ï	. /"
InstructorRepository
Ï	Ï	/ C
.
Ï	Ï	C D
GetAsync
Ï	Ï	D L
(
Ï	Ï	L M
x
Ï	Ï	M N
=>
Ï	Ï	O Q
x
Ï	Ï	R S
.
Ï	Ï	S T
UserId
Ï	Ï	T Z
==
Ï	Ï	[ ]
userId
Ï	Ï	^ d
)
Ï	Ï	d e
;
Ï	Ï	e f
if
Ì	Ì	 
(
Ì	Ì	 

instructor
Ì	Ì	 
is
Ì	Ì	 
null
Ì	Ì	 "
)
Ì	Ì	" #
{
Ó	Ó	 

instructor
Ô	Ô	 
=
Ô	Ô	 
new
Ô	Ô	  

Instructor
Ô	Ô	! +
(
Ô	Ô	+ ,
)
Ô	Ô	, -
{
		 
UserId
Ò	Ò	 
=
Ò	Ò	 
user
Ò	Ò	 !
.
Ò	Ò	! "
Id
Ò	Ò	" $
,
Ò	Ò	$ %
Introduction
Ú	Ú	  
=
Ú	Ú	! ""
instructorProfileDto
Ú	Ú	# 7
.
Ú	Ú	7 8
Introduction
Ú	Ú	8 D
,
Ú	Ú	D E
Degree
Û	Û	 
=
Û	Û	 "
instructorProfileDto
Û	Û	 1
.
Û	Û	1 2
Degree
Û	Û	2 8
,
Û	Û	8 9
Industry
Ù	Ù	 
=
Ù	Ù	 "
instructorProfileDto
Ù	Ù	 3
.
Ù	Ù	3 4
Industry
Ù	Ù	4 <
}
ı	ı	 
;
ı	ı	 
await
ˆ	ˆ	 
_unitOfWork
ˆ	ˆ	 !
.
ˆ	ˆ	! ""
InstructorRepository
ˆ	ˆ	" 6
.
ˆ	ˆ	6 7
AddAsync
ˆ	ˆ	7 ?
(
ˆ	ˆ	? @

instructor
ˆ	ˆ	@ J
)
ˆ	ˆ	J K
;
ˆ	ˆ	K L
}
˜	˜	 
else
¯	¯	 
{
˘	˘	 

instructor
˙	˙	 
.
˙	˙	 
Introduction
˙	˙	 '
=
˙	˙	( )"
instructorProfileDto
˙	˙	* >
.
˙	˙	> ?
Introduction
˙	˙	? K
;
˙	˙	K L

instructor
˚	˚	 
.
˚	˚	 
Industry
˚	˚	 #
=
˚	˚	$ %"
instructorProfileDto
˚	˚	& :
.
˚	˚	: ;
Industry
˚	˚	; C
;
˚	˚	C D
}
¸	¸	 
var
˛	˛	 
isRoleExist
˛	˛	 
=
˛	˛	 
await
˛	˛	 #
_roleManager
˛	˛	$ 0
.
˛	˛	0 1
RoleExistsAsync
˛	˛	1 @
(
˛	˛	@ A
StaticUserRoles
˛	˛	A P
.
˛	˛	P Q

Instructor
˛	˛	Q [
)
˛	˛	[ \
;
˛	˛	\ ]
if
Å
Å
 
(
Å
Å
 
isRoleExist
Å
Å
 
is
Å
Å
 
false
Å
Å
 $
)
Å
Å
$ %
{
Ç
Ç
 
await
É
É
 
_roleManager
É
É
 "
.
É
É
" #
CreateAsync
É
É
# .
(
É
É
. /
new
É
É
/ 2
IdentityRole
É
É
3 ?
(
É
É
? @
StaticUserRoles
É
É
@ O
.
É
É
O P

Instructor
É
É
P Z
)
É
É
Z [
)
É
É
[ \
;
É
É
\ ]
}
Ñ
Ñ
 
await
á
á
 
_userManager
á
á
 
.
á
á
 
AddToRoleAsync
á
á
 -
(
á
á
- .
user
á
á
. 2
,
á
á
2 3
StaticUserRoles
á
á
4 C
.
á
á
C D

Instructor
á
á
D N
)
á
á
N O
;
á
á
O P
await
â
â
 
_unitOfWork
â
â
 
.
â
â
 
	SaveAsync
â
â
 '
(
â
â
' (
)
â
â
( )
;
â
â
) *
return
ã
ã
 
new
ã
ã
 
ResponseDTO
ã
ã
 "
(
ã
ã
" #
)
ã
ã
# $
{
å
å
 
Message
ç
ç
 
=
ç
ç
 
$str
ç
ç
 ?
,
ç
ç
? @
	IsSuccess
é
é
 
=
é
é
 
true
é
é
  
,
é
é
  !

StatusCode
è
è
 
=
è
è
 
$num
è
è
  
,
è
è
  !
Result
ê
ê
 
=
ê
ê
 "
instructorProfileDto
ê
ê
 -
}
ë
ë
 
;
ë
ë
 
}
í
í
 	
catch
ì
ì
 
(
ì
ì
 
	Exception
ì
ì
 
e
ì
ì
 
)
ì
ì
 
{
î
î
 	
return
ï
ï
 
new
ï
ï
 
ResponseDTO
ï
ï
 "
(
ï
ï
" #
)
ï
ï
# $
{
ñ
ñ
 
Message
ó
ó
 
=
ó
ó
 
e
ó
ó
 
.
ó
ó
 
Message
ó
ó
 #
,
ó
ó
# $
	IsSuccess
ò
ò
 
=
ò
ò
 
false
ò
ò
 !
,
ò
ò
! "

StatusCode
ô
ô
 
=
ô
ô
 
$num
ô
ô
  
,
ô
ô
  !
Result
ö
ö
 
=
ö
ö
 
null
ö
ö
 
}
õ
õ
 
;
õ
õ
 
}
ú
ú
 	
}
ù
ù
 
public
ü
ü
 

async
ü
ü
 
Task
ü
ü
 
<
ü
ü
 
ResponseDTO
ü
ü
 !
>
ü
ü
! "
GetUserInfo
ü
ü
# .
(
ü
ü
. /
ClaimsPrincipal
ü
ü
/ >
User
ü
ü
? C
)
ü
ü
C D
{
†
†
 
try
¢
¢
 
{
£
£
 	
var
§
§
 
userId
§
§
 
=
§
§
 
User
§
§
 
.
§
§
 
Claims
§
§
 $
.
§
§
$ %
FirstOrDefault
§
§
% 3
(
§
§
3 4
x
§
§
4 5
=>
§
§
6 8
x
§
§
9 :
.
§
§
: ;
Type
§
§
; ?
==
§
§
@ B

ClaimTypes
§
§
C M
.
§
§
M N
NameIdentifier
§
§
N \
)
§
§
\ ]
?
§
§
] ^
.
§
§
^ _
Value
§
§
_ d
;
§
§
d e
var
•
•
 
user
•
•
 
=
•
•
 
await
•
•
 
_userManager
•
•
 )
.
•
•
) *
FindByIdAsync
•
•
* 7
(
•
•
7 8
userId
•
•
8 >
)
•
•
> ?
;
•
•
? @
if
®
®
 
(
®
®
 
user
®
®
 
is
®
®
 
null
®
®
 
)
®
®
 
{
©
©
 
return
™
™
 
new
™
™
 
ResponseDTO
™
™
 &
(
™
™
& '
)
™
™
' (
{
´
´
 
Message
¨
¨
 
=
¨
¨
 
$str
¨
¨
 4
,
¨
¨
4 5
	IsSuccess
≠
≠
 
=
≠
≠
 
false
≠
≠
  %
,
≠
≠
% &

StatusCode
Æ
Æ
 
=
Æ
Æ
  
$num
Æ
Æ
! $
,
Æ
Æ
$ %
Result
Ø
Ø
 
=
Ø
Ø
 
null
Ø
Ø
 !
,
Ø
Ø
! "
}
∞
∞
 
;
∞
∞
 
}
±
±
 
var
≥
≥
 
userInfo
≥
≥
 
=
≥
≥
 
_mapper
≥
≥
 "
.
≥
≥
" #
Map
≥
≥
# &
<
≥
≥
& '
UserInfoDTO
≥
≥
' 2
>
≥
≥
2 3
(
≥
≥
3 4
user
≥
≥
4 8
)
≥
≥
8 9
;
≥
≥
9 :
var
¥
¥
 
roles
¥
¥
 
=
¥
¥
 
await
¥
¥
 
_userManager
¥
¥
 *
.
¥
¥
* +
GetRolesAsync
¥
¥
+ 8
(
¥
¥
8 9
user
¥
¥
9 =
)
¥
¥
= >
;
¥
¥
> ?
userInfo
µ
µ
 
.
µ
µ
 
Roles
µ
µ
 
=
µ
µ
 
roles
µ
µ
 "
;
µ
µ
" #
userInfo
∂
∂
 
.
∂
∂
 

isAccepted
∂
∂
 
=
∂
∂
  !
true
∂
∂
" &
;
∂
∂
& '
if
π
π
 
(
π
π
 
roles
π
π
 
.
π
π
 
Contains
π
π
 
(
π
π
 
StaticUserRoles
π
π
 .
.
π
π
. /

Instructor
π
π
/ 9
)
π
π
9 :
)
π
π
: ;
{
∫
∫
 
var
ª
ª
 

instructor
ª
ª
 
=
ª
ª
  
await
ª
ª
! &
_unitOfWork
ª
ª
' 2
.
ª
ª
2 3"
InstructorRepository
ª
ª
3 G
.
ª
ª
G H
GetAsync
ª
ª
H P
(
ª
ª
P Q
x
ª
ª
Q R
=>
ª
ª
S U
x
ª
ª
V W
.
ª
ª
W X
UserId
ª
ª
X ^
==
ª
ª
_ a
user
ª
ª
b f
.
ª
ª
f g
Id
ª
ª
g i
)
ª
ª
i j
;
ª
ª
j k
userInfo
º
º
 
.
º
º
 
isUploadDegree
º
º
 '
=
º
º
( )

instructor
º
º
* 4
?
º
º
4 5
.
º
º
5 6
DegreeImageUrl
º
º
6 D
!=
º
º
E G
null
º
º
H L
?
º
º
M N
true
º
º
O S
:
º
º
T U
false
º
º
V [
;
º
º
[ \
userInfo
Ω
Ω
 
.
Ω
Ω
 

isAccepted
Ω
Ω
 #
=
Ω
Ω
$ %

instructor
Ω
Ω
& 0
?
Ω
Ω
0 1
.
Ω
Ω
1 2

IsAccepted
Ω
Ω
2 <
;
Ω
Ω
< =
userInfo
æ
æ
 
.
æ
æ
 
InstructorId
æ
æ
 %
=
æ
æ
& '

instructor
æ
æ
( 2
?
æ
æ
2 3
.
æ
æ
3 4
InstructorId
æ
æ
4 @
;
æ
æ
@ A
}
ø
ø
 
if
¡
¡
 
(
¡
¡
 
roles
¡
¡
 
.
¡
¡
 
Contains
¡
¡
 
(
¡
¡
 
StaticUserRoles
¡
¡
 .
.
¡
¡
. /
Student
¡
¡
/ 6
)
¡
¡
6 7
)
¡
¡
7 8
{
¬
¬
 
var
√
√
 
student
√
√
 
=
√
√
 
await
√
√
 #
_unitOfWork
√
√
$ /
.
√
√
/ 0
StudentRepository
√
√
0 A
.
√
√
A B
GetByUserId
√
√
B M
(
√
√
M N
userId
√
√
N T
)
√
√
T U
;
√
√
U V
userInfo
ƒ
ƒ
 
.
ƒ
ƒ
 
	StudentId
ƒ
ƒ
 "
=
ƒ
ƒ
# $
student
ƒ
ƒ
% ,
?
ƒ
ƒ
, -
.
ƒ
ƒ
- .
	StudentId
ƒ
ƒ
. 7
;
ƒ
ƒ
7 8
}
≈
≈
 
return
«
«
 
new
«
«
 
ResponseDTO
«
«
 "
(
«
«
" #
)
«
«
# $
{
»
»
 
Message
…
…
 
=
…
…
 
$str
…
…
 6
,
…
…
6 7
	IsSuccess
 
 
 
=
 
 
 
true
 
 
  
,
 
 
  !

StatusCode
À
À
 
=
À
À
 
$num
À
À
  
,
À
À
  !
Result
Ã
Ã
 
=
Ã
Ã
 
userInfo
Ã
Ã
 !
,
Ã
Ã
! "
}
Õ
Õ
 
;
Õ
Õ
 
}
Œ
Œ
 	
catch
œ
œ
 
(
œ
œ
 
	Exception
œ
œ
 
e
œ
œ
 
)
œ
œ
 
{
–
–
 	
return
—
—
 
new
—
—
 
ResponseDTO
—
—
 "
(
—
—
" #
)
—
—
# $
{
“
“
 
Message
”
”
 
=
”
”
 
$str
”
”
 0
,
”
”
0 1
	IsSuccess
‘
‘
 
=
‘
‘
 
false
‘
‘
 !
,
‘
‘
! "

StatusCode
’
’
 
=
’
’
 
$num
’
’
  
,
’
’
  !
Result
÷
÷
 
=
÷
÷
 
null
÷
÷
 
,
÷
÷
 
}
◊
◊
 
;
◊
◊
 
}
ÿ
ÿ
 	
}
Ÿ
Ÿ
 
public
€
€
 

async
€
€
 
Task
€
€
 
<
€
€
 
MemoryStream
€
€
 "
>
€
€
" #
DisplayUserAvatar
€
€
$ 5
(
€
€
5 6
string
€
€
6 <
userId
€
€
= C
)
€
€
C D
{
‹
‹
 
try
›
›
 
{
ﬁ
ﬁ
 	
var
ﬂ
ﬂ
 
user
ﬂ
ﬂ
 
=
ﬂ
ﬂ
 
await
ﬂ
ﬂ
 
_userManager
ﬂ
ﬂ
 )
.
ﬂ
ﬂ
) *
FindByIdAsync
ﬂ
ﬂ
* 7
(
ﬂ
ﬂ
7 8
userId
ﬂ
ﬂ
8 >
)
ﬂ
ﬂ
> ?
;
ﬂ
ﬂ
? @
var
·
·
 
stream
·
·
 
=
·
·
 
await
·
·
 
_firebaseService
·
·
 /
.
·
·
/ 0
GetImage
·
·
0 8
(
·
·
8 9
user
·
·
9 =
.
·
·
= >
	AvatarUrl
·
·
> G
)
·
·
G H
;
·
·
H I
return
„
„
 
stream
„
„
 
;
„
„
 
}
‰
‰
 	
catch
Â
Â
 
(
Â
Â
 
	Exception
Â
Â
 
e
Â
Â
 
)
Â
Â
 
{
Ê
Ê
 	
return
Á
Á
 
null
Á
Á
 
;
Á
Á
 
}
Ë
Ë
 	
}
È
È
 
public
Î
Î
 

async
Î
Î
 
Task
Î
Î
 
<
Î
Î
 
DegreeResponseDTO
Î
Î
 '
>
Î
Î
' (%
DisplayInstructorDegree
Î
Î
) @
(
Î
Î
@ A
string
Î
Î
A G
userId
Î
Î
H N
)
Î
Î
N O
{
Ï
Ï
 
try
Ì
Ì
 
{
Ó
Ó
 	
if
Ô
Ô
 
(
Ô
Ô
 
userId
Ô
Ô
 
is
Ô
Ô
 
null
Ô
Ô
 
)
Ô
Ô
 
{


 
throw
Ò
Ò
 
new
Ò
Ò
 
	Exception
Ò
Ò
 #
(
Ò
Ò
# $
$str
Ò
Ò
$ ;
)
Ò
Ò
; <
;
Ò
Ò
< =
}
Ú
Ú
 
var
Ù
Ù
 

instructor
Ù
Ù
 
=
Ù
Ù
 
await
Ù
Ù
 "
_unitOfWork
Ù
Ù
# .
.
Ù
Ù
. /"
InstructorRepository
Ù
Ù
/ C
.
Ù
Ù
C D
GetAsync
Ù
Ù
D L
(
Ù
Ù
L M
x
Ù
Ù
M N
=>
Ù
Ù
O Q
x
Ù
Ù
R S
.
Ù
Ù
S T
UserId
Ù
Ù
T Z
==
Ù
Ù
[ ]
userId
Ù
Ù
^ d
)
Ù
Ù
d e
;
Ù
Ù
e f
if
ˆ
ˆ
 
(
ˆ
ˆ
 

instructor
ˆ
ˆ
 
is
ˆ
ˆ
 
null
ˆ
ˆ
 "
)
ˆ
ˆ
" #
{
˜
˜
 
throw
¯
¯
 
new
¯
¯
 
	Exception
¯
¯
 #
(
¯
¯
# $
$str
¯
¯
$ @
)
¯
¯
@ A
;
¯
¯
A B
}
˘
˘
 
var
˚
˚
 

degreePath
˚
˚
 
=
˚
˚
 

instructor
˚
˚
 '
?
˚
˚
' (
.
˚
˚
( )
DegreeImageUrl
˚
˚
) 7
;
˚
˚
7 8
if
¸
¸
 
(
¸
¸
 

degreePath
¸
¸
 
.
¸
¸
 
IsNullOrEmpty
¸
¸
 (
(
¸
¸
( )
)
¸
¸
) *
)
¸
¸
* +
{
˝
˝
 
throw
˛
˛
 
new
˛
˛
 
	Exception
˛
˛
 #
(
˛
˛
# $
$str
˛
˛
$ H
)
˛
˛
H I
;
˛
˛
I J
}
ˇ
ˇ
 
var
ÅÅ 
stream
ÅÅ 
=
ÅÅ 
await
ÅÅ 
_firebaseService
ÅÅ /
.
ÅÅ/ 0
GetImage
ÅÅ0 8
(
ÅÅ8 9

instructor
ÅÅ9 C
.
ÅÅC D
DegreeImageUrl
ÅÅD R
)
ÅÅR S
;
ÅÅS T
if
ÉÉ 
(
ÉÉ 
stream
ÉÉ 
is
ÉÉ 
null
ÉÉ 
)
ÉÉ 
{
ÑÑ 
throw
ÖÖ 
new
ÖÖ 
	Exception
ÖÖ #
(
ÖÖ# $
$str
ÖÖ$ F
)
ÖÖF G
;
ÖÖG H
}
ÜÜ 
var
àà 
contentType
àà 
=
àà 
$str
àà 7
;
àà7 8
if
ää 
(
ää 

degreePath
ää 
.
ää 
EndsWith
ää #
(
ää# $
$str
ää$ *
)
ää* +
)
ää+ ,
{
ãã 
contentType
åå 
=
åå "
StaticFileExtensions
åå 2
.
åå2 3
Pdf
åå3 6
;
åå6 7
}
çç 
if
èè 
(
èè 

degreePath
èè 
.
èè 
EndsWith
èè #
(
èè# $
$str
èè$ *
)
èè* +
)
èè+ ,
{
êê 
contentType
ëë 
=
ëë "
StaticFileExtensions
ëë 2
.
ëë2 3
Png
ëë3 6
;
ëë6 7
}
íí 
if
îî 
(
îî 

degreePath
îî 
.
îî 
EndsWith
îî #
(
îî# $
$str
îî$ *
)
îî* +
||
îî, .

degreePath
îî/ 9
.
îî9 :
EndsWith
îî: B
(
îîB C
$str
îîC J
)
îîJ K
)
îîK L
{
ïï 
contentType
ññ 
=
ññ "
StaticFileExtensions
ññ 2
.
ññ2 3
Jpeg
ññ3 7
;
ññ7 8
}
óó 
return
ôô 
new
ôô 
DegreeResponseDTO
ôô (
(
ôô( )
)
ôô) *
{
öö 
Message
õõ 
=
õõ 
$str
õõ 1
,
õõ1 2
Stream
úú 
=
úú 
stream
úú 
,
úú  
ContentType
ùù 
=
ùù 
contentType
ùù )
,
ùù) *
FileName
ûû 
=
ûû 
Path
ûû 
.
ûû  
GetFileName
ûû  +
(
ûû+ ,

degreePath
ûû, 6
)
ûû6 7
}
üü 
;
üü 
}
†† 	
catch
°° 
(
°° 
	Exception
°° 
e
°° 
)
°° 
{
¢¢ 	
return
££ 
new
££ 
DegreeResponseDTO
££ (
(
££( )
)
££) *
{
§§ 
ContentType
•• 
=
•• 
null
•• "
,
••" #
Message
¶¶ 
=
¶¶ 
e
¶¶ 
.
¶¶ 
Message
¶¶ #
,
¶¶# $
Stream
ßß 
=
ßß 
null
ßß 
}
®® 
;
®® 
}
©© 	
}
™™ 
public
±± 

async
±± 
Task
±± 
<
±± 
ResponseDTO
±± !
>
±±! "
SignInByGoogle
±±# 1
(
±±1 2
SignInByGoogleDTO
±±2 C
signInByGoogleDto
±±D U
)
±±U V
{
≤≤ 
try
≥≥ 
{
¥¥ 	
FirebaseToken
∂∂ 
googleTokenS
∂∂ &
=
∂∂' (
await
∑∑ 
FirebaseAuth
∑∑ "
.
∑∑" #
DefaultInstance
∑∑# 2
.
∑∑2 3 
VerifyIdTokenAsync
∑∑3 E
(
∑∑E F
signInByGoogleDto
∑∑F W
.
∑∑W X
Token
∑∑X ]
)
∑∑] ^
;
∑∑^ _
string
∏∏ 
userId
∏∏ 
=
∏∏ 
googleTokenS
∏∏ (
.
∏∏( )
Uid
∏∏) ,
;
∏∏, -
string
ππ 
email
ππ 
=
ππ 
googleTokenS
ππ '
.
ππ' (
Claims
ππ( .
[
ππ. /
$str
ππ/ 6
]
ππ6 7
.
ππ7 8
ToString
ππ8 @
(
ππ@ A
)
ππA B
;
ππB C
string
∫∫ 
name
∫∫ 
=
∫∫ 
googleTokenS
∫∫ &
.
∫∫& '
Claims
∫∫' -
[
∫∫- .
$str
∫∫. 4
]
∫∫4 5
.
∫∫5 6
ToString
∫∫6 >
(
∫∫> ?
)
∫∫? @
;
∫∫@ A
string
ªª 
	avatarUrl
ªª 
=
ªª 
googleTokenS
ªª +
.
ªª+ ,
Claims
ªª, 2
[
ªª2 3
$str
ªª3 <
]
ªª< =
.
ªª= >
ToString
ªª> F
(
ªªF G
)
ªªG H
;
ªªH I
var
ææ 
user
ææ 
=
ææ 
await
ææ 
_userManager
ææ )
.
ææ) *
FindByEmailAsync
ææ* :
(
ææ: ;
email
ææ; @
)
ææ@ A
;
ææA B
UserLoginInfo
øø 
?
øø 
userLoginInfo
øø (
=
øø) *
null
øø+ /
;
øø/ 0
if
¿¿ 
(
¿¿ 
user
¿¿ 
is
¿¿ 
not
¿¿ 
null
¿¿  
)
¿¿  !
{
¡¡ 
userLoginInfo
¬¬ 
=
¬¬ 
_userManager
¬¬  ,
.
¬¬, -
GetLoginsAsync
¬¬- ;
(
¬¬; <
user
¬¬< @
)
¬¬@ A
.
¬¬A B

GetAwaiter
¬¬B L
(
¬¬L M
)
¬¬M N
.
¬¬N O
	GetResult
¬¬O X
(
¬¬X Y
)
¬¬Y Z
.
√√ 
FirstOrDefault
√√ #
(
√√# $
x
√√$ %
=>
√√& (
x
√√) *
.
√√* +
LoginProvider
√√+ 8
==
√√9 ;!
StaticLoginProvider
√√< O
.
√√O P
Google
√√P V
)
√√V W
;
√√W X
}
ƒƒ 
if
∆∆ 
(
∆∆ 
user
∆∆ 
.
∆∆ 

LockoutEnd
∆∆ 
is
∆∆  "
not
∆∆# &
null
∆∆' +
)
∆∆+ ,
{
«« 
return
»» 
new
»» 
ResponseDTO
»» &
(
»»& '
)
»»' (
{
…… 
Message
   
=
   
$str
   4
,
  4 5
	IsSuccess
ÀÀ 
=
ÀÀ 
false
ÀÀ  %
,
ÀÀ% &

StatusCode
ÃÃ 
=
ÃÃ  
$num
ÃÃ! $
,
ÃÃ$ %
Result
ÕÕ 
=
ÕÕ 
null
ÕÕ !
}
ŒŒ 
;
ŒŒ 
}
œœ 
if
—— 
(
—— 
user
—— 
is
—— 
not
—— 
null
——  
&&
——! #
userLoginInfo
——$ 1
is
——2 4
null
——5 9
)
——9 :
{
““ 
return
”” 
new
”” 
ResponseDTO
”” &
(
””& '
)
””' (
{
‘‘ 
Result
’’ 
=
’’ 
new
’’  
SignResponseDTO
’’! 0
(
’’0 1
)
’’1 2
{
÷÷ 
RefreshToken
◊◊ $
=
◊◊% &
null
◊◊' +
,
◊◊+ ,
AccessToken
ÿÿ #
=
ÿÿ$ %
null
ÿÿ& *
,
ÿÿ* +
}
ŸŸ 
,
ŸŸ 
Message
⁄⁄ 
=
⁄⁄ 
$str
⁄⁄ B
,
⁄⁄B C
	IsSuccess
€€ 
=
€€ 
false
€€  %
,
€€% &

StatusCode
‹‹ 
=
‹‹  
$num
‹‹! $
}
›› 
;
›› 
}
ﬁﬁ 
if
‡‡ 
(
‡‡ 
userLoginInfo
‡‡ 
is
‡‡  
null
‡‡! %
&&
‡‡& (
user
‡‡) -
is
‡‡. 0
null
‡‡1 5
)
‡‡5 6
{
·· 
user
„„ 
=
„„ 
new
„„ 
ApplicationUser
„„ *
{
‰‰ 
Email
ÂÂ 
=
ÂÂ 
email
ÂÂ !
,
ÂÂ! "
FullName
ÊÊ 
=
ÊÊ 
name
ÊÊ #
,
ÊÊ# $
UserName
ÁÁ 
=
ÁÁ 
email
ÁÁ $
,
ÁÁ$ %
	AvatarUrl
ËË 
=
ËË 
	avatarUrl
ËË  )
,
ËË) *
EmailConfirmed
ÈÈ "
=
ÈÈ# $
true
ÈÈ% )
,
ÈÈ) *

UpdateTime
ÍÍ 
=
ÍÍ  
null
ÍÍ! %
}
ÎÎ 
;
ÎÎ 
await
ÌÌ 
_userManager
ÌÌ "
.
ÌÌ" #
CreateAsync
ÌÌ# .
(
ÌÌ. /
user
ÌÌ/ 3
)
ÌÌ3 4
;
ÌÌ4 5
await
ÓÓ 
_userManager
ÓÓ "
.
ÓÓ" #
AddLoginAsync
ÓÓ# 0
(
ÓÓ0 1
user
ÓÓ1 5
,
ÓÓ5 6
new
ÔÔ 
UserLoginInfo
ÔÔ %
(
ÔÔ% &!
StaticLoginProvider
ÔÔ& 9
.
ÔÔ9 :
Google
ÔÔ: @
,
ÔÔ@ A
userId
ÔÔB H
,
ÔÔH I
$str
ÔÔJ R
)
ÔÔR S
)
ÔÔS T
;
ÔÔT U
}
 
var
ÚÚ 
accessToken
ÚÚ 
=
ÚÚ 
await
ÚÚ #
_tokenService
ÚÚ$ 1
.
ÚÚ1 2)
GenerateJwtAccessTokenAsync
ÚÚ2 M
(
ÚÚM N
user
ÚÚN R
)
ÚÚR S
;
ÚÚS T
var
ÛÛ 
refreshToken
ÛÛ 
=
ÛÛ 
await
ÛÛ $
_tokenService
ÛÛ% 2
.
ÛÛ2 3*
GenerateJwtRefreshTokenAsync
ÛÛ3 O
(
ÛÛO P
user
ÛÛP T
)
ÛÛT U
;
ÛÛU V
await
ÙÙ 
_tokenService
ÙÙ 
.
ÙÙ  
StoreRefreshToken
ÙÙ  1
(
ÙÙ1 2
user
ÙÙ2 6
.
ÙÙ6 7
Id
ÙÙ7 9
,
ÙÙ9 :
refreshToken
ÙÙ; G
)
ÙÙG H
;
ÙÙH I
user
ˆˆ 
.
ˆˆ 
LastLoginTime
ˆˆ 
=
ˆˆ  
DateTime
ˆˆ! )
.
ˆˆ) *
UtcNow
ˆˆ* 0
;
ˆˆ0 1
user
˜˜ 
.
˜˜ 
SendClearEmail
˜˜ 
=
˜˜  !
false
˜˜" '
;
˜˜' (
await
¯¯ 
_userManager
¯¯ 
.
¯¯ 
UpdateAsync
¯¯ *
(
¯¯* +
user
¯¯+ /
)
¯¯/ 0
;
¯¯0 1
return
˙˙ 
new
˙˙ 
ResponseDTO
˙˙ "
(
˙˙" #
)
˙˙# $
{
˚˚ 
Result
¸¸ 
=
¸¸ 
new
¸¸ 
SignResponseDTO
¸¸ ,
(
¸¸, -
)
¸¸- .
{
˝˝ 
AccessToken
˛˛ 
=
˛˛  !
accessToken
˛˛" -
,
˛˛- .
RefreshToken
ˇˇ  
=
ˇˇ! "
refreshToken
ˇˇ# /
,
ˇˇ/ 0
}
ÄÄ 
,
ÄÄ 
Message
ÅÅ 
=
ÅÅ 
$str
ÅÅ 0
,
ÅÅ0 1
	IsSuccess
ÇÇ 
=
ÇÇ 
true
ÇÇ  
,
ÇÇ  !

StatusCode
ÉÉ 
=
ÉÉ 
$num
ÉÉ  
}
ÑÑ 
;
ÑÑ 
}
ÖÖ 	
catch
ÜÜ 
(
ÜÜ #
FirebaseAuthException
ÜÜ $
e
ÜÜ% &
)
ÜÜ& '
{
áá 	
return
àà 
new
àà 
ResponseDTO
àà "
(
àà" #
)
àà# $
{
ââ 
Result
ää 
=
ää 
new
ää 
SignResponseDTO
ää ,
(
ää, -
)
ää- .
{
ãã 
AccessToken
åå 
=
åå  !
null
åå" &
,
åå& '
RefreshToken
çç  
=
çç! "
null
çç# '
,
çç' (
}
éé 
,
éé 
Message
èè 
=
èè 
$str
èè 0
,
èè0 1
	IsSuccess
êê 
=
êê 
false
êê !
,
êê! "

StatusCode
ëë 
=
ëë 
$num
ëë  
}
íí 
;
íí 
}
ìì 	
}
îî 
public
õõ 

async
õõ 
Task
õõ 
<
õõ 
ResponseDTO
õõ !
>
õõ! "
UpdateStudent
õõ# 0
(
õõ0 1%
UpdateStudentProfileDTO
õõ1 H
updateStudentDTO
õõI Y
,
õõY Z
ClaimsPrincipal
õõ[ j
User
õõk o
)
õõo p
{
úú 
try
ùù 
{
ûû 	
var
üü 
userId
üü 
=
üü 
User
üü 
.
üü 
Claims
üü $
.
üü$ %
FirstOrDefault
üü% 3
(
üü3 4
x
üü4 5
=>
üü6 8
x
üü9 :
.
üü: ;
Type
üü; ?
==
üü@ B

ClaimTypes
üüC M
.
üüM N
NameIdentifier
üüN \
)
üü\ ]
?
üü] ^
.
üü^ _
Value
üü_ d
;
üüd e
if
°° 
(
°° 
userId
°° 
is
°° 
null
°° 
)
°° 
{
¢¢ 
return
££ 
new
££ 
ResponseDTO
££ &
{
§§ 
Message
•• 
=
•• 
$str
•• .
,
••. /
Result
¶¶ 
=
¶¶ 
null
¶¶ !
,
¶¶! "
	IsSuccess
ßß 
=
ßß 
false
ßß  %
,
ßß% &

StatusCode
®® 
=
®®  
$num
®®! $
}
©© 
;
©© 
}
™™ 
var
¨¨ 
studentToUpdate
¨¨ 
=
¨¨  !
await
¨¨" '
_unitOfWork
¨¨( 3
.
¨¨3 4
StudentRepository
¨¨4 E
.
¨¨E F
GetByUserId
¨¨F Q
(
¨¨Q R
userId
¨¨R X
)
¨¨X Y
;
¨¨Y Z
if
ÆÆ 
(
ÆÆ 
studentToUpdate
ÆÆ 
==
ÆÆ  "
null
ÆÆ# '
)
ÆÆ' (
{
ØØ 
return
∞∞ 
new
∞∞ 
ResponseDTO
∞∞ &
{
±± 
Message
≤≤ 
=
≤≤ 
$str
≤≤ 1
,
≤≤1 2
Result
≥≥ 
=
≥≥ 
null
≥≥ !
,
≥≥! "
	IsSuccess
¥¥ 
=
¥¥ 
false
¥¥  %
,
¥¥% &

StatusCode
µµ 
=
µµ  
$num
µµ! $
}
∂∂ 
;
∂∂ 
}
∑∑ 
studentToUpdate
∫∫ 
.
∫∫ 

University
∫∫ &
=
∫∫' (
updateStudentDTO
∫∫) 9
.
∫∫9 :

University
∫∫: D
;
∫∫D E
studentToUpdate
ΩΩ 
.
ΩΩ 
ApplicationUser
ΩΩ +
.
ΩΩ+ ,
Address
ΩΩ, 3
=
ΩΩ4 5
updateStudentDTO
ΩΩ6 F
.
ΩΩF G
Address
ΩΩG N
;
ΩΩN O
studentToUpdate
ææ 
.
ææ 
ApplicationUser
ææ +
.
ææ+ ,
	BirthDate
ææ, 5
=
ææ6 7
updateStudentDTO
ææ8 H
.
ææH I
	BirthDate
ææI R
;
ææR S
studentToUpdate
øø 
.
øø 
ApplicationUser
øø +
.
øø+ ,
Gender
øø, 2
=
øø3 4
updateStudentDTO
øø5 E
.
øøE F
Gender
øøF L
;
øøL M
studentToUpdate
¿¿ 
.
¿¿ 
ApplicationUser
¿¿ +
.
¿¿+ ,
FullName
¿¿, 4
=
¿¿5 6
updateStudentDTO
¿¿7 G
.
¿¿G H
FullName
¿¿H P
;
¿¿P Q
studentToUpdate
¡¡ 
.
¡¡ 
ApplicationUser
¡¡ +
.
¡¡+ ,
Country
¡¡, 3
=
¡¡4 5
updateStudentDTO
¡¡6 F
.
¡¡F G
Country
¡¡G N
;
¡¡N O
_unitOfWork
√√ 
.
√√ 
StudentRepository
√√ )
.
√√) *
Update
√√* 0
(
√√0 1
studentToUpdate
√√1 @
)
√√@ A
;
√√A B
await
ƒƒ 
_unitOfWork
ƒƒ 
.
ƒƒ 
	SaveAsync
ƒƒ '
(
ƒƒ' (
)
ƒƒ( )
;
ƒƒ) *
return
∆∆ 
new
∆∆ 
ResponseDTO
∆∆ "
{
«« 
Message
»» 
=
»» 
$str
»» 8
,
»»8 9
Result
…… 
=
…… 
null
…… 
,
…… 
	IsSuccess
   
=
   
true
    
,
    !

StatusCode
ÀÀ 
=
ÀÀ 
$num
ÀÀ  
}
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
catch
ŒŒ 
(
ŒŒ 
	Exception
ŒŒ 
e
ŒŒ 
)
ŒŒ 
{
œœ 	
return
–– 
new
–– 
ResponseDTO
–– "
{
—— 
Message
““ 
=
““ 
e
““ 
.
““ 
Message
““ #
,
““# $
Result
”” 
=
”” 
null
”” 
,
”” 
	IsSuccess
‘‘ 
=
‘‘ 
false
‘‘ !
,
‘‘! "

StatusCode
’’ 
=
’’ 
$num
’’  
}
÷÷ 
;
÷÷ 
}
◊◊ 	
}
ÿÿ 
public
ﬂﬂ 

async
ﬂﬂ 
Task
ﬂﬂ 
<
ﬂﬂ 
ResponseDTO
ﬂﬂ !
>
ﬂﬂ! "
UpdateInstructor
ﬂﬂ# 3
(
ﬂﬂ3 4'
UpdateIntructorProfileDTO
ﬂﬂ4 M 
updateIntructorDTO
ﬂﬂN `
,
ﬂﬂ` a
ClaimsPrincipal
ﬂﬂb q
User
ﬂﬂr v
)
ﬂﬂv w
{
‡‡ 
try
·· 
{
‚‚ 	
var
„„ 
userId
„„ 
=
„„ 
User
„„ 
.
„„ 
Claims
„„ $
.
„„$ %
FirstOrDefault
„„% 3
(
„„3 4
x
„„4 5
=>
„„6 8
x
„„9 :
.
„„: ;
Type
„„; ?
==
„„@ B

ClaimTypes
„„C M
.
„„M N
NameIdentifier
„„N \
)
„„\ ]
?
„„] ^
.
„„^ _
Value
„„_ d
;
„„d e
if
ÂÂ 
(
ÂÂ 
userId
ÂÂ 
is
ÂÂ 
null
ÂÂ 
)
ÂÂ 
{
ÊÊ 
return
ÁÁ 
new
ÁÁ 
ResponseDTO
ÁÁ &
{
ËË 
Message
ÈÈ 
=
ÈÈ 
$str
ÈÈ .
,
ÈÈ. /
Result
ÍÍ 
=
ÍÍ 
null
ÍÍ !
,
ÍÍ! "
	IsSuccess
ÎÎ 
=
ÎÎ 
false
ÎÎ  %
,
ÎÎ% &

StatusCode
ÏÏ 
=
ÏÏ  
$num
ÏÏ! $
}
ÌÌ 
;
ÌÌ 
}
ÓÓ 
var
 
intructorToUpdate
 !
=
" #
await
$ )
_unitOfWork
* 5
.
5 6"
InstructorRepository
6 J
.
J K
GetByUserId
K V
(
V W
userId
W ]
)
] ^
;
^ _
if
ÚÚ 
(
ÚÚ 
intructorToUpdate
ÚÚ !
==
ÚÚ" $
null
ÚÚ% )
)
ÚÚ) *
{
ÛÛ 
return
ÙÙ 
new
ÙÙ 
ResponseDTO
ÙÙ &
{
ıı 
Message
ˆˆ 
=
ˆˆ 
$str
ˆˆ 3
,
ˆˆ3 4
Result
˜˜ 
=
˜˜ 
null
˜˜ !
,
˜˜! "
	IsSuccess
¯¯ 
=
¯¯ 
false
¯¯  %
,
¯¯% &

StatusCode
˘˘ 
=
˘˘  
$num
˘˘! $
}
˙˙ 
;
˙˙ 
}
˚˚ 
intructorToUpdate
˛˛ 
.
˛˛ 
Degree
˛˛ $
=
˛˛% & 
updateIntructorDTO
˛˛' 9
.
˛˛9 :
Degree
˛˛: @
;
˛˛@ A
intructorToUpdate
ˇˇ 
.
ˇˇ 
Industry
ˇˇ &
=
ˇˇ' ( 
updateIntructorDTO
ˇˇ) ;
.
ˇˇ; <
Industry
ˇˇ< D
;
ˇˇD E
intructorToUpdate
ÄÄ 
.
ÄÄ 
Introduction
ÄÄ *
=
ÄÄ+ , 
updateIntructorDTO
ÄÄ- ?
.
ÄÄ? @
Introduction
ÄÄ@ L
;
ÄÄL M
intructorToUpdate
ÉÉ 
.
ÉÉ 
ApplicationUser
ÉÉ -
.
ÉÉ- .
Address
ÉÉ. 5
=
ÉÉ6 7 
updateIntructorDTO
ÉÉ8 J
.
ÉÉJ K
Address
ÉÉK R
;
ÉÉR S
intructorToUpdate
ÑÑ 
.
ÑÑ 
ApplicationUser
ÑÑ -
.
ÑÑ- .
	BirthDate
ÑÑ. 7
=
ÑÑ8 9 
updateIntructorDTO
ÑÑ: L
.
ÑÑL M
	BirthDate
ÑÑM V
;
ÑÑV W
intructorToUpdate
ÖÖ 
.
ÖÖ 
ApplicationUser
ÖÖ -
.
ÖÖ- .
Gender
ÖÖ. 4
=
ÖÖ5 6 
updateIntructorDTO
ÖÖ7 I
.
ÖÖI J
Gender
ÖÖJ P
;
ÖÖP Q
intructorToUpdate
ÜÜ 
.
ÜÜ 
ApplicationUser
ÜÜ -
.
ÜÜ- .
FullName
ÜÜ. 6
=
ÜÜ7 8 
updateIntructorDTO
ÜÜ9 K
.
ÜÜK L
FullName
ÜÜL T
;
ÜÜT U
intructorToUpdate
áá 
.
áá 
ApplicationUser
áá -
.
áá- .
Country
áá. 5
=
áá6 7 
updateIntructorDTO
áá8 J
.
ááJ K
Country
ááK R
;
ááR S
intructorToUpdate
àà 
.
àà 
ApplicationUser
àà -
.
àà- .
	TaxNumber
àà. 7
=
àà8 9 
updateIntructorDTO
àà: L
.
ààL M
	TaxNumber
ààM V
;
ààV W
_unitOfWork
ää 
.
ää "
InstructorRepository
ää ,
.
ää, -
Update
ää- 3
(
ää3 4
intructorToUpdate
ää4 E
)
ääE F
;
ääF G
await
ãã 
_unitOfWork
ãã 
.
ãã 
	SaveAsync
ãã '
(
ãã' (
)
ãã( )
;
ãã) *
return
çç 
new
çç 
ResponseDTO
çç "
{
éé 
Message
èè 
=
èè 
$str
èè ;
,
èè; <
Result
êê 
=
êê 
null
êê 
,
êê 
	IsSuccess
ëë 
=
ëë 
true
ëë  
,
ëë  !

StatusCode
íí 
=
íí 
$num
íí  
}
ìì 
;
ìì 
}
îî 	
catch
ïï 
(
ïï 
	Exception
ïï 
e
ïï 
)
ïï 
{
ññ 	
return
óó 
new
óó 
ResponseDTO
óó "
{
òò 
Message
ôô 
=
ôô 
e
ôô 
.
ôô 
Message
ôô #
,
ôô# $
Result
öö 
=
öö 
null
öö 
,
öö 
	IsSuccess
õõ 
=
õõ 
false
õõ !
,
õõ! "

StatusCode
úú 
=
úú 
$num
úú  
}
ùù 
;
ùù 
}
ûû 	
}
üü 
public
°° 

async
°° 
Task
°° 
<
°° 
ResponseDTO
°° !
>
°°! "
LockUser
°°# +
(
°°+ ,
LockUserDTO
°°, 7
lockUserDto
°°8 C
)
°°C D
{
¢¢ 
try
££ 
{
§§ 	
var
•• 
user
•• 
=
•• 
await
•• 
_userManager
•• )
.
••) *
FindByIdAsync
••* 7
(
••7 8
lockUserDto
••8 C
.
••C D
UserId
••D J
)
••J K
;
••K L
if
®® 
(
®® 
user
®® 
is
®® 
null
®® 
)
®® 
{
©© 
return
™™ 
new
™™ 
ResponseDTO
™™ &
(
™™& '
)
™™' (
{
´´ 
Message
¨¨ 
=
¨¨ 
$str
¨¨ 2
,
¨¨2 3
	IsSuccess
≠≠ 
=
≠≠ 
false
≠≠  %
,
≠≠% &

StatusCode
ÆÆ 
=
ÆÆ  
$num
ÆÆ! $
,
ÆÆ$ %
Result
ØØ 
=
ØØ 
null
ØØ !
}
∞∞ 
;
∞∞ 
}
±± 
var
≥≥ 
userRole
≥≥ 
=
≥≥ 
await
≥≥  
_userManager
≥≥! -
.
≥≥- .
GetRolesAsync
≥≥. ;
(
≥≥; <
user
≥≥< @
)
≥≥@ A
;
≥≥A B
if
µµ 
(
µµ 
userRole
µµ 
.
µµ 
Contains
µµ !
(
µµ! "
StaticUserRoles
µµ" 1
.
µµ1 2
Admin
µµ2 7
)
µµ7 8
)
µµ8 9
{
∂∂ 
return
∑∑ 
new
∑∑ 
ResponseDTO
∑∑ &
(
∑∑& '
)
∑∑' (
{
∏∏ 
Message
ππ 
=
ππ 
$str
ππ 4
,
ππ4 5
	IsSuccess
∫∫ 
=
∫∫ 
false
∫∫  %
,
∫∫% &

StatusCode
ªª 
=
ªª  
$num
ªª! $
,
ªª$ %
Result
ºº 
=
ºº 
null
ºº !
}
ΩΩ 
;
ΩΩ 
}
ææ 
user
¿¿ 
.
¿¿ 

LockoutEnd
¿¿ 
=
¿¿ 
DateTimeOffset
¿¿ ,
.
¿¿, -
MaxValue
¿¿- 5
;
¿¿5 6
var
¬¬ 
result
¬¬ 
=
¬¬ 
await
¬¬ 
_userManager
¬¬ +
.
¬¬+ ,
UpdateAsync
¬¬, 7
(
¬¬7 8
user
¬¬8 <
)
¬¬< =
;
¬¬= >
if
ƒƒ 
(
ƒƒ 
!
ƒƒ 
result
ƒƒ 
.
ƒƒ 
	Succeeded
ƒƒ !
)
ƒƒ! "
{
≈≈ 
return
∆∆ 
new
∆∆ 
ResponseDTO
∆∆ &
(
∆∆& '
)
∆∆' (
{
«« 
Message
»» 
=
»» 
$str
»» 4
,
»»4 5
	IsSuccess
…… 
=
…… 
false
……  %
,
……% &

StatusCode
   
=
    
$num
  ! $
,
  $ %
Result
ÀÀ 
=
ÀÀ 
null
ÀÀ !
}
ÃÃ 
;
ÃÃ 
}
ÕÕ 
return
œœ 
new
œœ 
ResponseDTO
œœ "
(
œœ" #
)
œœ# $
{
–– 
Message
—— 
=
—— 
$str
—— 2
,
——2 3
	IsSuccess
““ 
=
““ 
true
““  
,
““  !

StatusCode
”” 
=
”” 
$num
””  
,
””  !
Result
‘‘ 
=
‘‘ 
null
‘‘ 
}
’’ 
;
’’ 
}
÷÷ 	
catch
◊◊ 
(
◊◊ 
	Exception
◊◊ 
e
◊◊ 
)
◊◊ 
{
ÿÿ 	
return
ŸŸ 
new
ŸŸ 
ResponseDTO
ŸŸ "
(
ŸŸ" #
)
ŸŸ# $
{
⁄⁄ 
Message
€€ 
=
€€ 
e
€€ 
.
€€ 
Message
€€ #
,
€€# $
	IsSuccess
‹‹ 
=
‹‹ 
false
‹‹ !
,
‹‹! "

StatusCode
›› 
=
›› 
$num
››  
,
››  !
Result
ﬁﬁ 
=
ﬁﬁ 
null
ﬁﬁ 
}
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 	
}
·· 
public
„„ 

async
„„ 
Task
„„ 
<
„„ 
ResponseDTO
„„ !
>
„„! "

UnlockUser
„„# -
(
„„- .
LockUserDTO
„„. 9
lockUserDto
„„: E
)
„„E F
{
‰‰ 
try
ÂÂ 
{
ÊÊ 	
var
ÁÁ 
user
ÁÁ 
=
ÁÁ 
await
ÁÁ 
_userManager
ÁÁ )
.
ÁÁ) *
FindByIdAsync
ÁÁ* 7
(
ÁÁ7 8
lockUserDto
ÁÁ8 C
.
ÁÁC D
UserId
ÁÁD J
)
ÁÁJ K
;
ÁÁK L
if
ÈÈ 
(
ÈÈ 
user
ÈÈ 
is
ÈÈ 
null
ÈÈ 
)
ÈÈ 
{
ÍÍ 
return
ÎÎ 
new
ÎÎ 
ResponseDTO
ÎÎ &
(
ÎÎ& '
)
ÎÎ' (
{
ÏÏ 
Message
ÌÌ 
=
ÌÌ 
$str
ÌÌ 2
,
ÌÌ2 3
	IsSuccess
ÓÓ 
=
ÓÓ 
false
ÓÓ  %
,
ÓÓ% &

StatusCode
ÔÔ 
=
ÔÔ  
$num
ÔÔ! $
,
ÔÔ$ %
Result
 
=
 
null
 !
}
ÒÒ 
;
ÒÒ 
}
ÚÚ 
user
ÙÙ 
.
ÙÙ 

LockoutEnd
ÙÙ 
=
ÙÙ 
null
ÙÙ "
;
ÙÙ" #
var
ˆˆ 
result
ˆˆ 
=
ˆˆ 
await
ˆˆ 
_userManager
ˆˆ +
.
ˆˆ+ ,
UpdateAsync
ˆˆ, 7
(
ˆˆ7 8
user
ˆˆ8 <
)
ˆˆ< =
;
ˆˆ= >
if
¯¯ 
(
¯¯ 
!
¯¯ 
result
¯¯ 
.
¯¯ 
	Succeeded
¯¯ !
)
¯¯! "
{
˘˘ 
return
˙˙ 
new
˙˙ 
ResponseDTO
˙˙ &
(
˙˙& '
)
˙˙' (
{
˚˚ 
Message
¸¸ 
=
¸¸ 
$str
¸¸ 6
,
¸¸6 7
	IsSuccess
˝˝ 
=
˝˝ 
false
˝˝  %
,
˝˝% &

StatusCode
˛˛ 
=
˛˛  
$num
˛˛! $
,
˛˛$ %
Result
ˇˇ 
=
ˇˇ 
null
ˇˇ !
}
ÄÄ 
;
ÄÄ 
}
ÅÅ 
return
ÉÉ 
new
ÉÉ 
ResponseDTO
ÉÉ "
(
ÉÉ" #
)
ÉÉ# $
{
ÑÑ 
Message
ÖÖ 
=
ÖÖ 
$str
ÖÖ 4
,
ÖÖ4 5
	IsSuccess
ÜÜ 
=
ÜÜ 
true
ÜÜ  
,
ÜÜ  !

StatusCode
áá 
=
áá 
$num
áá  
,
áá  !
Result
àà 
=
àà 
null
àà 
}
ââ 
;
ââ 
}
ää 	
catch
ãã 
(
ãã 
	Exception
ãã 
e
ãã 
)
ãã 
{
åå 	
return
çç 
new
çç 
ResponseDTO
çç "
(
çç" #
)
çç# $
{
éé 
Message
èè 
=
èè 
e
èè 
.
èè 
Message
èè #
,
èè# $
	IsSuccess
êê 
=
êê 
false
êê !
,
êê! "

StatusCode
ëë 
=
ëë 
$num
ëë  
,
ëë  !
Result
íí 
=
íí 
null
íí 
}
ìì 
;
ìì 
}
îî 	
}
ïï 
public
óó 

async
óó 
Task
óó 
SendClearEmail
óó $
(
óó$ %
int
óó% (
	fromMonth
óó) 2
)
óó2 3
{
òò 
try
ôô 
{
öö 	
var
õõ 
fromDate
õõ 
=
õõ 
DateTime
õõ #
.
õõ# $
UtcNow
õõ$ *
.
õõ* +
	AddMonths
õõ+ 4
(
õõ4 5
-
õõ5 6
	fromMonth
õõ6 ?
)
õõ? @
;
õõ@ A
var
úú 
users
úú 
=
úú 
_userManager
úú $
.
úú$ %
Users
úú% *
.
ùù 
Where
ùù 
(
ùù 
user
ùù 
=>
ùù 
user
ùù #
.
ùù# $
LastLoginTime
ùù$ 1
<=
ùù2 4
fromDate
ùù5 =
||
ùù> @
user
ùùA E
.
ùùE F
LastLoginTime
ùùF S
==
ùùT V
null
ùùW [
)
ùù[ \
.
ûû 
ToList
ûû 
(
ûû 
)
ûû 
;
ûû 
var
†† 
admins
†† 
=
†† 
await
†† 
_userManager
†† +
.
††+ ,!
GetUsersInRoleAsync
††, ?
(
††? @
StaticUserRoles
††@ O
.
††O P
Admin
††P U
)
††U V
;
††V W
foreach
¢¢ 
(
¢¢ 
var
¢¢ 
admin
¢¢ 
in
¢¢ !
admins
¢¢" (
)
¢¢( )
{
££ 
users
§§ 
.
§§ 
Remove
§§ 
(
§§ 
admin
§§ "
)
§§" #
;
§§# $
}
•• 
if
ßß 
(
ßß 
users
ßß 
.
ßß 
IsNullOrEmpty
ßß #
(
ßß# $
)
ßß$ %
)
ßß% &
{
®® 
return
©© 
;
©© 
}
™™ 
var
¨¨ 
studentCourses
¨¨ 
=
¨¨  
await
¨¨! &
_unitOfWork
¨¨' 2
.
¨¨2 3%
StudentCourseRepository
¨¨3 J
.
¨¨J K
GetAllAsync
¨¨K V
(
¨¨V W
)
¨¨W X
;
¨¨X Y
var
≠≠ 
courses
≠≠ 
=
≠≠ 
await
≠≠ 
_unitOfWork
≠≠  +
.
≠≠+ ,
CourseRepository
≠≠, <
.
≠≠< =
GetAllAsync
≠≠= H
(
≠≠H I
)
≠≠I J
;
≠≠J K
foreach
ØØ 
(
ØØ 
var
ØØ 
studentCourse
ØØ &
in
ØØ' )
studentCourses
ØØ* 8
)
ØØ8 9
{
∞∞ 
var
±± 
student
±± 
=
±± 
await
±± #
_unitOfWork
±±$ /
.
±±/ 0
StudentRepository
±±0 A
.
≤≤ 
GetAsync
≤≤ 
(
≤≤ 
x
≤≤ 
=>
≤≤  "
x
≤≤# $
.
≤≤$ %
	StudentId
≤≤% .
==
≤≤/ 1
studentCourse
≤≤2 ?
.
≤≤? @
	StudentId
≤≤@ I
)
≤≤I J
;
≤≤J K
var
≥≥ 
user
≥≥ 
=
≥≥ 
await
≥≥  $
_userManagerRepository
≥≥! 7
.
≥≥7 8
FindByIdAsync
≥≥8 E
(
≥≥E F
student
≥≥F M
.
≥≥M N
UserId
≥≥N T
)
≥≥T U
;
≥≥U V
users
¥¥ 
.
¥¥ 
Remove
¥¥ 
(
¥¥ 
user
¥¥ !
)
¥¥! "
;
¥¥" #
}
µµ 
foreach
∑∑ 
(
∑∑ 
var
∑∑ 
course
∑∑ 
in
∑∑  "
courses
∑∑# *
)
∑∑* +
{
∏∏ 
var
ππ 

instructor
ππ 
=
ππ  
await
ππ! &
_unitOfWork
ππ' 2
.
ππ2 3"
InstructorRepository
ππ3 G
.
∫∫ 
GetAsync
∫∫ 
(
∫∫ 
x
∫∫ 
=>
∫∫  "
x
∫∫# $
.
∫∫$ %
InstructorId
∫∫% 1
==
∫∫2 4
course
∫∫5 ;
.
∫∫; <
InstructorId
∫∫< H
)
∫∫H I
;
∫∫I J
var
ªª 
user
ªª 
=
ªª 
await
ªª  $
_userManagerRepository
ªª! 7
.
ªª7 8
FindByIdAsync
ªª8 E
(
ªªE F

instructor
ªªF P
.
ªªP Q
UserId
ªªQ W
)
ªªW X
;
ªªX Y
users
ºº 
.
ºº 
Remove
ºº 
(
ºº 
user
ºº !
)
ºº! "
;
ºº" #
}
ΩΩ 
foreach
øø 
(
øø 
var
øø 
user
øø 
in
øø  
users
øø! &
)
øø& '
{
¿¿ 
if
¡¡ 
(
¡¡ 
user
¡¡ 
.
¡¡ 
Email
¡¡ 
is
¡¡ !
null
¡¡" &
)
¡¡& '
continue
¡¡( 0
;
¡¡0 1
var
¬¬ 
result
¬¬ 
=
¬¬ 
await
¬¬ "
_emailService
¬¬# 0
.
¬¬0 1*
SendEmailRemindDeleteAccount
¬¬1 M
(
¬¬M N
user
¬¬N R
.
¬¬R S
Email
¬¬S X
)
¬¬X Y
;
¬¬Y Z
if
√√ 
(
√√ 
result
√√ 
)
√√ 
{
ƒƒ 
user
≈≈ 
.
≈≈ 
SendClearEmail
≈≈ '
=
≈≈( )
true
≈≈* .
;
≈≈. /
await
∆∆ 
_userManager
∆∆ &
.
∆∆& '
UpdateAsync
∆∆' 2
(
∆∆2 3
user
∆∆3 7
)
∆∆7 8
;
∆∆8 9
}
«« 
}
»» 
}
…… 	
catch
   
(
   
	Exception
   
e
   
)
   
{
ÀÀ 	
Console
ÃÃ 
.
ÃÃ 
	WriteLine
ÃÃ 
(
ÃÃ 
e
ÃÃ 
)
ÃÃ  
;
ÃÃ  !
}
ÕÕ 	
}
ŒŒ 
public
–– 

async
–– 
Task
–– 
	ClearUser
–– 
(
––  
)
––  !
{
—— 
try
““ 
{
”” 	
var
‘‘ 
users
‘‘ 
=
‘‘ 
_userManager
‘‘ $
.
‘‘$ %
Users
‘‘% *
.
‘‘* +
Where
‘‘+ 0
(
‘‘0 1
user
‘‘1 5
=>
‘‘6 8
user
‘‘9 =
.
‘‘= >
SendClearEmail
‘‘> L
==
‘‘M O
true
‘‘P T
)
‘‘T U
.
‘‘U V
ToList
‘‘V \
(
‘‘\ ]
)
‘‘] ^
;
‘‘^ _
var
÷÷ 
students
÷÷ 
=
÷÷ 
new
÷÷ 
List
÷÷ #
<
÷÷# $
Student
÷÷$ +
>
÷÷+ ,
(
÷÷, -
)
÷÷- .
;
÷÷. /
var
◊◊ 
ordersHeaders
◊◊ 
=
◊◊ 
new
◊◊  #
List
◊◊$ (
<
◊◊( )
OrderHeader
◊◊) 4
>
◊◊4 5
(
◊◊5 6
)
◊◊6 7
;
◊◊7 8
var
ÿÿ 
ordersDetails
ÿÿ 
=
ÿÿ 
new
ÿÿ  #
List
ÿÿ$ (
<
ÿÿ( )
OrderDetails
ÿÿ) 5
>
ÿÿ5 6
(
ÿÿ6 7
)
ÿÿ7 8
;
ÿÿ8 9
var
ŸŸ 
ordersStatus
ŸŸ 
=
ŸŸ 
new
ŸŸ "
List
ŸŸ# '
<
ŸŸ' (
OrderStatus
ŸŸ( 3
>
ŸŸ3 4
(
ŸŸ4 5
)
ŸŸ5 6
;
ŸŸ6 7
var
⁄⁄ 
cartsHeaders
⁄⁄ 
=
⁄⁄ 
new
⁄⁄ "
List
⁄⁄# '
<
⁄⁄' (

CartHeader
⁄⁄( 2
>
⁄⁄2 3
(
⁄⁄3 4
)
⁄⁄4 5
;
⁄⁄5 6
var
€€ 
cartsDetails
€€ 
=
€€ 
new
€€ "
List
€€# '
<
€€' (
CartDetails
€€( 3
>
€€3 4
(
€€4 5
)
€€5 6
;
€€6 7
var
‹‹ 
studentsComments
‹‹  
=
‹‹! "
new
‹‹# &
List
‹‹' +
<
‹‹+ ,
StudentComment
‹‹, :
>
‹‹: ;
(
‹‹; <
)
‹‹< =
;
‹‹= >
var
›› 
coursesBookmarked
›› !
=
››" #
new
››$ '
List
››( ,
<
››, -
CourseBookmark
››- ;
>
››; <
(
››< =
)
››= >
;
››> ?
var
ﬂﬂ 
instructors
ﬂﬂ 
=
ﬂﬂ 
new
ﬂﬂ !
List
ﬂﬂ" &
<
ﬂﬂ& '

Instructor
ﬂﬂ' 1
>
ﬂﬂ1 2
(
ﬂﬂ2 3
)
ﬂﬂ3 4
;
ﬂﬂ4 5
var
‡‡ !
instructorsComments
‡‡ #
=
‡‡$ %
new
‡‡& )
List
‡‡* .
<
‡‡. /
InstructorComment
‡‡/ @
>
‡‡@ A
(
‡‡A B
)
‡‡B C
;
‡‡C D
var
··  
instructorsRatings
·· "
=
··# $
new
··% (
List
··) -
<
··- .
InstructorRating
··. >
>
··> ?
(
··? @
)
··@ A
;
··A B
foreach
„„ 
(
„„ 
var
„„ 
user
„„ 
in
„„  
users
„„! &
)
„„& '
{
‰‰ 
await
ÂÂ 
_emailService
ÂÂ #
.
ÂÂ# $$
SendEmailDeleteAccount
ÂÂ$ :
(
ÂÂ: ;
user
ÂÂ; ?
.
ÂÂ? @
Email
ÂÂ@ E
)
ÂÂE F
;
ÂÂF G
var
ÊÊ 
role
ÊÊ 
=
ÊÊ 
await
ÊÊ  
_userManager
ÊÊ! -
.
ÊÊ- .
GetRolesAsync
ÊÊ. ;
(
ÊÊ; <
user
ÊÊ< @
)
ÊÊ@ A
;
ÊÊA B
if
ËË 
(
ËË 
role
ËË 
.
ËË 
Contains
ËË !
(
ËË! "
StaticUserRoles
ËË" 1
.
ËË1 2

Instructor
ËË2 <
)
ËË< =
)
ËË= >
{
ÈÈ 
var
ÍÍ 

instructor
ÍÍ "
=
ÍÍ# $
await
ÍÍ% *
_unitOfWork
ÍÍ+ 6
.
ÍÍ6 7"
InstructorRepository
ÍÍ7 K
.
ÍÍK L
GetAsync
ÍÍL T
(
ÍÍT U
x
ÍÍU V
=>
ÍÍW Y
x
ÍÍZ [
.
ÍÍ[ \
UserId
ÍÍ\ b
==
ÍÍc e
user
ÍÍf j
.
ÍÍj k
Id
ÍÍk m
)
ÍÍm n
;
ÍÍn o
var
ÌÌ 
instructorComment
ÌÌ )
=
ÌÌ* +
await
ÌÌ, 1
_unitOfWork
ÌÌ2 =
.
ÌÌ= >)
InstructorCommentRepository
ÌÌ> Y
.
ÓÓ 
GetAllAsync
ÓÓ $
(
ÓÓ$ %
x
ÓÓ% &
=>
ÓÓ' )
x
ÓÓ* +
.
ÓÓ+ ,
InstructorId
ÓÓ, 8
==
ÓÓ9 ;

instructor
ÓÓ< F
.
ÓÓF G
InstructorId
ÓÓG S
)
ÓÓS T
;
ÓÓT U
var
ÒÒ 
instructorRating
ÒÒ (
=
ÒÒ) *
await
ÒÒ+ 0
_unitOfWork
ÒÒ1 <
.
ÒÒ< =(
InstructorRatingRepository
ÒÒ= W
.
ÚÚ 
GetAllAsync
ÚÚ $
(
ÚÚ$ %
x
ÚÚ% &
=>
ÚÚ' )
x
ÚÚ* +
.
ÚÚ+ ,
InstructorId
ÚÚ, 8
==
ÚÚ9 ;

instructor
ÚÚ< F
.
ÚÚF G
InstructorId
ÚÚG S
)
ÚÚS T
;
ÚÚT U
instructors
ÙÙ 
.
ÙÙ  
Add
ÙÙ  #
(
ÙÙ# $

instructor
ÙÙ$ .
)
ÙÙ. /
;
ÙÙ/ 0!
instructorsComments
ıı '
.
ıı' (
AddRange
ıı( 0
(
ıı0 1
instructorComment
ıı1 B
)
ııB C
;
ııC D 
instructorsRatings
ˆˆ &
.
ˆˆ& '
AddRange
ˆˆ' /
(
ˆˆ/ 0
instructorRating
ˆˆ0 @
)
ˆˆ@ A
;
ˆˆA B
}
˜˜ 
if
˘˘ 
(
˘˘ 
role
˘˘ 
.
˘˘ 
Contains
˘˘ !
(
˘˘! "
StaticUserRoles
˘˘" 1
.
˘˘1 2
Student
˘˘2 9
)
˘˘9 :
)
˘˘: ;
{
˙˙ 
var
˚˚ 
student
˚˚ 
=
˚˚  !
await
˚˚" '
_unitOfWork
˚˚( 3
.
˚˚3 4
StudentRepository
˚˚4 E
.
˚˚E F
GetAsync
˚˚F N
(
˚˚N O
x
˚˚O P
=>
˚˚Q S
x
˚˚T U
.
˚˚U V
UserId
˚˚V \
==
˚˚] _
user
˚˚` d
.
˚˚d e
Id
˚˚e g
)
˚˚g h
;
˚˚h i
students
¸¸ 
.
¸¸ 
Add
¸¸  
(
¸¸  !
student
¸¸! (
)
¸¸( )
;
¸¸) *
var
ÄÄ 
orderHeaders
ÄÄ $
=
ÄÄ% &
await
ÅÅ 
_unitOfWork
ÅÅ )
.
ÅÅ) *#
OrderHeaderRepository
ÅÅ* ?
.
ÅÅ? @
GetAllAsync
ÅÅ@ K
(
ÅÅK L
x
ÅÅL M
=>
ÅÅN P
x
ÅÅQ R
.
ÅÅR S
	StudentId
ÅÅS \
==
ÅÅ] _
student
ÅÅ` g
.
ÅÅg h
	StudentId
ÅÅh q
)
ÅÅq r
;
ÅÅr s
foreach
ÇÇ 
(
ÇÇ 
var
ÇÇ  
orderHeader
ÇÇ! ,
in
ÇÇ- /
orderHeaders
ÇÇ0 <
)
ÇÇ< =
{
ÉÉ 
var
ÑÑ 
orderDetails
ÑÑ (
=
ÑÑ) *
await
ÖÖ !
_unitOfWork
ÖÖ" -
.
ÖÖ- .$
OrderDetailsRepository
ÖÖ. D
.
ÖÖD E
GetAllAsync
ÖÖE P
(
ÖÖP Q
x
ÖÖQ R
=>
ÖÖS U
x
ÜÜ  !
.
ÜÜ! "
OrderHeaderId
ÜÜ" /
==
ÜÜ0 2
orderHeader
ÜÜ3 >
.
ÜÜ> ?
Id
ÜÜ? A
)
ÜÜA B
;
ÜÜB C
var
áá 
orderStatus
áá '
=
áá( )
await
àà !
_unitOfWork
àà" -
.
àà- .#
OrderStatusRepository
àà. C
.
ààC D
GetAllAsync
ààD O
(
ààO P
x
ààP Q
=>
ààR T
x
ààU V
.
ààV W
OrderHeaderId
ààW d
==
ààe g
orderHeader
ààh s
.
ààs t
Id
ààt v
)
ààv w
;
ààw x
ordersDetails
ââ %
.
ââ% &
AddRange
ââ& .
(
ââ. /
orderDetails
ââ/ ;
)
ââ; <
;
ââ< =
ordersStatus
ää $
.
ää$ %
AddRange
ää% -
(
ää- .
orderStatus
ää. 9
)
ää9 :
;
ää: ;
}
ãã 
ordersHeaders
çç !
.
çç! "
AddRange
çç" *
(
çç* +
orderHeaders
çç+ 7
)
çç7 8
;
çç8 9
var
êê 
courseBookmarks
êê '
=
êê( )
await
ëë 
_unitOfWork
ëë )
.
ëë) *&
CourseBookmarkRepository
ëë* B
.
ëëB C
GetAllAsync
ëëC N
(
ëëN O
x
ëëO P
=>
ëëQ S
x
ëëT U
.
ëëU V
	StudentId
ëëV _
==
ëë` b
student
ëëc j
.
ëëj k
	StudentId
ëëk t
)
ëët u
;
ëëu v
coursesBookmarked
íí %
.
íí% &
AddRange
íí& .
(
íí. /
courseBookmarks
íí/ >
)
íí> ?
;
íí? @
var
ïï 
studentComments
ïï '
=
ïï( )
await
ññ 
_unitOfWork
ññ )
.
ññ) *&
StudentCommentRepository
ññ* B
.
ññB C
GetAllAsync
ññC N
(
ññN O
x
ññO P
=>
ññQ S
x
ññT U
.
ññU V
	StudentId
ññV _
==
ññ` b
student
ññc j
.
ññj k
	StudentId
ññk t
)
ññt u
;
ññu v
studentsComments
óó $
.
óó$ %
AddRange
óó% -
(
óó- .
studentComments
óó. =
)
óó= >
;
óó> ?
var
öö 
cartHeaders
öö #
=
öö$ %
await
õõ 
_unitOfWork
õõ )
.
õõ) *"
CartHeaderRepository
õõ* >
.
õõ> ?
GetAllAsync
õõ? J
(
õõJ K
x
õõK L
=>
õõM O
x
õõP Q
.
õõQ R
	StudentId
õõR [
==
õõ\ ^
student
õõ_ f
.
õõf g
	StudentId
õõg p
)
õõp q
;
õõq r
foreach
úú 
(
úú 
var
úú  

cartHeader
úú! +
in
úú, .
cartHeaders
úú/ :
)
úú: ;
{
ùù 
var
ûû 
cartDetails
ûû '
=
ûû( )
await
üü !
_unitOfWork
üü" -
.
üü- .#
CartDetailsRepository
üü. C
.
üüC D
GetAllAsync
üüD O
(
üüO P
x
üüP Q
=>
üüR T
x
üüU V
.
üüV W
CartHeaderId
üüW c
==
üüd f

cartHeader
üüg q
.
üüq r
Id
üür t
)
üüt u
;
üüu v
cartsDetails
†† $
.
††$ %
AddRange
††% -
(
††- .
cartDetails
††. 9
)
††9 :
;
††: ;
}
°° 
cartsHeaders
££  
.
££  !
AddRange
££! )
(
££) *
cartHeaders
££* 5
)
££5 6
;
££6 7
}
§§ 
}
•• 
_unitOfWork
ßß 
.
ßß )
InstructorCommentRepository
ßß 3
.
ßß3 4
RemoveRange
ßß4 ?
(
ßß? @!
instructorsComments
ßß@ S
)
ßßS T
;
ßßT U
_unitOfWork
®® 
.
®® (
InstructorRatingRepository
®® 2
.
®®2 3
RemoveRange
®®3 >
(
®®> ? 
instructorsRatings
®®? Q
)
®®Q R
;
®®R S
_unitOfWork
™™ 
.
™™ &
StudentCommentRepository
™™ 0
.
™™0 1
RemoveRange
™™1 <
(
™™< =
studentsComments
™™= M
)
™™M N
;
™™N O
_unitOfWork
´´ 
.
´´ &
CourseBookmarkRepository
´´ 0
.
´´0 1
RemoveRange
´´1 <
(
´´< =
coursesBookmarked
´´= N
)
´´N O
;
´´O P
_unitOfWork
¨¨ 
.
¨¨ #
CartDetailsRepository
¨¨ -
.
¨¨- .
RemoveRange
¨¨. 9
(
¨¨9 :
cartsDetails
¨¨: F
)
¨¨F G
;
¨¨G H
_unitOfWork
≠≠ 
.
≠≠ "
CartHeaderRepository
≠≠ ,
.
≠≠, -
RemoveRange
≠≠- 8
(
≠≠8 9
cartsHeaders
≠≠9 E
)
≠≠E F
;
≠≠F G
_unitOfWork
ÆÆ 
.
ÆÆ #
OrderStatusRepository
ÆÆ -
.
ÆÆ- .
RemoveRange
ÆÆ. 9
(
ÆÆ9 :
ordersStatus
ÆÆ: F
)
ÆÆF G
;
ÆÆG H
_unitOfWork
ØØ 
.
ØØ $
OrderDetailsRepository
ØØ .
.
ØØ. /
RemoveRange
ØØ/ :
(
ØØ: ;
ordersDetails
ØØ; H
)
ØØH I
;
ØØI J
_unitOfWork
∞∞ 
.
∞∞ #
OrderHeaderRepository
∞∞ -
.
∞∞- .
RemoveRange
∞∞. 9
(
∞∞9 :
ordersHeaders
∞∞: G
)
∞∞G H
;
∞∞H I
_unitOfWork
≤≤ 
.
≤≤ "
InstructorRepository
≤≤ ,
.
≤≤, -
RemoveRange
≤≤- 8
(
≤≤8 9
instructors
≤≤9 D
)
≤≤D E
;
≤≤E F
_unitOfWork
≥≥ 
.
≥≥ 
StudentRepository
≥≥ )
.
≥≥) *
RemoveRange
≥≥* 5
(
≥≥5 6
students
≥≥6 >
)
≥≥> ?
;
≥≥? @
foreach
µµ 
(
µµ 
var
µµ 
user
µµ 
in
µµ  
users
µµ! &
)
µµ& '
{
∂∂ 
await
∑∑ +
DeleteUserAndRelatedDataAsync
∑∑ 3
(
∑∑3 4
user
∑∑4 8
)
∑∑8 9
;
∑∑9 :
}
∏∏ 
}
ππ 	
catch
∫∫ 
(
∫∫ 
	Exception
∫∫ 
e
∫∫ 
)
∫∫ 
{
ªª 	
Console
ºº 
.
ºº 
	WriteLine
ºº 
(
ºº 
e
ºº 
)
ºº  
;
ºº  !
}
ΩΩ 	
}
ææ 
private
¿¿ 
async
¿¿ 
Task
¿¿ +
DeleteUserAndRelatedDataAsync
¿¿ 4
(
¿¿4 5
ApplicationUser
¿¿5 D
user
¿¿E I
)
¿¿I J
{
¡¡ 
var
¬¬ 
roles
¬¬ 
=
¬¬ 
await
¬¬ 
_userManager
¬¬ &
.
¬¬& '
GetRolesAsync
¬¬' 4
(
¬¬4 5
user
¬¬5 9
)
¬¬9 :
;
¬¬: ;
if
√√ 

(
√√ 
roles
√√ 
.
√√ 
Any
√√ 
(
√√ 
)
√√ 
)
√√ 
{
ƒƒ 	
await
≈≈ 
_userManager
≈≈ 
.
≈≈ "
RemoveFromRolesAsync
≈≈ 3
(
≈≈3 4
user
≈≈4 8
,
≈≈8 9
roles
≈≈: ?
)
≈≈? @
;
≈≈@ A
}
∆∆ 	
var
»» 
claims
»» 
=
»» 
await
»» 
_userManager
»» '
.
»»' (
GetClaimsAsync
»»( 6
(
»»6 7
user
»»7 ;
)
»»; <
;
»»< =
if
…… 

(
…… 
claims
…… 
.
…… 
Any
…… 
(
…… 
)
…… 
)
…… 
{
   	
foreach
ÀÀ 
(
ÀÀ 
var
ÀÀ 
claim
ÀÀ 
in
ÀÀ !
claims
ÀÀ" (
)
ÀÀ( )
{
ÃÃ 
await
ÕÕ 
_userManager
ÕÕ "
.
ÕÕ" #
RemoveClaimAsync
ÕÕ# 3
(
ÕÕ3 4
user
ÕÕ4 8
,
ÕÕ8 9
claim
ÕÕ: ?
)
ÕÕ? @
;
ÕÕ@ A
}
ŒŒ 
}
œœ 	
var
—— 
logins
—— 
=
—— 
await
—— 
_userManager
—— '
.
——' (
GetLoginsAsync
——( 6
(
——6 7
user
——7 ;
)
——; <
;
——< =
if
““ 

(
““ 
logins
““ 
.
““ 
Any
““ 
(
““ 
)
““ 
)
““ 
{
”” 	
foreach
‘‘ 
(
‘‘ 
var
‘‘ 
login
‘‘ 
in
‘‘ !
logins
‘‘" (
)
‘‘( )
{
’’ 
await
÷÷ 
_userManager
÷÷ "
.
÷÷" #
RemoveLoginAsync
÷÷# 3
(
÷÷3 4
user
÷÷4 8
,
÷÷8 9
login
÷÷: ?
.
÷÷? @
LoginProvider
÷÷@ M
,
÷÷M N
login
÷÷O T
.
÷÷T U
ProviderKey
÷÷U `
)
÷÷` a
;
÷÷a b
}
◊◊ 
}
ÿÿ 	
var
⁄⁄ 
tokens
⁄⁄ 
=
⁄⁄ 
await
⁄⁄ 
_userManager
⁄⁄ '
.
⁄⁄' ()
GetAuthenticationTokenAsync
⁄⁄( C
(
⁄⁄C D
user
⁄⁄D H
,
⁄⁄H I
$str
⁄⁄J T
,
⁄⁄T U
$str
⁄⁄V \
)
⁄⁄\ ]
;
⁄⁄] ^
if
€€ 

(
€€ 
tokens
€€ 
!=
€€ 
null
€€ 
)
€€ 
{
‹‹ 	
await
›› 
_userManager
›› 
.
›› ,
RemoveAuthenticationTokenAsync
›› =
(
››= >
user
››> B
,
››B C
$str
››D N
,
››N O
$str
››P V
)
››V W
;
››W X
}
ﬁﬁ 	
var
‡‡ 
result
‡‡ 
=
‡‡ 
await
‡‡ 
_userManager
‡‡ '
.
‡‡' (
DeleteAsync
‡‡( 3
(
‡‡3 4
user
‡‡4 8
)
‡‡8 9
;
‡‡9 :
if
·· 

(
·· 
!
·· 
result
·· 
.
·· 
	Succeeded
·· 
)
·· 
{
‚‚ 	
foreach
„„ 
(
„„ 
var
„„ 
error
„„ 
in
„„ !
result
„„" (
.
„„( )
Errors
„„) /
)
„„/ 0
{
‰‰ 
Console
ÂÂ 
.
ÂÂ 
	WriteLine
ÂÂ !
(
ÂÂ! "
$"
ÂÂ" $
$str
ÂÂ$ 9
{
ÂÂ9 :
error
ÂÂ: ?
.
ÂÂ? @
Description
ÂÂ@ K
}
ÂÂK L
"
ÂÂL M
)
ÂÂM N
;
ÂÂN O
}
ÊÊ 
}
ÁÁ 	
}
ËË 
}ÈÈ ƒÒ
kD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Mappings\AutoMapperProfile.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Mappings %
;% &
public 
class 
AutoMapperProfile 
:  
Profile! (
{		 
public

 

AutoMapperProfile

 
(

 
)

 
{ 
	CreateMap 
< 
UserInfoDTO 
, 
ApplicationUser .
>. /
(/ 0
)0 1
.1 2

ReverseMap2 <
(< =
)= >
;> ?
	CreateMap 
< 
Category 
, 
CategoryDTO '
>' (
(( )
)) *
.* +

ReverseMap+ 5
(5 6
)6 7
;7 8
	CreateMap 
< 
Category 
, 
CreateCategoryDTO -
>- .
(. /
)/ 0
.0 1

ReverseMap1 ;
(; <
)< =
;= >
	CreateMap 
< 
CreateCategoryDTO #
,# $
Category% -
>- .
(. /
)/ 0
. 
	ForMember 
( 
dest 
=> 
dest #
.# $
Id$ &
,& '
opt( +
=> 
opt 
. 
MapFrom 
( 
src "
=># %
Guid& *
.* +
NewGuid+ 2
(2 3
)3 4
)4 5
)5 6
. 
	ForMember 
( 
dest 
=> 
dest #
.# $
ParentId$ ,
,, -
opt. 1
=> 
opt 
. 
MapFrom 
( 
src "
=># %
src& )
.) *
ParentId* 2
!=3 5
null6 :
?; <
Guid= A
.A B
ParseB G
(G H
srcH K
.K L
ParentIdL T
)T U
:V W
(X Y
GuidY ]
?] ^
)^ _
null_ c
)c d
)d e
. 

ReverseMap 
( 
) 
; 
	CreateMap 
< 
Category 
, 
UpdateCategoryDTO -
>- .
(. /
)/ 0
.0 1

ReverseMap1 ;
(; <
)< =
;= >
	CreateMap 
< 
Category 
, 
AdminCategoryDTO ,
>, -
(- .
). /
. 
	ForMember 
( 
dest 
=> 
dest #
.# $

ParentName$ .
,. /
opt0 3
=> 
opt 
. 
MapFrom 
( 
src "
=># %
src& )
.) *
ParentCategory* 8
.8 9
Name9 =
)= >
)> ?
.? @

ReverseMap@ J
(J K
)K L
;L M
	CreateMap 
< 
EmailTemplateDTO "
," #
EmailTemplateDTO$ 4
>4 5
(5 6
)6 7
. 
	ForMember 
( 
dest 
=> 
dest #
.# $
TemplateName$ 0
,0 1
opt2 5
=>   
opt   
.   
MapFrom   
(   
src   "
=>  # %
src  & )
.  ) *
TemplateName  * 6
)  6 7
)  7 8
.!! 
	ForMember!! 
(!! 
dest!! 
=>!! 
dest!! #
.!!# $

SenderName!!$ .
,!!. /
opt!!0 3
=>"" 
opt"" 
."" 
MapFrom"" 
("" 
src"" "
=>""# %
src""& )
."") *

SenderName""* 4
)""4 5
)""5 6
.## 
	ForMember## 
(## 
dest## 
=>## 
dest## #
.### $
SenderEmail##$ /
,##/ 0
opt##1 4
=>$$ 
opt$$ 
.$$ 
MapFrom$$ 
($$ 
src$$ "
=>$$# %
src$$& )
.$$) *
SenderEmail$$* 5
)$$5 6
)$$6 7
.%% 
	ForMember%% 
(%% 
dest%% 
=>%% 
dest%% #
.%%# $
Category%%$ ,
,%%, -
opt%%. 1
=>&& 
opt&& 
.&& 
MapFrom&& 
(&& 
src&& "
=>&&# %
src&&& )
.&&) *
Category&&* 2
)&&2 3
)&&3 4
.'' 
	ForMember'' 
('' 
dest'' 
=>'' 
dest'' #
.''# $
SubjectLine''$ /
,''/ 0
opt''1 4
=>(( 
opt(( 
.(( 
MapFrom(( 
((( 
src(( "
=>((# %
src((& )
.(() *
SubjectLine((* 5
)((5 6
)((6 7
.)) 
	ForMember)) 
()) 
dest)) 
=>)) 
dest)) #
.))# $
PreHeaderText))$ 1
,))1 2
opt))3 6
=>** 
opt** 
.** 
MapFrom** 
(** 
src** "
=>**# %
src**& )
.**) *
PreHeaderText*** 7
)**7 8
)**8 9
.++ 
	ForMember++ 
(++ 
dest++ 
=>++ 
dest++ #
.++# $
PersonalizationTags++$ 7
,++7 8
opt++9 <
=>,, 
opt,, 
.,, 
MapFrom,, 
(,, 
src,, "
=>,,# %
src,,& )
.,,) *
PersonalizationTags,,* =
),,= >
),,> ?
.-- 
	ForMember-- 
(-- 
dest-- 
=>-- 
dest-- #
.--# $
BodyContent--$ /
,--/ 0
opt--1 4
=>.. 
opt.. 
... 
MapFrom.. 
(.. 
src.. "
=>..# %
src..& )
...) *
BodyContent..* 5
)..5 6
)..6 7
.// 
	ForMember// 
(// 
dest// 
=>// 
dest// #
.//# $
FooterContent//$ 1
,//1 2
opt//3 6
=>00 
opt00 
.00 
MapFrom00 
(00 
src00 "
=>00# %
src00& )
.00) *
FooterContent00* 7
)007 8
)008 9
.11 
	ForMember11 
(11 
dest11 
=>11 
dest11 #
.11# $
CallToAction11$ 0
,110 1
opt112 5
=>22 
opt22 
.22 
MapFrom22 
(22 
src22 "
=>22# %
src22& )
.22) *
CallToAction22* 6
)226 7
)227 8
.33 
	ForMember33 
(33 
dest33 
=>33 
dest33 #
.33# $
Language33$ ,
,33, -
opt33. 1
=>44 
opt44 
.44 
MapFrom44 
(44 
src44 "
=>44# %
src44& )
.44) *
Language44* 2
)442 3
)443 4
.55 
	ForMember55 
(55 
dest55 
=>55 
dest55 #
.55# $
RecipientType55$ 1
,551 2
opt553 6
=>66 
opt66 
.66 
MapFrom66 
(66 
src66 "
=>66# %
src66& )
.66) *
RecipientType66* 7
)667 8
)668 9
.77 

ReverseMap77 
(77 
)77 
;77 
	CreateMap99 
<99 

Instructor99 
,99 !
InstructorInfoLiteDTO99 3
>993 4
(994 5
)995 6
.:: 
	ForMember:: 
(:: 
dest:: 
=>:: 
dest:: #
.::# $
FullName::$ ,
,::, -
opt::. 1
=>;; 
opt;; 
.;; 
MapFrom;; 
(;; 
src;; "
=>;;# %
src;;& )
.;;) *
ApplicationUser;;* 9
.;;9 :
FullName;;: B
);;B C
);;C D
.<< 
	ForMember<< 
(<< 
dest<< 
=><< 
dest<< #
.<<# $
Email<<$ )
,<<) *
opt<<+ .
=>== 
opt== 
.== 
MapFrom== 
(== 
src== "
=>==# %
src==& )
.==) *
ApplicationUser==* 9
.==9 :
Email==: ?
)==? @
)==@ A
.>> 
	ForMember>> 
(>> 
dest>> 
=>>> 
dest>> #
.>># $
PhoneNumber>>$ /
,>>/ 0
opt>>1 4
=>?? 
opt?? 
.?? 
MapFrom?? 
(?? 
src?? "
=>??# %
src??& )
.??) *
ApplicationUser??* 9
.??9 :
PhoneNumber??: E
)??E F
)??F G
.@@ 
	ForMember@@ 
(@@ 
dest@@ 
=>@@ 
dest@@ #
.@@# $
Gender@@$ *
,@@* +
opt@@, /
=>AA 
optAA 
.AA 
MapFromAA 
(AA 
srcAA "
=>AA# %
srcAA& )
.AA) *
ApplicationUserAA* 9
.AA9 :
GenderAA: @
)AA@ A
)AAA B
.BB 
	ForMemberBB 
(BB 
destBB 
=>BB 
destBB #
.BB# $
	BirthDateBB$ -
,BB- .
optBB/ 2
=>CC 
optCC 
.CC 
MapFromCC 
(CC 
srcCC "
=>CC# %
srcCC& )
.CC) *
ApplicationUserCC* 9
.CC9 :
	BirthDateCC: C
)CCC D
)CCD E
.DD 
	ForMemberDD 
(DD 
destDD 
=>DD 
destDD #
.DD# $

IsAcceptedDD$ .
,DD. /
optDD0 3
=>EE 
optEE 
.EE 
MapFromEE 
(EE 
srcEE "
=>EE# %
srcEE& )
.EE) *

IsAcceptedEE* 4
)EE4 5
)EE5 6
.FF 

ReverseMapFF 
(FF 
)FF 
;FF 
	CreateMapHH 
<HH 

InstructorHH 
,HH 
InstructorInfoDTOHH /
>HH/ 0
(HH0 1
)HH1 2
.II 
	ForMemberII 
(II 
destII 
=>II 
destII #
.II# $
InstructorIdII$ 0
,II0 1
optII2 5
=>JJ 
optJJ 
.JJ 
MapFromJJ 
(JJ 
srcJJ "
=>JJ# %
srcJJ& )
.JJ) *
InstructorIdJJ* 6
)JJ6 7
)JJ7 8
.KK 
	ForMemberKK 
(KK 
destKK 
=>KK 
destKK #
.KK# $
UserIdKK$ *
,KK* +
optKK, /
=>LL 
optLL 
.LL 
MapFromLL 
(LL 
srcLL "
=>LL# %
srcLL& )
.LL) *
UserIdLL* 0
)LL0 1
)LL1 2
.MM 
	ForMemberMM 
(MM 
destMM 
=>MM 
destMM #
.MM# $
FullNameMM$ ,
,MM, -
optMM. 1
=>NN 
optNN 
.NN 
MapFromNN 
(NN 
srcNN "
=>NN# %
srcNN& )
.NN) *
ApplicationUserNN* 9
.NN9 :
FullNameNN: B
)NNB C
)NNC D
.OO 
	ForMemberOO 
(OO 
destOO 
=>OO 
destOO #
.OO# $
EmailOO$ )
,OO) *
optOO+ .
=>PP 
optPP 
.PP 
MapFromPP 
(PP 
srcPP "
=>PP# %
srcPP& )
.PP) *
ApplicationUserPP* 9
.PP9 :
EmailPP: ?
)PP? @
)PP@ A
.QQ 
	ForMemberQQ 
(QQ 
destQQ 
=>QQ 
destQQ #
.QQ# $
PhoneNumberQQ$ /
,QQ/ 0
optQQ1 4
=>RR 
optRR 
.RR 
MapFromRR 
(RR 
srcRR "
=>RR# %
srcRR& )
.RR) *
ApplicationUserRR* 9
.RR9 :
PhoneNumberRR: E
)RRE F
)RRF G
.SS 
	ForMemberSS 
(SS 
destSS 
=>SS 
destSS #
.SS# $
GenderSS$ *
,SS* +
optSS, /
=>TT 
optTT 
.TT 
MapFromTT 
(TT 
srcTT "
=>TT# %
srcTT& )
.TT) *
ApplicationUserTT* 9
.TT9 :
GenderTT: @
)TT@ A
)TTA B
.UU 
	ForMemberUU 
(UU 
destUU 
=>UU 
destUU #
.UU# $
	BirthDateUU$ -
,UU- .
optUU/ 2
=>VV 
optVV 
.VV 
MapFromVV 
(VV 
srcVV "
=>VV# %
srcVV& )
.VV) *
ApplicationUserVV* 9
.VV9 :
	BirthDateVV: C
)VVC D
)VVD E
.WW 
	ForMemberWW 
(WW 
destWW 
=>WW 
destWW #
.WW# $
CountryWW$ +
,WW+ ,
optWW- 0
=>XX 
optXX 
.XX 
MapFromXX 
(XX 
srcXX "
=>XX# %
srcXX& )
.XX) *
ApplicationUserXX* 9
.XX9 :
CountryXX: A
)XXA B
)XXB C
.YY 
	ForMemberYY 
(YY 
destYY 
=>YY 
destYY #
.YY# $
AddressYY$ +
,YY+ ,
optYY- 0
=>ZZ 
optZZ 
.ZZ 
MapFromZZ 
(ZZ 
srcZZ "
=>ZZ# %
srcZZ& )
.ZZ) *
ApplicationUserZZ* 9
.ZZ9 :
AddressZZ: A
)ZZA B
)ZZB C
.[[ 
	ForMember[[ 
([[ 
dest[[ 
=>[[ 
dest[[ #
.[[# $
Degree[[$ *
,[[* +
opt[[, /
=>\\ 
opt\\ 
.\\ 
MapFrom\\ 
(\\ 
src\\ "
=>\\# %
src\\& )
.\\) *
Degree\\* 0
)\\0 1
)\\1 2
.]] 
	ForMember]] 
(]] 
dest]] 
=>]] 
dest]] #
.]]# $
Industry]]$ ,
,]], -
opt]]. 1
=>^^ 
opt^^ 
.^^ 
MapFrom^^ 
(^^ 
src^^ "
=>^^# %
src^^& )
.^^) *
Industry^^* 2
)^^2 3
)^^3 4
.__ 
	ForMember__ 
(__ 
dest__ 
=>__ 
dest__ #
.__# $
	TaxNumber__$ -
,__- .
opt__/ 2
=>`` 
opt`` 
.`` 
MapFrom`` 
(`` 
src`` "
=>``# %
src``& )
.``) *
ApplicationUser``* 9
.``9 :
	TaxNumber``: C
)``C D
)``D E
.aa 
	ForMemberaa 
(aa 
destaa 
=>aa 
destaa #
.aa# $

IsAcceptedaa$ .
,aa. /
optaa0 3
=>bb 
optbb 
.bb 
MapFrombb 
(bb 
srcbb "
=>bb# %
srcbb& )
.bb) *

IsAcceptedbb* 4
)bb4 5
)bb5 6
.cc 

ReverseMapcc 
(cc 
)cc 
;cc 
	CreateMapee 
<ee 
InstructorCommentee #
,ee# $
GetAllCommentsDTOee% 6
>ee6 7
(ee7 8
)ee8 9
.ee9 :

ReverseMapee: D
(eeD E
)eeE F
;eeF G
	CreateMapff 
<ff 
InstructorCommentff #
,ff# $&
CreateInstructorCommentDTOff% ?
>ff? @
(ff@ A
)ffA B
.ffB C

ReverseMapffC M
(ffM N
)ffN O
;ffO P
	CreateMapgg 
<gg 
InstructorCommentgg #
,gg# $&
UpdateInstructorCommentDTOgg% ?
>gg? @
(gg@ A
)ggA B
.ggB C

ReverseMapggC M
(ggM N
)ggN O
;ggO P
	CreateMapjj 
<jj 
CourseVersionjj 
,jj  
GetCourseVersionDTOjj! 4
>jj4 5
(jj5 6
)jj6 7
.kk 
	ForMemberkk 
(kk 
destkk 
=>kk 
destkk #
.kk# $
CategoryNamekk$ 0
,kk0 1
optkk2 5
=>kk6 8
optkk9 <
.kk< =
MapFromkk= D
(kkD E
srckkE H
=>kkI K
srckkL O
.kkO P
CategorykkP X
.kkX Y
NamekkY ]
)kk] ^
)kk^ _
.ll 
	ForMemberll 
(ll 
destll 
=>ll 
destll #
.ll# $
	LevelNamell$ -
,ll- .
optll/ 2
=>ll3 5
optll6 9
.ll9 :
MapFromll: A
(llA B
srcllB E
=>llF H
srcllI L
.llL M
LevelllM R
.llR S
NamellS W
)llW X
)llX Y
;llY Z
	CreateMapnn 
<nn 
CourseVersionStatusnn %
,nn% &%
GetCourseVersionStatusDTOnn' @
>nn@ A
(nnA B
)nnB C
.nnC D

ReverseMapnnD N
(nnN O
)nnO P
;nnP Q
	CreateMappp 
<pp  
CourseVersionCommentpp &
,pp& '
GetCourseCommnetDTOpp( ;
>pp; <
(pp< =
)pp= >
.qq 
	ForMemberqq 
(qq 
destqq 
=>qq 
destqq #
.qq# $
CourseVersionIdqq$ 3
,qq3 4
optqq5 8
=>qq9 ;
optqq< ?
.qq? @
MapFromqq@ G
(qqG H
srcqqH K
=>qqL N
srcqqO R
.qqR S
CourseVersionIdqqS b
)qqb c
)qqc d
.rr 
	ForMemberrr 
(rr 
destrr 
=>rr 
destrr #
.rr# $
Commentrr$ +
,rr+ ,
optrr- 0
=>rr1 3
optrr4 7
.rr7 8
MapFromrr8 ?
(rr? @
srcrr@ C
=>rrD F
srcrrG J
.rrJ K
CommentrrK R
)rrR S
)rrS T
.ss 
	ForMemberss 
(ss 
destss 
=>ss 
destss #
.ss# $
CreateByss$ ,
,ss, -
optss. 1
=>ss2 4
optss5 8
.ss8 9
MapFromss9 @
(ss@ A
srcssA D
=>ssE G
srcssH K
.ssK L
	CreatedByssL U
)ssU V
)ssV W
.tt 
	ForMembertt 
(tt 
desttt 
=>tt 
desttt #
.tt# $

CreateTimett$ .
,tt. /
opttt0 3
=>tt4 6
opttt7 :
.tt: ;
MapFromtt; B
(ttB C
srcttC F
=>ttG I
srcttJ M
.ttM N
CreatedTimettN Y
)ttY Z
)ttZ [
.uu 
	ForMemberuu 
(uu 
destuu 
=>uu 
destuu #
.uu# $
UpdateByuu$ ,
,uu, -
optuu. 1
=>uu2 4
optuu5 8
.uu8 9
MapFromuu9 @
(uu@ A
srcuuA D
=>uuE G
srcuuH K
.uuK L
	UpdatedByuuL U
)uuU V
)uuV W
.vv 
	ForMembervv 
(vv 
destvv 
=>vv 
destvv #
.vv# $

UpdateTimevv$ .
,vv. /
optvv0 3
=>vv4 6
optvv7 :
.vv: ;
MapFromvv; B
(vvB C
srcvvC F
=>vvG I
srcvvJ M
.vvM N
UpdatedTimevvN Y
)vvY Z
)vvZ [
.ww 
	ForMemberww 
(ww 
destww 
=>ww 
destww #
.ww# $
Statusww$ *
,ww* +
optww, /
=>ww0 2
optww3 6
.ww6 7
MapFromww7 >
(ww> ?
srcww? B
=>wwC E
srcwwF I
.wwI J
StatuswwJ P
)wwP Q
)wwQ R
.xx 

ReverseMapxx 
(xx 
)xx 
;xx 
	CreateMap{{ 
<{{ 
Course{{ 
,{{ 
GetCourseInfoDTO{{ *
>{{* +
({{+ ,
){{, -
.{{- .

ReverseMap{{. 8
({{8 9
){{9 :
;{{: ;
	CreateMap|| 
<|| 
Level|| 
,|| 
GetLevelDTO|| $
>||$ %
(||% &
)||& '
.||' (

ReverseMap||( 2
(||2 3
)||3 4
;||4 5
	CreateMap~~ 
<~~ 
Student~~ 
,~~ 
StudentInfoDTO~~ )
>~~) *
(~~* +
)~~+ ,
.~~, -

ReverseMap~~- 7
(~~7 8
)~~8 9
;~~9 :
	CreateMap 
< 
Student 
, 
StudentFullInfoDTO -
>- .
(. /
)/ 0
.
ÄÄ 
	ForMember
ÄÄ 
(
ÄÄ 
dest
ÄÄ 
=>
ÄÄ 
dest
ÄÄ #
.
ÄÄ# $
	StudentId
ÄÄ$ -
,
ÄÄ- .
opt
ÄÄ/ 2
=>
ÄÄ3 5
opt
ÄÄ6 9
.
ÄÄ9 :
MapFrom
ÄÄ: A
(
ÄÄA B
src
ÄÄB E
=>
ÄÄF H
src
ÄÄI L
.
ÄÄL M
	StudentId
ÄÄM V
)
ÄÄV W
)
ÄÄW X
.
ÅÅ 
	ForMember
ÅÅ 
(
ÅÅ 
dest
ÅÅ 
=>
ÅÅ 
dest
ÅÅ #
.
ÅÅ# $
UserId
ÅÅ$ *
,
ÅÅ* +
opt
ÅÅ, /
=>
ÅÅ0 2
opt
ÅÅ3 6
.
ÅÅ6 7
MapFrom
ÅÅ7 >
(
ÅÅ> ?
src
ÅÅ? B
=>
ÅÅC E
src
ÅÅF I
.
ÅÅI J
UserId
ÅÅJ P
)
ÅÅP Q
)
ÅÅQ R
.
ÇÇ 
	ForMember
ÇÇ 
(
ÇÇ 
dest
ÇÇ 
=>
ÇÇ 
dest
ÇÇ #
.
ÇÇ# $
FullName
ÇÇ$ ,
,
ÇÇ, -
opt
ÇÇ. 1
=>
ÇÇ2 4
opt
ÇÇ5 8
.
ÇÇ8 9
MapFrom
ÇÇ9 @
(
ÇÇ@ A
src
ÇÇA D
=>
ÇÇE G
src
ÇÇH K
.
ÇÇK L
ApplicationUser
ÇÇL [
.
ÇÇ[ \
FullName
ÇÇ\ d
)
ÇÇd e
)
ÇÇe f
.
ÉÉ 
	ForMember
ÉÉ 
(
ÉÉ 
dest
ÉÉ 
=>
ÉÉ 
dest
ÉÉ #
.
ÉÉ# $
Email
ÉÉ$ )
,
ÉÉ) *
opt
ÉÉ+ .
=>
ÉÉ/ 1
opt
ÉÉ2 5
.
ÉÉ5 6
MapFrom
ÉÉ6 =
(
ÉÉ= >
src
ÉÉ> A
=>
ÉÉB D
src
ÉÉE H
.
ÉÉH I
ApplicationUser
ÉÉI X
.
ÉÉX Y
Email
ÉÉY ^
)
ÉÉ^ _
)
ÉÉ_ `
.
ÑÑ 
	ForMember
ÑÑ 
(
ÑÑ 
dest
ÑÑ 
=>
ÑÑ 
dest
ÑÑ #
.
ÑÑ# $
PhoneNumber
ÑÑ$ /
,
ÑÑ/ 0
opt
ÑÑ1 4
=>
ÑÑ5 7
opt
ÑÑ8 ;
.
ÑÑ; <
MapFrom
ÑÑ< C
(
ÑÑC D
src
ÑÑD G
=>
ÑÑH J
src
ÑÑK N
.
ÑÑN O
ApplicationUser
ÑÑO ^
.
ÑÑ^ _
PhoneNumber
ÑÑ_ j
)
ÑÑj k
)
ÑÑk l
.
ÖÖ 
	ForMember
ÖÖ 
(
ÖÖ 
dest
ÖÖ 
=>
ÖÖ 
dest
ÖÖ #
.
ÖÖ# $
Gender
ÖÖ$ *
,
ÖÖ* +
opt
ÖÖ, /
=>
ÖÖ0 2
opt
ÖÖ3 6
.
ÖÖ6 7
MapFrom
ÖÖ7 >
(
ÖÖ> ?
src
ÖÖ? B
=>
ÖÖC E
src
ÖÖF I
.
ÖÖI J
ApplicationUser
ÖÖJ Y
.
ÖÖY Z
Gender
ÖÖZ `
)
ÖÖ` a
)
ÖÖa b
.
ÜÜ 
	ForMember
ÜÜ 
(
ÜÜ 
dest
ÜÜ 
=>
ÜÜ 
dest
ÜÜ #
.
ÜÜ# $
	BirthDate
ÜÜ$ -
,
ÜÜ- .
opt
ÜÜ/ 2
=>
ÜÜ3 5
opt
ÜÜ6 9
.
ÜÜ9 :
MapFrom
ÜÜ: A
(
ÜÜA B
src
ÜÜB E
=>
ÜÜF H
src
ÜÜI L
.
ÜÜL M
ApplicationUser
ÜÜM \
.
ÜÜ\ ]
	BirthDate
ÜÜ] f
)
ÜÜf g
)
ÜÜg h
.
áá 
	ForMember
áá 
(
áá 
dest
áá 
=>
áá 
dest
áá #
.
áá# $
Country
áá$ +
,
áá+ ,
opt
áá- 0
=>
áá1 3
opt
áá4 7
.
áá7 8
MapFrom
áá8 ?
(
áá? @
src
áá@ C
=>
ááD F
src
ááG J
.
ááJ K
ApplicationUser
ááK Z
.
ááZ [
Country
áá[ b
)
ááb c
)
áác d
.
àà 
	ForMember
àà 
(
àà 
dest
àà 
=>
àà 
dest
àà #
.
àà# $
Address
àà$ +
,
àà+ ,
opt
àà- 0
=>
àà1 3
opt
àà4 7
.
àà7 8
MapFrom
àà8 ?
(
àà? @
src
àà@ C
=>
ààD F
src
ààG J
.
ààJ K
ApplicationUser
ààK Z
.
ààZ [
Address
àà[ b
)
ààb c
)
ààc d
.
ââ 
	ForMember
ââ 
(
ââ 
dest
ââ 
=>
ââ 
dest
ââ #
.
ââ# $
	AvatarUrl
ââ$ -
,
ââ- .
opt
ââ/ 2
=>
ââ3 5
opt
ââ6 9
.
ââ9 :
MapFrom
ââ: A
(
ââA B
src
ââB E
=>
ââF H
src
ââI L
.
ââL M
ApplicationUser
ââM \
.
ââ\ ]
	AvatarUrl
ââ] f
)
ââf g
)
ââg h
.
ää 
	ForMember
ää 
(
ää 
dest
ää 
=>
ää 
dest
ää #
.
ää# $

University
ää$ .
,
ää. /
opt
ää0 3
=>
ää4 6
opt
ää7 :
.
ää: ;
MapFrom
ää; B
(
ääB C
src
ääC F
=>
ääG I
src
ääJ M
.
ääM N

University
ääN X
)
ääX Y
)
ääY Z
.
ãã 

ReverseMap
ãã 
(
ãã 
)
ãã 
;
ãã 
	CreateMap
èè 
<
èè 
StudentComment
èè  
,
èè  !
GetAllCommentsDTO
èè" 3
>
èè3 4
(
èè4 5
)
èè5 6
.
èè6 7

ReverseMap
èè7 A
(
èèA B
)
èèB C
;
èèC D
	CreateMap
êê 
<
êê 
StudentComment
êê  
,
êê  !%
CreateStudentCommentDTO
êê" 9
>
êê9 :
(
êê: ;
)
êê; <
.
êê< =

ReverseMap
êê= G
(
êêG H
)
êêH I
;
êêI J
	CreateMap
ëë 
<
ëë 
StudentComment
ëë  
,
ëë  !%
UpdateStudentCommentDTO
ëë" 9
>
ëë9 :
(
ëë: ;
)
ëë; <
.
ëë< =

ReverseMap
ëë= G
(
ëëG H
)
ëëH I
;
ëëI J
	CreateMap
ìì 
<
ìì 

CartHeader
ìì 
,
ìì 
CartHeaderDTO
ìì +
>
ìì+ ,
(
ìì, -
)
ìì- .
.
ìì. /

ReverseMap
ìì/ 9
(
ìì9 :
)
ìì: ;
;
ìì; <
	CreateMap
îî 
<
îî 
CartDetails
îî 
,
îî 
CartDetailsDTO
îî -
>
îî- .
(
îî. /
)
îî/ 0
.
îî0 1

ReverseMap
îî1 ;
(
îî; <
)
îî< =
;
îî= >
	CreateMap
óó 
<
óó 
OrderHeader
óó 
,
óó 
GetOrderHeaderDTO
óó 0
>
óó0 1
(
óó1 2
)
óó2 3
.
óó3 4

ReverseMap
óó4 >
(
óó> ?
)
óó? @
;
óó@ A
	CreateMap
òò 
<
òò 
OrderDetails
òò 
,
òò  
GetOrderDetailsDTO
òò  2
>
òò2 3
(
òò3 4
)
òò4 5
.
òò5 6

ReverseMap
òò6 @
(
òò@ A
)
òòA B
;
òòB C
	CreateMap
öö 
<
öö 
Transaction
öö 
,
öö 
GetTransactionDTO
öö 0
>
öö0 1
(
öö1 2
)
öö2 3
.
öö3 4

ReverseMap
öö4 >
(
öö> ?
)
öö? @
;
öö@ A
	CreateMap
úú 
<
úú 
CourseBookmark
úú  
,
úú  !%
CreateCourseBookmarkDTO
úú" 9
>
úú9 :
(
úú: ;
)
úú; <
.
úú< =

ReverseMap
úú= G
(
úúG H
)
úúH I
;
úúI J
	CreateMap
ûû 
<
ûû 
Company
ûû 
,
ûû 
UpdateCompanyDTO
ûû +
>
ûû+ ,
(
ûû, -
)
ûû- .
.
ûû. /

ReverseMap
ûû/ 9
(
ûû9 :
)
ûû: ;
;
ûû; <
	CreateMap
üü 
<
üü 
Privacy
üü 
,
üü 
CreatePrivacyDTO
üü +
>
üü+ ,
(
üü, -
)
üü- .
.
üü. /

ReverseMap
üü/ 9
(
üü9 :
)
üü: ;
;
üü; <
	CreateMap
†† 
<
†† 
Privacy
†† 
,
†† 
UpdatePrivacyDTO
†† +
>
††+ ,
(
††, -
)
††- .
.
††. /

ReverseMap
††/ 9
(
††9 :
)
††: ;
;
††; <
	CreateMap
°° 
<
°° 
	TermOfUse
°° 
,
°°  
CreateTermOfUseDTO
°° /
>
°°/ 0
(
°°0 1
)
°°1 2
.
°°2 3

ReverseMap
°°3 =
(
°°= >
)
°°> ?
;
°°? @
	CreateMap
¢¢ 
<
¢¢ 
	TermOfUse
¢¢ 
,
¢¢  
UpdateTermOfUseDTO
¢¢ /
>
¢¢/ 0
(
¢¢0 1
)
¢¢1 2
.
¢¢2 3

ReverseMap
¢¢3 =
(
¢¢= >
)
¢¢> ?
;
¢¢? @
}
££ 
}§§ ß

mD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ITransactionService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
ITransactionService $
{ 
Task 
< 	
ResponseDTO	 
> 
GetTransactions %
(		 
ClaimsPrincipal

 
User

 
,

 
string 
? 
userId 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
= 
$num 
, 
int 
pageSize 
= 
$num 
) 
; 
Task 
< 	
ResponseDTO	 
> 
CreateTransaction '
(' ( 
CreateTransactionDTO( < 
createTransactionDto= Q
)Q R
;R S
} §
gD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ITokenService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
ITokenService 
{ 
Task 
< 	
string	 
> '
GenerateJwtAccessTokenAsync ,
(, -
ApplicationUser- <
user= A
)A B
;B C
Task		 
<		 	
string			 
>		 (
GenerateJwtRefreshTokenAsync		 -
(		- .
ApplicationUser		. =
user		> B
)		B C
;		C D
Task

 
<

 	
bool

	 
>

 
StoreRefreshToken

  
(

  !
string

! '
userId

( .
,

. /
string

0 6
refreshToken

7 C
)

C D
;

D E
Task 
< 	
ClaimsPrincipal	 
> !
GetPrincipalFromToken /
(/ 0
string0 6
token7 <
)< =
;= >
Task 
< 	
string	 
>  
RetrieveRefreshToken %
(% &
string& ,
userId- 3
)3 4
;4 5
Task 
< 	
bool	 
> 
DeleteRefreshToken !
(! "
string" (
userId) /
)/ 0
;0 1
} Ç

kD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ITermOfUseService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
ITermOfUseService "
{ 
Task 
< 	
ResponseDTO	 
> 
GetTermOfUses #
(# $
)$ %
;% &
Task 
< 	
ResponseDTO	 
> 
GetTermOfUse "
(" #
Guid# '
id( *
)* +
;+ ,
Task		 
<		 	
ResponseDTO			 
>		 
CreateTermOfUse		 %
(		% &
CreateTermOfUseDTO		& 8
termOfUseDto		9 E
)		E F
;		F G
Task

 
<

 	
ResponseDTO

	 
>

 
UpdateTermOfUse

 %
(

% &
UpdateTermOfUseDTO

& 8
termOfUseDto

9 E
)

E F
;

F G
Task 
< 	
ResponseDTO	 
> 
DeleteTermOfUse %
(% &
Guid& *
id+ -
)- .
;. /
} Î 
jD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IStudentsService.cs
	namespace		 	
Cursus		
 
.		 
LMS		 
.		 
Service		 
.		 
IService		 %
{

 
public 

	interface 
IStudentsService %
{ 
Task 
< 
ResponseDTO 
> 
GetAllStudent '
( 
ClaimsPrincipal 
User 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
, 
int 
pageSize 
) 
; 
Task 
< 
ResponseDTO 
> 
GetById !
(! "
Guid" &
id' )
)) *
;* +
Task 
< 
ResponseDTO 
> 

UpdateById $
($ %
UpdateStudentDTO% 5
updateStudentDTO6 F
)F G
;G H
Task 
< 
ResponseDTO 
> 
ActivateStudent )
() *
ClaimsPrincipal* 9
User: >
,> ?
Guid@ D
	studentIdE N
)N O
;O P
Task 
< 
ResponseDTO 
> 
DeactivateStudent +
(+ ,
ClaimsPrincipal, ;
User< @
,@ A
GuidB F
	studentIdG P
)P Q
;Q R
Task 
< 
ResponseDTO 
> "
GetStudentTotalCourses 0
(0 1
Guid1 5
	studentId6 ?
)? @
;@ A
Task 
< 
ResponseDTO 
> #
GetAllCourseByStudentId 1
(1 2
Guid2 6
	studentId7 @
)@ A
;A B
Task 
< 
ResponseDTO 
> '
GetAllCourseStudentEnrolled 5
(5 6
Guid6 :
	studentId; D
)D E
;E F
Task 
< 
ResponseDTO 
>  
GetAllStudentComment .
(. /
Guid/ 3
	studentId4 =
,= >
int? B

pageNumberC M
,M N
intO R
pageSizeS [
)[ \
;\ ]
Task   
<   
ResponseDTO   
>    
CreateStudentComment   .
(  . /
ClaimsPrincipal  / >
User  ? C
,  C D#
CreateStudentCommentDTO  E \#
createStudentCommentDTO  ] t
)  t u
;  u v
Task!! 
<!! 
ResponseDTO!! 
>!!  
UpdateStudentComment!! .
(!!. /
ClaimsPrincipal!!/ >
User!!? C
,!!C D#
UpdateStudentCommentDTO!!E \#
updateStudentCommentDTO!!] t
)!!t u
;!!u v
Task"" 
<"" 
ResponseDTO"" 
>""  
DeleteStudentComment"" .
("". /
Guid""/ 3
	commentId""4 =
)""= >
;""> ?
Task## 
<## 
ResponseDTO## 
>## 
ExportStudents## (
(##( )
string##) /
userId##0 6
,##6 7
int##8 ;
month##< A
,##A B
int##C F
year##G K
)##K L
;##L M
Task$$ 
<$$  
ClosedXMLResponseDTO$$ !
>$$! "
DownloadStudents$$# 3
($$3 4
string$$4 :
fileName$$; C
)$$C D
;$$D E
Task%% 
<%% 
ResponseDTO%% 
>%% )
TotalPricesCoursesByStudentId%% 7
(%%7 8
Guid%%8 <
	studentId%%= F
)%%F G
;%%G H
}'' 
}(( é
uD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IStudentCourseStatusService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface '
IStudentCourseStatusService ,
{ 
Task 
< 	
ResponseDTO	 
> #
GetStudentCoursesStatus -
(- .
Guid. 2
studentCourseId3 B
)B C
;C D
Task		 
<		 	
ResponseDTO			 
>		 "
GetStudentCourseStatus		 ,
(		, -
Guid		- 1!
studentCourseStatusId		2 G
)		G H
;		H I
Task

 
<

 	
ResponseDTO

	 
>

 %
CreateStudentCourseStatus

 /
(

/ 0(
CreateStudentCourseStatusDTO

0 L(
createStudentCourseStatusDto

M i
)

i j
;

j k
} §
oD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IStudentCourseService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface !
IStudentCourseService &
{ 
Task 
< 	
ResponseDTO	 
> 
CreateStudentCourse )
() *
ClaimsPrincipal* 9
User: >
,> ?
EnrollCourseDTO@ O
enrollCourseDtoP _
)_ `
;` a
Task		 
<		 	
ResponseDTO			 
>		 
UpdateStudentCourse		 )
(		) *
ClaimsPrincipal		* 9
User		: >
,		> ?"
UpdateStudentCourseDTO		@ V"
updateStudentCourseDto		W m
)		m n
;		n o
}

 ú
hD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IStripeService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Service $
;$ %
public 
	interface 
IStripeService 
{ 
Task 
< 	
ResponseDTO	 
>  
CreatePaymentSession *
( "
CreateStripeSessionDTO		 "
createStripeSessionDto		 5
)

 
;

 
Task 
< 	
ResponseDTO	 
> "
ValidatePaymentSession ,
( $
ValidateStripeSessionDTO  $
validateStripeSessionDto! 9
) 
; 
Task 
< 	
ResponseDTO	 
> "
CreateConnectedAccount ,
( +
CreateStripeConnectedAccountDTO '+
createStripeConnectedAccountDto( G
) 
; 
Task 
< 	
ResponseDTO	 
> 
AddCard 
( 
AddStripeCardDTO 
addStripeCardDto )
) 
; 
Task 
< 	
ResponseDTO	 
> 
CreateTransfer $
( #
CreateStripeTransferDTO #
createStripeTransferDto  7
) 
; 
Task   
<   	
ResponseDTO  	 
>   
CreatePayout   "
(!! !
CreateStripePayoutDTO"" !
createStripePayoutDto"" 3
)## 
;## 
}$$ ß
wD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ISectionDetailsVersionService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface )
ISectionDetailsVersionService .
{ 
Task		 
<		 	
ResponseDTO			 
>		 '
CloneSectionsDetailsVersion		 1
(

 
ClaimsPrincipal 
User 
, *
CloneSectionsDetailsVersionDTO &*
cloneSectionsDetailsVersionDto' E
) 
; 
Task 
< 	
ResponseDTO	 
> &
GetSectionsDetailsVersions 0
( 
ClaimsPrincipal 
User 
, 
Guid 
? 
courseSectionId 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
, 
int 
pageSize 
) 
; 
Task 
< 	
ResponseDTO	 
> $
GetSectionDetailsVersion .
( 
ClaimsPrincipal 
User 
, 
Guid "
	detailsId# ,
) 
; 
Task   
<   	
ResponseDTO  	 
>   '
CreateSectionDetailsVersion   1
(!! 
ClaimsPrincipal"" 
User"" 
,"" *
CreateSectionDetailsVersionDTO## &*
createSectionDetailsVersionDto##' E
)$$ 
;$$ 
Task&& 
<&& 	
ResponseDTO&&	 
>&& %
EditSectionDetailsVersion&& /
('' 
ClaimsPrincipal(( 
User(( 
,(( (
EditSectionDetailsVersionDTO)) $(
editSectionDetailsVersionDto))% A
)** 
;** 
Task,, 
<,, 	
ResponseDTO,,	 
>,, '
RemoveSectionDetailsVersion,, 1
(-- 
ClaimsPrincipal.. 
User.. 
,.. 
Guid// 
	detailsId// 
)00 
;00 
Task22 
<22 	
ResponseDTO22	 
>22 .
"UploadSectionDetailsVersionContent22 8
(33 
ClaimsPrincipal44 
User44 
,44 
Guid55 
	detailsId55 
,55 1
%UploadSectionDetailsVersionContentDTO66 -1
%uploadSectionDetailsVersionContentDto66. S
)77 
;77 
Task99 
<99 	
ContentResponseDTO99	 
>99 /
#DisplaySectionDetailsVersionContent99 @
(:: 
Guid;; #
sectionDetailsVersionId;; $
,;;$ %
string<< 
userId<< 
,<< 
string== 
type== 
)>> 
;>> 
}?? Ì	
iD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IPrivacyService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IPrivacyService  
{ 
Task 
< 	
ResponseDTO	 
> 
GetPrivacies "
(" #
)# $
;$ %
Task 
< 	
ResponseDTO	 
> 

GetPrivacy  
(  !
Guid! %
id& (
)( )
;) *
Task		 
<		 	
ResponseDTO			 
>		 
CreatePrivacy		 #
(		# $
CreatePrivacyDTO		$ 4

privacyDto		5 ?
)		? @
;		@ A
Task

 
<

 	
ResponseDTO

	 
>

 
UpdatePrivacy

 #
(

# $
UpdatePrivacyDTO

$ 4

privacyDto

5 ?
)

? @
;

@ A
Task 
< 	
ResponseDTO	 
> 
DeletePrivacy #
(# $
Guid$ (
id) +
)+ ,
;, -
} ´
gD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IRedisService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IRedisService 
{ 
Task 
< 	
bool	 
> 
StoreString 
( 
string !
key" %
,% &
string' -
value. 3
)3 4
;4 5
Task 
< 	
string	 
> 
RetrieveString 
(  
string  &
key' *
)* +
;+ ,
Task 
< 	
bool	 
> 
DeleteString 
( 
string "
key# &
)& '
;' (
} °
iD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IPaymentService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IPaymentService  
{ 
Task 
< 	
ResponseDTO	 
> (
CreateStripeConnectedAccount 2
(		 
ClaimsPrincipal

 
User

 
,

 +
CreateStripeConnectedAccountDTO '+
createStripeConnectedAccountDto( G
) 
; 
Task 
< 	
ResponseDTO	 
>  
CreateStripeTransfer *
(* +#
CreateStripeTransferDTO+ B#
createStripeTransferDtoC Z
)Z [
;[ \
Task 
< 	
ResponseDTO	 
> 
AddStripeCard #
(# $
AddStripeCardDTO$ 4
addStripeCardDto5 E
)E F
;F G
Task 
< 	
ResponseDTO	 
> 
CreateStripePayout (
(( )
ClaimsPrincipal) 8
User9 =
,= >!
CreateStripePayoutDTO? T!
createStripePayoutDtoU j
)j k
;k l
Task 
< 	
ResponseDTO	 
> '
GetLeastInstructorsByPayout 1
(1 2
int2 5
topN6 :
,: ;
int< ?
?? @

filterYearA K
,K L
intM P
?P Q
filterMonthR ]
,] ^
int_ b
?b c
filterQuarterd q
)q r
;r s
Task 
< 	
ResponseDTO	 
> %
GetTopInstructorsByPayout /
(/ 0
int0 3
topN4 8
,8 9
int: =
?= >

filterYear? I
,I J
intK N
?N O
filterMonthP [
,[ \
int] `
?` a
filterQuarterb o
)o p
;p q
} ä
mD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IOrderStatusService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IOrderStatusService $
{ 
Task 
< 	
ResponseDTO	 
> 
GetOrdersStatus %
(% &
Guid& *
orderHeaderId+ 8
)8 9
;9 :
Task		 
<		 	
ResponseDTO			 
>		 
GetOrderStatus		 $
(		$ %
Guid		% )
orderStatusId		* 7
)		7 8
;		8 9
Task

 
<

 	
ResponseDTO

	 
>

 
CreateOrderStatus

 '
(

' (
ClaimsPrincipal

( 7
User

8 <
,

< = 
CreateOrderStatusDTO

> R 
createOrderStatusDto

S g
)

g h
;

h i
} í
gD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IOrderService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IOrderService 
{ 
Task 
< 	
ResponseDTO	 
> 
CreateOrder !
(		 
ClaimsPrincipal

 
User

 
) 
; 
Task 
< 	
ResponseDTO	 
> 
	GetOrders 
( 
ClaimsPrincipal 
User 
, 
Guid 
? 
	studentId 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
= 
$num 
, 
int 
pageSize 
= 
$num 
) 
; 
Task 
< 	
ResponseDTO	 
> 
GetOrder 
( 
ClaimsPrincipal 
User 
, 
Guid 
orderHeaderId 
) 
; 
Task 
< 	
ResponseDTO	 
> 
PayWithStripe #
(   
ClaimsPrincipal!! 
User!! 
,!! 
PayWithStripeDTO"" 
payWithStripeDto"" )
)## 
;## 
Task%% 
<%% 	
ResponseDTO%%	 
>%% 
ValidateWithStripe%% (
(&& 
ClaimsPrincipal'' 
User'' 
,'' !
ValidateWithStripeDTO(( !
validateWithStripeDto(( 3
))) 
;)) 
Task++ 
<++ 	
ResponseDTO++	 
>++ 
ConfirmOrder++ "
(++" #
ClaimsPrincipal++# 2
User++3 7
,++7 8
Guid++9 =
orderHeaderId++> K
)++K L
;++L M
},, ˆ
nD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\INotificationService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface  
INotificationService %
{ 
} Â
gD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ILevelService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
ILevelService 
{ 
Task 
< 	
ResponseDTO	 
> 
	GetLevels 
(		 
ClaimsPrincipal

 
User

 
,

 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
= 
$num 
, 
int 
pageSize 
= 
$num 
) 
; 
Task 
< 	
ResponseDTO	 
> 
GetLevel 
( 
ClaimsPrincipal .
User/ 3
,3 4
Guid5 9
levelId: A
)A B
;B C
Task 
< 	
ResponseDTO	 
> 
CreateLevel !
(! "
ClaimsPrincipal" 1
User2 6
,6 7
CreateLevelDTO8 F
createLevelDtoG U
)U V
;V W
Task 
< 	
ResponseDTO	 
> 
UpdateLevel !
(! "
ClaimsPrincipal" 1
User2 6
,6 7
UpdateLevelDTO8 F
updateLevelDtoG U
)U V
;V W
Task 
< 	
ResponseDTO	 
> 
DeleteLevel !
(! "
ClaimsPrincipal" 1
User2 6
,6 7
Guid8 <
levelId= D
)D E
;E F
} Ú 
lD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IInstructorService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IInstructorService #
{ 
Task		 
<		 	
ResponseDTO			 
>		 
GetAll		 
(

 
ClaimsPrincipal 
User 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
, 
int 
pageSize 
) 
; 
Task 
< 	
ResponseDTO	 
> 
GetById 
( 
Guid "
id# %
)% &
;& '
Task 
< 	
ResponseDTO	 
> 

UpdateById  
(  !
UpdateInstructorDTO! 4
updateInstructorDto5 H
)H I
;I J
Task 
< 	
ResponseDTO	 
> 
AcceptInstructor &
(& '
ClaimsPrincipal' 6
User7 ;
,; <
Guid= A
idB D
)D E
;E F
Task 
< 	
ResponseDTO	 
> 
RejectInstructor &
(& '
ClaimsPrincipal' 6
User7 ;
,; <
Guid= A
idB D
)D E
;E F
Task 
< 	
ResponseDTO	 
> %
GetInstructorTotalCourses /
(/ 0
Guid0 4
instructorId5 A
)A B
;B C
Task 
< 	
ResponseDTO	 
> $
GetInstructorTotalRating .
(. /
Guid/ 3
instructorId4 @
)@ A
;A B
Task 
< 	
ResponseDTO	 
> $
GetInstructorEarnedMoney .
(. /
Guid/ 3
instructorId4 @
)@ A
;A B
Task 
< 	
ResponseDTO	 
> $
GetInstructorPayoutMoney .
(. /
Guid/ 3
instructorId4 @
)@ A
;A B
Task 
< 	
ResponseDTO	 
> #
GetAllInstructorComment -
(- .
Guid. 2
instructorId3 ?
,? @
intA D

pageNumberE O
,O P
intQ T
pageSizeU ]
)] ^
;^ _
Task 
< 	
ResponseDTO	 
> #
CreateInstructorComment -
(- .
ClaimsPrincipal. =
User> B
,B C&
CreateInstructorCommentDTOD ^#
createInstructorComment_ v
)v w
;w x
Task 
< 	
ResponseDTO	 
> #
UpdateInstructorComment -
(- .
ClaimsPrincipal. =
User> B
,B C&
UpdateInstructorCommentDTOD ^#
updateInstructorComment_ v
)v w
;w x
Task   
<   	
ResponseDTO  	 
>   #
DeleteInstructorComment   -
(  - .
Guid  . 2
	commentId  3 <
)  < =
;  = >
Task!! 
<!! 	
ResponseDTO!!	 
>!! 
ExportInstructors!! '
(!!' (
string!!( .
userId!!/ 5
,!!5 6
int!!7 :
month!!; @
,!!@ A
int!!B E
year!!F J
)!!J K
;!!K L
Task"" 
<"" 	 
ClosedXMLResponseDTO""	 
>"" 
DownloadInstructors"" 2
(""2 3
string""3 9
fileName"": B
)""B C
;""C D
}## ‘
jD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IFirebaseService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IFirebaseService !
{ 
Task		 
<		 	
ResponseDTO			 
>		 
UploadImage		 !
(		! "
	IFormFile		" +
file		, 0
,		0 1
string		2 8
folder		9 ?
)		? @
;		@ A
Task

 
<

 	
MemoryStream

	 
>

 
GetImage

 
(

  
string

  &
filePath

' /
)

/ 0
;

0 1
Task 
< 	
ResponseDTO	 
> 
UploadVideo !
(! "
	IFormFile" +
file, 0
,0 1
Guid2 6
?6 7
courseId8 @
)@ A
;A B
Task 
< 	
ResponseDTO	 
> 
UploadSlide !
(! "
	IFormFile" +
file, 0
,0 1
Guid2 6
?6 7
courseId8 @
)@ A
;A B
Task 
< 	
ResponseDTO	 
> 
	UploadDoc 
(  
	IFormFile  )
file* .
,. /
Guid0 4
?4 5
courseId6 >
)> ?
;? @
Task 
< 	
MemoryStream	 
> 

GetContent !
(! "
string" (
?( )
filePath* 2
)2 3
;3 4
} À#
gD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IEmailService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IEmailService 
{ 
Task		 
<		 	
ResponseDTO			 
>		 
GetAll		 
(

 
ClaimsPrincipal 
User 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
, 
int 
pageSize 
) 
; 
Task 
< 	
bool	 
> 
SendEmailAsync 
( 
string $
toEmail% ,
,, -
string. 4
subject5 <
,< =
string> D
bodyE I
)I J
;J K
Task 
< 	
bool	 
> (
SendEmailInactiveCourseAsync +
(+ ,
string, 2
instructorEmail3 B
,B C
stringD J
studentEmailK W
,W X
stringY _
subject` g
,g h
stringi o
bodyp t
)t u
;u v
Task 
< 	
bool	 
> 
SendEmailResetAsync "
(" #
string# )
toEmail* 1
,1 2
string3 9
subject: A
,A B
ApplicationUserC R
userS W
,W X
stringY _
currentDate` k
,k l
string 
	resetLink 
, 
string 
operatingSystem 
, 
string  &
browser' .
,. /
string0 6
ip7 9
,9 :
string; A
regionB H
,H I
stringJ P
cityQ U
,U V
stringW ]
country^ e
)e f
;f g
Task 
< 	
bool	 
> +
SendEmailForAdminAboutNewCourse .
(. /
string/ 5
toMail6 <
)< =
;= >
Task 
< 	
bool	 
> 2
&SendEmailForStudentAboutCompleteCourse 5
(5 6
string6 <
toMail= C
)C D
;D E
Task 
< 	
bool	 
> 7
+SendApproveEmailForInstructorAboutNewCourse :
(: ;
string; A
toMailB H
)H I
;I J
Task 
< 	
bool	 
> 6
*SendRejectEmailForInstructorAboutNewCourse 9
(9 :
string: @
toMailA G
)G H
;H I
Task 
< 	
bool	 
> 
SendVerifyEmail 
( 
string %
toMail& ,
,, -
string. 4
confirmationLink5 E
)E F
;F G
Task!! 
<!! 	
bool!!	 
>!! #
SendEmailInactiveCourse!! &
(!!& '
string!!' -
instructorEmail!!. =
,!!= >
string!!? E
instructorName!!F T
,!!T U
string!!V \
courseTitle!!] h
,!!h i
List"" 
<"" 
string"" 
>"" 
studentEmails"" "
)""" #
;""# $
Task$$ 
<$$ 	
bool$$	 
>$$ (
SendEmailRemindDeleteAccount$$ +
($$+ ,
string$$, 2
toMail$$3 9
)$$9 :
;$$: ;
Task%% 
<%% 	
bool%%	 
>%% "
SendEmailDeleteAccount%% %
(%%% &
string%%& ,
toMail%%- 3
)%%3 4
;%%4 5
Task&& 
<&& 	
bool&&	 
>&& ,
 SendEmailToInstructorAfterPayout&& /
(&&/ 0
string&&0 6
toMail&&7 =
,&&= >
double&&? E
PayoutAmount&&F R
,&&R S
DateTime&&T \
TransactionDate&&] l
)&&l m
;&&m n
}'' Æ
fD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IEmailSender.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IEmailSender 
{ 
Task -
!SendSubmittedCourseEmailForAdmins	 *
(* +
)+ ,
;, -
Task 0
$SendRejectedCourseEmailForInstructor	 -
(- .
Guid. 2
courseVersionId3 B
)B C
;C D
Task 0
$SendAcceptedCourseEmailForInstructor	 -
(- .
Guid. 2
courseVersionId3 B
)B C
;C D
Task 1
%SendDeactivatedCourseEmailForStudents	 .
(. /
Guid/ 3
courseId4 <
)< =
;= >
}		 ·
uD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ICourseVersionStatusService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface '
ICourseVersionStatusService ,
{ 
Task		 
<		 	
ResponseDTO			 
>		 #
GetCourseVersionsStatus		 -
(

 
ClaimsPrincipal 
User 
, 
Guid 
? 
courseVersionId 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
, 
int 
pageSize 
) 
; 
Task 
< 	
ResponseDTO	 
> "
GetCourseVersionStatus ,
( 
ClaimsPrincipal 
User 
, 
Guid !
courseVersionStatusId "
) 
; 
Task 
< 	
ResponseDTO	 
> %
CreateCourseVersionStatus /
( 
ClaimsPrincipal 
User 
, (
CreateCourseVersionStatusDTO $"
courseVersionStatusDto% ;
) 
; 
}   Ë-
oD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ICourseVersionService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface !
ICourseVersionService &
{ 
Task 
< 	
ResponseDTO	 
> 
GetCourseVersions '
( 
ClaimsPrincipal 
User 
, 
Guid 
? 
courseId 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
, 
int   
pageSize   
)!! 
;!! 
Task** 
<** 	
ResponseDTO**	 
>** 
GetCourseVersion** &
(++ 
ClaimsPrincipal,, 
User,, 
,,, 
Guid-- 
courseVersionId-- 
).. 
;.. 
Task66 
<66 	
ResponseDTO66	 
>66 "
CreateCourseAndVersion66 ,
(77 
ClaimsPrincipal88 
User88 
,88 (
CreateNewCourseAndVersionDTO99 $(
createNewCourseAndVersionDto99% A
):: 
;:: 
TaskCC 
<CC 	
ResponseDTOCC	 
>CC 
CloneCourseVersionCC (
(DD 
ClaimsPrincipalEE 
UserEE 
,EE !
CloneCourseVersionDTOFF !
cloneCourseVersionDtoFF 3
)GG 
;GG 
TaskII 
<II 	
ResponseDTOII	 
>II 
RemoveCourseVersionII )
(II) *
ClaimsPrincipalII* 9
UserII: >
,II> ?
GuidII@ D
courseVersionIdIIE T
)IIT U
;IIU V
TaskJJ 
<JJ 	
ResponseDTOJJ	 
>JJ 
EditCourseVersionJJ '
(JJ' (
ClaimsPrincipalJJ( 7
UserJJ8 <
,JJ< = 
EditCourseVersionDTOJJ> R 
editCourseVersionDtoJJS g
)JJg h
;JJh i
TaskKK 
<KK 	
ResponseDTOKK	 
>KK 
AcceptCourseVersionKK )
(KK) *
ClaimsPrincipalKK* 9
UserKK: >
,KK> ?
GuidKK@ D
courseVersionIdKKE T
)KKT U
;KKU V
TaskLL 
<LL 	
ResponseDTOLL	 
>LL 
RejectCourseVersionLL )
(LL) *
ClaimsPrincipalLL* 9
UserLL: >
,LL> ?
GuidLL@ D
courseVersionIdLLE T
)LLT U
;LLU V
TaskMM 
<MM 	
ResponseDTOMM	 
>MM 
SubmitCourseVersionMM )
(MM) *
ClaimsPrincipalMM* 9
UserMM: >
,MM> ?
GuidMM@ D
courseVersionIdMME T
)MMT U
;MMU V
TaskNN 
<NN 	
ResponseDTONN	 
>NN 
MergeCourseVersionNN (
(NN( )
ClaimsPrincipalNN) 8
UserNN9 =
,NN= >
GuidNN? C
courseVersionIdNND S
)NNS T
;NNT U
TaskPP 
<PP 	
ResponseDTOPP	 
>PP %
GetCourseVersionsCommentsPP /
(QQ 
ClaimsPrincipalRR 
UserRR 
,RR 
GuidSS 
?SS 
courseVersionIdSS 
,SS 
stringTT 
?TT 
filterOnTT 
,TT 
stringUU 
?UU 
filterQueryUU 
,UU 
stringVV 
?VV 
sortByVV 
,VV 
intWW 

pageNumberWW 
,WW 
intXX 
pageSizeXX 
)YY 
;YY 
Task[[ 
<[[ 	
ResponseDTO[[	 
>[[ #
GetCourseVersionComment[[ -
(\\ 
ClaimsPrincipal]] 
User]] 
,]] 
Guid^^ "
courseVersionCommentId^^ #
)__ 
;__ 
Taskaa 
<aa 	
ResponseDTOaa	 
>aa &
CreateCourseVersionCommentaa 0
(bb 
ClaimsPrincipalcc 
Usercc 
,cc *
CreateCourseVersionCommentsDTOdd &*
createCourseVersionCommentsDTOdd' E
)ee 
;ee 
Taskgg 
<gg 	
ResponseDTOgg	 
>gg $
EditCourseVersionCommentgg .
(hh 
ClaimsPrincipalii 
Userii 
,ii (
EditCourseVersionCommentsDTOjj $(
editCourseVersionCommentsDTOjj% A
)kk 
;kk 
Taskmm 
<mm 	
ResponseDTOmm	 
>mm &
RemoveCourseVersionCommentmm 0
(nn 
ClaimsPrincipaloo 
Useroo 
,oo 
Guidpp 
	commentIdpp 
)qq 
;qq 
Taskss 
<ss 	
ResponseDTOss	 
>ss ,
 UploadCourseVersionBackgroundImgss 6
(tt 
ClaimsPrincipaluu 
Useruu 
,uu 
Guidvv 
courseVersionIdvv 
,vv ,
 UploadCourseVersionBackgroundImgww (,
 uploadCourseVersionBackgroundImgww) I
)xx 
;xx 
Taskzz 
<zz 	
MemoryStreamzz	 
>zz -
!DisplayCourseVersionBackgroundImgzz 8
({{ 
ClaimsPrincipal|| 
User|| 
,|| 
Guid}} 
courseVersionId}} 
)~~ 
;~~ 
} ‚*
hD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ICourseService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
ICourseService 
{ 
Task 
< 	
ResponseDTO	 
> 
CreateFrameCourse '
(' (
ClaimsPrincipal( 7
User8 <
,< =
Guid> B
courseVersionIdC R
)R S
;S T
Task 
< 	
ResponseDTO	 
> 

GetCourses  
( 
ClaimsPrincipal 
User 
, 
Guid 
? 
instructorId 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
double 
? 
	fromPrice 
, 
double 
? 
toPrice 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
, 
int 
pageSize 
) 
; 
Task 
< 	
ResponseDTO	 
> 
	GetCourse 
( 
ClaimsPrincipal   
User   
,   
Guid!! 
courseId!! 
)"" 
;"" 
Task$$ 
<$$ 	
ResponseDTO$$	 
>$$ 
GetCourseInfo$$ #
(%% 
ClaimsPrincipal&& 
User&& 
,&& 
Guid'' 
courseId'' 
)(( 
;(( 
Task** 
<** 	
ResponseDTO**	 
>** 
ActivateCourse** $
(++ 
ClaimsPrincipal,, 
User,, 
,,, 
Guid-- 
courseId-- 
).. 
;.. 
Task00 
<00 	
ResponseDTO00	 
>00 
DeactivateCourse00 &
(11 
ClaimsPrincipal22 
User22 
,22 
Guid33 
courseId33 
)44 
;44 
Task66 
<66 	
ResponseDTO66	 
>66 
EnrollCourse66 "
(77 
ClaimsPrincipal88 
User88 
,88 
EnrollCourseDTO99 
enrollCourseDto99 '
):: 
;:: 
Task<< 
<<< 	
ResponseDTO<<	 
><< "
GetTopPurchasedCourses<< ,
(== 
int>> 
?>> 
year>> 
,>> 
int?? 
??? 
month?? 
,?? 
int@@ 
?@@ 
quarter@@ 
,@@ 
intAA 
topAA 
,AA 
intBB 

pageNumberBB 
,BB 
intCC 
pageSizeCC 
,CC 
stringDD 
?DD 
byCategoryNameDD 
)EE 
;EE 
TaskGG 
<GG 	
ResponseDTOGG	 
>GG $
GetLeastPurchasedCoursesGG .
(HH 
intII 
?II 
yearII 
,II 
intJJ 
?JJ 
monthJJ 
,JJ 
intKK 
?KK 
quarterKK 
,KK 
intLL 
topLL 
,LL 
intMM 

pageNumberMM 
,MM 
intNN 
pageSizeNN 
,NN 
stringOO 
?OO 
byCategoryNameOO 
)PP 
;PP 
TaskRR 
<RR 	
ResponseDTORR	 
>RR 
SuggestCourseRR #
(RR# $
GuidRR$ (
	studentIdRR) 2
)RR2 3
;RR3 4
TaskSS 
<SS 	
ResponseDTOSS	 
>SS 
UpsertCourseTotalSS '
(SS' ( 
UpsertCourseTotalDTOSS( < 
upsertCourseTotalDtoSS= Q
)SSQ R
;SSR S
TaskTT 
<TT 	
ResponseDTOTT	 
>TT '
GetAllBookMarkedCoursesByIdTT 1
(TT1 2
GuidTT2 6
	studentIdTT7 @
,TT@ A
stringTTB H
	sortOrderTTI R
=TTS T
$strTTU [
)TT[ \
;TT\ ]
TaskUU 
<UU 	
ResponseDTOUU	 
>UU "
CreateBookMarkedCourseUU ,
(UU, -
ClaimsPrincipalUU- <
UserUU= A
,UUA B#
CreateCourseBookmarkDTOUUC Z#
createCourseBookmarkDtoUU[ r
)UUr s
;UUs t
TaskVV 
<VV 	
ResponseDTOVV	 
>VV "
DeleteBookMarkedCourseVV ,
(VV, -
GuidVV- 1
idVV2 4
)VV4 5
;VV5 6
TaskXX 
<XX 	
ResponseDTOXX	 
>XX $
GetBestCoursesSuggestionXX .
(XX. /
)XX/ 0
;XX0 1
TaskYY 
<YY 	
ResponseDTOYY	 
>YY -
!GetTopCoursesByTrendingCategoriesYY 7
(YY7 8
)YY8 9
;YY9 :
TaskZZ 
<ZZ 	
ResponseDTOZZ	 
>ZZ 
GetTopRatedCoursesZZ (
(ZZ( )
)ZZ) *
;ZZ* +
}]] ı
kD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IClosedXMLService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IClosedXMLService "
{ 
Task 
< 	
string	 
> !
ExportInstructorExcel &
(& '
List' +
<+ ,
InstructorInfoDTO, =
>= >
instructorInfoDtos? Q
)Q R
;R S
Task		 
<		 	
string			 
>		 
ExportStudentExcel		 #
(		# $
List		$ (
<		( )
StudentFullInfoDTO		) ;
>		; <
studentFullInfoDTOs		= P
)		P Q
;		Q R
} „
vD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ICourseSectionVersionService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface (
ICourseSectionVersionService -
{ 
Task 
< 	
ResponseDTO	 
> %
CloneCourseSectionVersion /
(		 
ClaimsPrincipal

 
User

 
,

 (
CloneCourseSectionVersionDTO $(
cloneCourseSectionVersionDto% A
) 
; 
Task 
< 	
ResponseDTO	 
> 
GetCourseSections '
( 
ClaimsPrincipal 
User 
, 
Guid 
? 
courseVersionId 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
int 

pageNumber 
, 
int 
pageSize 
) 
; 
Task 
< 	
ResponseDTO	 
> 
GetCourseSection &
( 
ClaimsPrincipal 
User 
, 
Guid 
courseVersionId 
) 
; 
Task 
< 	
ResponseDTO	 
> 
CreateCourseSection )
( 
ClaimsPrincipal   
User   
,   )
CreateCourseSectionVersionDTO!! %)
createCourseSectionVersionDTO!!& C
)"" 
;"" 
Task## 
<## 	
ResponseDTO##	 
>## 
EditCourseSection## '
($$ 
ClaimsPrincipal%% 
User%% 
,%% '
EditCourseSectionVersionDTO&& #'
editCourseSectionVersionDTO&&$ ?
)'' 
;'' 
Task(( 
<(( 	
ResponseDTO((	 
>(( 
RemoveCourseSection(( )
()) 
ClaimsPrincipal** 
User** 
,** 
Guid++ 
sectionVersionId++ 
),, 
;,, 
}-- ¨
nD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ICourseReviewService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface  
ICourseReviewService %
{ 
Task		 
<		 	
ResponseDTO			 
>		 
CreateCourseReview		 (
(		( )!
CreateCourseReviewDTO		) >!
createCourseReviewDTO		? T
)		T U
;		U V
Task

 
<

 	
ResponseDTO

	 
>

 
UpdateCourseReview

 (
(

( )
ClaimsPrincipal

) 8
User

9 =
,

= >!
UpdateCourseReviewDTO

> S!
updateCourseReviewDTO

T i
)

i j
;

j k
Task 
< 	
ResponseDTO	 
> 
DeleteCourseReview (
(( )
Guid) -
id. 0
)0 1
;1 2
Task 
< 	
ResponseDTO	 
> 
MarkCourseReview &
(& '
Guid' +
id, .
). /
;/ 0
Task 
< 	
ResponseDTO	 
> 
GetCourseReviewById )
() *
Guid* .
id/ 1
)1 2
;2 3
Task 
< 	
ResponseDTO	 
> 
GetCourseReviews &
( 
ClaimsPrincipal 
User 
, 
Guid 
? 
courseId 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
, 
int 
pageSize 
) 
; 
} ñ
nD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ICourseReportService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 

	interface  
ICourseReportService )
{		 
Task

 
<

 
ResponseDTO

 
>

 
GetCourseReports

 *
(

* +
ClaimsPrincipal

+ :
User

; ?
,

? @
Guid

A E
?

E F
courseId

G O
,

O P
string

Q W
?

W X
filterOn

Y a
,

a b
string

c i
?

i j
filterQuery

k v
,

v w
string

x ~
?

~ 
sortBy


Ä Ü
,


Ü á
bool


à å
?


å ç
isAscending


é ô
,


ô ö
int


õ û

pageNumber


ü ©
,


© ™
int


´ Æ
pageSize


Ø ∑
)


∑ ∏
;


∏ π
Task 
< 
ResponseDTO 
> 
GetCourseReportById -
(- .
Guid. 2
id3 5
)5 6
;6 7
Task 
< 
ResponseDTO 
> 
CreateCourseReport ,
(, -!
CreateCourseReportDTO- B!
createCourseReportDTOC X
)X Y
;Y Z
Task 
< 
ResponseDTO 
> 
UpdateCourseReport ,
(, -
ClaimsPrincipal- <
User= A
,A B!
UpdateCourseReportDTOB W!
updateCourseReportDTOX m
)m n
;n o
Task 
< 
ResponseDTO 
> 
DeleteCourseReport ,
(, -
Guid- 1
id2 4
)4 5
;5 6
} Æ	
pD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ICourseProgressService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface "
ICourseProgressService '
{ 
Task 
< 	
ResponseDTO	 
> 
CreateProgress $
($ %
CreateProgressDTO% 6
createProgressDto7 H
)H I
;I J
Task		 
<		 	
ResponseDTO			 
>		 
UpdateProgress		 $
(		$ %
UpdateProgressDTO		% 6
updateProgressDto		7 H
)		H I
;		I J
Task

 
<

 	
ResponseDTO

	 
>

 
GetProgress

 !
(

! "
GetProgressDTO

" 0
getProgressDto

1 ?
)

? @
;

@ A
Task 
< 	
ResponseDTO	 
> 
GetPercentage #
(# $
GetPercentageDTO$ 4
getPercentageDto5 E
)E F
;F G
} ¡
iD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ICompanyService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
ICompanyService  
{ 
Task 
< 	
ResponseDTO	 
> 

GetCompany  
(  !
)! "
;" #
Task 
< 	
ResponseDTO	 
> 
UpdateCompany #
(# $
UpdateCompanyDTO$ 4

companyDto5 ?
)? @
;@ A
}		 –
jD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ICategoryService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
ICategoryService !
{ 
Task		 
<		 	
ResponseDTO			 
>		 
GetAll		 
(

 
ClaimsPrincipal 
User 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
, 
int 
pageSize 
) 
; 
Task 
< 	
ResponseDTO	 
> 
Search 
( 
ClaimsPrincipal 
User 
, 
string 
? 
filterOn 
, 
string 
? 
filterQuery 
, 
string 
? 
sortBy 
, 
bool 
? 
isAscending 
, 
int 

pageNumber 
, 
int 
pageSize 
) 
; 
Task 
< 	
ResponseDTO	 
> 
GetSubCategory $
($ %
Guid% )
id* ,
), -
;- .
Task   
<   	
ResponseDTO  	 
>   
GetParentCategory   '
(  ' (
Guid  ( ,
id  - /
)  / 0
;  0 1
Task!! 
<!! 	
ResponseDTO!!	 
>!! 
Get!! 
(!! 
ClaimsPrincipal!! )
User!!* .
,!!. /
Guid!!0 4
id!!5 7
)!!7 8
;!!8 9
Task"" 
<"" 	
ResponseDTO""	 
>"" 
CreateCategory"" $
(""$ %
ClaimsPrincipal""% 4
User""5 9
,""9 :
CreateCategoryDTO""; L
createCategoryDto""M ^
)""^ _
;""_ `
Task## 
<## 	
ResponseDTO##	 
>## 
Update## 
(## 
ClaimsPrincipal## ,
User##- 1
,##1 2
UpdateCategoryDTO##3 D
updateCategoryDto##E V
)##V W
;##W X
Task$$ 
<$$ 	
ResponseDTO$$	 
>$$ 
Delete$$ 
($$ 
ClaimsPrincipal$$ ,
User$$- 1
,$$1 2
Guid$$3 7
id$$8 :
)$$: ;
;$$; <
}%% “	
fD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\ICartService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
ICartService 
{ 
Task 
< 	
ResponseDTO	 
> 
GetCart 
( 
ClaimsPrincipal -
User. 2
)2 3
;3 4
Task		 
<		 	
ResponseDTO			 
>		 
	AddToCart		 
(		  
ClaimsPrincipal		  /
User		0 4
,		4 5
AddToCartDTO		6 B
addToCartDto		C O
)		O P
;		P Q
Task

 
<

 	
ResponseDTO

	 
>

 
RemoveFromCart

 $
(

$ %
ClaimsPrincipal

% 4
User

5 9
,

9 :
Guid

; ?
courseId

@ H
)

H I
;

I J
Task 
< 	
ResponseDTO	 
> 
Checkout 
( 
ClaimsPrincipal .
User/ 3
)3 4
;4 5
} ¯
fD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IBaseService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IBaseService 
{ 
Task 
< 	
ResponseDTO	 
? 
> 
	SendAsync  
(  !

RequestDTO! +

requestDto, 6
,6 7
string8 >
?> ?
apiKey@ F
)F G
;G H
} π
iD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IBalanceService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IBalanceService  
{ 
Task 
< 	
ResponseDTO	 
> 
UpsertBalance #
(# $
UpsertBalanceDTO$ 4
upsertBalanceDto5 E
)E F
;F G
} ∑1
fD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\IService\IAuthService.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
IService %
;% &
public 
	interface 
IAuthService 
{ 
Task		 
<		 	
ResponseDTO			 
>		 
SignUpStudent		 #
(		# $
RegisterStudentDTO		$ 6
registerStudentDTO		7 I
)		I J
;		J K
Task

 
<

 	
ResponseDTO

	 
>

 
SignUpInstructor

 &
(

& '
SignUpInstructorDTO

' :
signUpInstructorDto

; N
)

N O
;

O P
Task 
< 	
ResponseDTO	 
> "
UploadInstructorDegree ,
(, -
	IFormFile- 6
file7 ;
,; <
ClaimsPrincipal= L
userM Q
)Q R
;R S
Task 
< 	
ResponseDTO	 
> 
UploadUserAvatar &
(& '
	IFormFile' 0
file1 5
,5 6
ClaimsPrincipal7 F
userG K
)K L
;L M
Task 
< 	
DegreeResponseDTO	 
> 
GetInstructorDegree /
(/ 0
ClaimsPrincipal0 ?
user@ D
)D E
;E F
Task 
< 	
MemoryStream	 
> 
GetUserAvatar $
($ %
ClaimsPrincipal% 4
user5 9
)9 :
;: ;
Task 
< 	
ResponseDTO	 
> 
SignIn 
( 
SignDTO $
signDTO% ,
), -
;- .
Task 
< 	
ResponseDTO	 
> 
ForgotPassword $
($ %
ForgotPasswordDTO% 6
forgotPasswordDto7 H
)H I
;I J
Task 
< 	
ResponseDTO	 
> 
Refresh 
( 
string $
token% *
)* +
;+ ,
Task 
< 	
ResponseDTO	 
> 
ResetPassword #
(# $
string$ *
resetPasswordDto+ ;
,; <
string= C
tokenD I
,I J
stringK Q
passwordR Z
)Z [
;[ \
Task 
< 	
ResponseDTO	 
> 
ChangePassword $
($ %
string% +
userId, 2
,2 3
string4 :
oldPassword; F
,F G
stringH N
newPasswordO Z
,Z [
string\ b
confirmNewPasswordc u
)u v
;v w
Task 
< 	
ResponseDTO	 
> 
SendVerifyEmail %
(% &
string& ,
email- 2
,2 3
string4 :
confirmationLink; K
)K L
;L M
Task 
< 	
ResponseDTO	 
> 
VerifyEmail !
(! "
string" (
userId) /
,/ 0
string1 7
token8 =
)= >
;> ?
Task 
< 	
ResponseDTO	 
> 
CheckEmailExist %
(% &
string& ,
email- 2
)2 3
;3 4
Task 
< 	
ResponseDTO	 
> !
CheckPhoneNumberExist +
(+ ,
string, 2
phoneNumber3 >
)> ?
;? @
Task 
< 	
ResponseDTO	 
> 
SignInByGoogle $
($ %
SignInByGoogleDTO% 6
signInByGoogleDto7 H
)H I
;I J
Task 
< 	
ResponseDTO	 
> "
CompleteStudentProfile ,
(, -
ClaimsPrincipal- <
User= A
,A B%
CompleteStudentProfileDTOC \
studentProfileDto] n
)n o
;o p
Task 
< 	
ResponseDTO	 
> %
CompleteInstructorProfile /
(/ 0
ClaimsPrincipal0 ?
User@ D
,D E(
CompleteInstructorProfileDTOF b 
instructorProfileDtoc w
)w x
;x y
Task 
< 	
ResponseDTO	 
> 
GetUserInfo !
(! "
ClaimsPrincipal" 1
User2 6
)6 7
;7 8
Task 
< 	
MemoryStream	 
> 
DisplayUserAvatar (
(( )
string) /
userId0 6
)6 7
;7 8
Task 
< 	
DegreeResponseDTO	 
> #
DisplayInstructorDegree 3
(3 4
string4 :
userId; A
)A B
;B C
Task 
< 	
ResponseDTO	 
> 
UpdateStudent #
(# $#
UpdateStudentProfileDTO$ ;
updateStudentDto< L
,L M
ClaimsPrincipalN ]
User^ b
)b c
;c d
Task 
< 	
ResponseDTO	 
> 
UpdateInstructor &
(& '%
UpdateIntructorProfileDTO' @
updateIntructorDtoA S
,S T
ClaimsPrincipalU d
Usere i
)i j
;j k
Task   
<   	
ResponseDTO  	 
>   
LockUser   
(   
LockUserDTO   *
lockUserDto  + 6
)  6 7
;  7 8
Task!! 
<!! 	
ResponseDTO!!	 
>!! 

UnlockUser!!  
(!!  !
LockUserDTO!!! ,
lockUserDto!!- 8
)!!8 9
;!!9 :
Task"" 
SendClearEmail""	 
("" 
int"" 
	fromMonth"" %
)""% &
;""& '
Task## 
	ClearUser##	 
(## 
)## 
;## 
}$$ ∏
eD:\FPT\Semester 6\Project_Cursus\Backend_Cursus\Cursus.LMS\Cursus.LMS.Service\Hubs\NotificationHub.cs
	namespace 	
Cursus
 
. 
LMS 
. 
Service 
. 
Hubs !
;! "
[ 
	Authorize 

]
 
public 
class 
NotificationHub 
: 
Hub "
{ 
private		 
static		 
readonly		 

Dictionary		 &
<		& '
string		' -
,		- .
string		/ 5
>		5 6
_connections		7 C
=		D E
new		F I

Dictionary		J T
<		T U
string		U [
,		[ \
string		] c
>		c d
(		d e
)		e f
;		f g
public 

override 
Task 
OnConnectedAsync )
() *
)* +
{ 
string 
userId 
= 
Context 
.  
UserIdentifier  .
;. /
if 

( 
userId 
!= 
null 
) 
{ 	
_connections 
[ 
userId 
]  
=! "
Context# *
.* +
ConnectionId+ 7
;7 8
} 	
return 
base 
. 
OnConnectedAsync $
($ %
)% &
;& '
} 
public 

override 
Task 
OnDisconnectedAsync ,
(, -
	Exception- 6
	exception7 @
)@ A
{ 
string 
userId 
= 
Context 
.  
UserIdentifier  .
;. /
if 

( 
userId 
!= 
null 
) 
{ 	
_connections 
. 
Remove 
(  
userId  &
)& '
;' (
} 	
return 
base 
. 
OnDisconnectedAsync '
(' (
	exception( 1
)1 2
;2 3
} 
public 

Task 
SendMessageToUser !
(! "
string" (
userId) /
,/ 0
string1 7
message8 ?
)? @
{   
if!! 

(!! 
_connections!! 
.!! 
TryGetValue!! $
(!!$ %
userId!!% +
,!!+ ,
out!!- 0
var!!1 4
connectionId!!5 A
)!!A B
)!!B C
{"" 	
return## 
Clients## 
.## 
Client## !
(##! "
connectionId##" .
)##. /
.##/ 0
	SendAsync##0 9
(##9 :
$str##: J
,##J K
message##L S
)##S T
;##T U
}$$ 	
return%% 
Task%% 
.%% 
CompletedTask%% !
;%%! "
}&& 
}'' 